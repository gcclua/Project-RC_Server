// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CG_LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_LOGIN_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_LOGIN_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_LOGIN_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_REQ_NEAR_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_REQ_NEAR_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_NEAR_MARCHLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_NEAR_MARCHLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CHAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CHAT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_CHAT_CHATTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_CHAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CHAT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_CHAT_CHATTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_NOTICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_NOTICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_SCENE_INSTACTIVATION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_SCENE_INSTACTIVATION_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TELEMOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TELEMOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_SKILL_USE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_SKILL_USE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_RET_USE_SKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RET_USE_SKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_ANIMATION_STATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_ANIMATION_STATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DELETE_OBJ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DELETE_OBJ_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ATTACKFLY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ATTACKFLY_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_FORCE_SETPOS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_FORCE_SETPOS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_NEEDIMPACTINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_NEEDIMPACTINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PLAY_EFFECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PLAY_EFFECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_REMOVEEFFECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_REMOVEEFFECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_FIGHT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_FIGHT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_FIGHT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_FIGHT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_LEAVE_COPYSCENE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_LEAVE_COPYSCENE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ROBOT_OPEN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ROBOT_OPEN_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ROBOT_OPEN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ROBOT_OPEN_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ASSIGN_HERO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ASSIGN_HERO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ASSIGN_HERO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ASSIGN_HERO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_SEND_MARCH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_SEND_MARCH_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SEND_MARCH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SEND_MARCH_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CREATEROLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CREATEROLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CREATEROLE_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CREATEROLE_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_LOGIN_QUEUE_STATUS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_LOGIN_QUEUE_STATUS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_RoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_BuildingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_BuildingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CoolDownInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CoolDownInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_HeroData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_HeroData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TroopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TroopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MarchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MarchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TargetMarchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TargetMarchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_HeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_HeroList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MarchList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MarchList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_BATTLEINFOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_BATTLEINFOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJINFOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJINFOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_BATTLEINFOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_BATTLEINFOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJPOS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJPOS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJPOSLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJPOSLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_OBJPOSLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_OBJPOSLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJCOMMANDPURSUE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJCOMMANDPURSUE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJPREPAREFORATTACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJPREPAREFORATTACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OBJGETHURT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OBJGETHURT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_Building_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_Building_LevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_Building_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_Building_LevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_Update_March_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_Update_March_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMessage_2eproto() {
  protobuf_AddDesc_PBMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CG_LOGIN_descriptor_ = file->message_type(0);
  static const int CG_LOGIN_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, programversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, publicresourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, maxpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, forceenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, validateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, mediachannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, rapidvalidatecode_),
  };
  CG_LOGIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_LOGIN_descriptor_,
      CG_LOGIN::default_instance_,
      CG_LOGIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_LOGIN));
  CG_LOGIN_VALIDATETYPE_descriptor_ = CG_LOGIN_descriptor_->enum_type(0);
  GC_LOGIN_RET_descriptor_ = file->message_type(1);
  static const int GC_LOGIN_RET_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, validateresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, marchlist_),
  };
  GC_LOGIN_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_LOGIN_RET_descriptor_,
      GC_LOGIN_RET::default_instance_,
      GC_LOGIN_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_LOGIN_RET));
  GC_LOGIN_RET_LOGINRESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(0);
  GC_LOGIN_RET_VALIDATERESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(1);
  CG_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(2);
  static const int CG_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, isresponse_),
  };
  CG_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CONNECTED_HEARTBEAT_descriptor_,
      CG_CONNECTED_HEARTBEAT::default_instance_,
      CG_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CONNECTED_HEARTBEAT));
  GC_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(3);
  static const int GC_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, serveransitime_),
  };
  GC_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CONNECTED_HEARTBEAT_descriptor_,
      GC_CONNECTED_HEARTBEAT::default_instance_,
      GC_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CONNECTED_HEARTBEAT));
  CG_REQ_NEAR_LIST_descriptor_ = file->message_type(4);
  static const int CG_REQ_NEAR_LIST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, sceneid_),
  };
  CG_REQ_NEAR_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_REQ_NEAR_LIST_descriptor_,
      CG_REQ_NEAR_LIST::default_instance_,
      CG_REQ_NEAR_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_REQ_NEAR_LIST));
  GC_NEAR_MARCHLIST_descriptor_ = file->message_type(5);
  static const int GC_NEAR_MARCHLIST_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, combatnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, sceneid_),
  };
  GC_NEAR_MARCHLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_NEAR_MARCHLIST_descriptor_,
      GC_NEAR_MARCHLIST::default_instance_,
      GC_NEAR_MARCHLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_NEAR_MARCHLIST));
  CG_CHAT_descriptor_ = file->message_type(6);
  static const int CG_CHAT_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receiverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receiverlevel_),
  };
  CG_CHAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CHAT_descriptor_,
      CG_CHAT::default_instance_,
      CG_CHAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CHAT));
  CG_CHAT_CHATTYPE_descriptor_ = CG_CHAT_descriptor_->enum_type(0);
  GC_CHAT_descriptor_ = file->message_type(7);
  static const int GC_CHAT_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, senderguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, senderlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, receiverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, receivername_),
  };
  GC_CHAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CHAT_descriptor_,
      GC_CHAT::default_instance_,
      GC_CHAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CHAT));
  GC_CHAT_CHATTYPE_descriptor_ = GC_CHAT_descriptor_->enum_type(0);
  GC_NOTICE_descriptor_ = file->message_type(8);
  static const int GC_NOTICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, filterrepeat_),
  };
  GC_NOTICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_NOTICE_descriptor_,
      GC_NOTICE::default_instance_,
      GC_NOTICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_NOTICE));
  GC_UPDATE_SCENE_INSTACTIVATION_descriptor_ = file->message_type(9);
  static const int GC_UPDATE_SCENE_INSTACTIVATION_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneclassid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneinstcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneactivation_),
  };
  GC_UPDATE_SCENE_INSTACTIVATION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_SCENE_INSTACTIVATION_descriptor_,
      GC_UPDATE_SCENE_INSTACTIVATION::default_instance_,
      GC_UPDATE_SCENE_INSTACTIVATION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_SCENE_INSTACTIVATION));
  CG_MOVE_descriptor_ = file->message_type(10);
  static const int CG_MOVE_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, ismoving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, sceneid_),
  };
  CG_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_MOVE_descriptor_,
      CG_MOVE::default_instance_,
      CG_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_MOVE));
  GC_MOVE_descriptor_ = file->message_type(11);
  static const int GC_MOVE_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, sceneid_),
  };
  GC_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MOVE_descriptor_,
      GC_MOVE::default_instance_,
      GC_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MOVE));
  GC_STOP_descriptor_ = file->message_type(12);
  static const int GC_STOP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, sceneid_),
  };
  GC_STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_STOP_descriptor_,
      GC_STOP::default_instance_,
      GC_STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_STOP));
  GC_TELEMOVE_descriptor_ = file->message_type(13);
  static const int GC_TELEMOVE_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, targetposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, targetposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, needchangefaceto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, animaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, sceneid_),
  };
  GC_TELEMOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TELEMOVE_descriptor_,
      GC_TELEMOVE::default_instance_,
      GC_TELEMOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TELEMOVE));
  CG_SKILL_USE_descriptor_ = file->message_type(14);
  static const int CG_SKILL_USE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, sceneid_),
  };
  CG_SKILL_USE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_SKILL_USE_descriptor_,
      CG_SKILL_USE::default_instance_,
      CG_SKILL_USE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SKILL_USE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_SKILL_USE));
  GC_RET_USE_SKILL_descriptor_ = file->message_type(15);
  static const int GC_RET_USE_SKILL_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillfailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, sceneid_),
  };
  GC_RET_USE_SKILL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RET_USE_SKILL_descriptor_,
      GC_RET_USE_SKILL::default_instance_,
      GC_RET_USE_SKILL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RET_USE_SKILL));
  GC_UPDATE_ANIMATION_STATE_descriptor_ = file->message_type(16);
  static const int GC_UPDATE_ANIMATION_STATE_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, animationstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, verticaloffdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, horizontaloffdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, statelasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, stateresorttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, hittimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, hitinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, sceneid_),
  };
  GC_UPDATE_ANIMATION_STATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_ANIMATION_STATE_descriptor_,
      GC_UPDATE_ANIMATION_STATE::default_instance_,
      GC_UPDATE_ANIMATION_STATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_ANIMATION_STATE));
  GC_DELETE_OBJ_descriptor_ = file->message_type(17);
  static const int GC_DELETE_OBJ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, marchid_),
  };
  GC_DELETE_OBJ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DELETE_OBJ_descriptor_,
      GC_DELETE_OBJ::default_instance_,
      GC_DELETE_OBJ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DELETE_OBJ));
  GC_ATTACKFLY_descriptor_ = file->message_type(18);
  static const int GC_ATTACKFLY_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, flytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, sceneid_),
  };
  GC_ATTACKFLY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ATTACKFLY_descriptor_,
      GC_ATTACKFLY::default_instance_,
      GC_ATTACKFLY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ATTACKFLY));
  GC_FORCE_SETPOS_descriptor_ = file->message_type(19);
  static const int GC_FORCE_SETPOS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, sceneid_),
  };
  GC_FORCE_SETPOS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_FORCE_SETPOS_descriptor_,
      GC_FORCE_SETPOS::default_instance_,
      GC_FORCE_SETPOS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_FORCE_SETPOS));
  GC_UPDATE_NEEDIMPACTINFO_descriptor_ = file->message_type(20);
  static const int GC_UPDATE_NEEDIMPACTINFO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, impactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, impactlogicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, isforever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, sceneid_),
  };
  GC_UPDATE_NEEDIMPACTINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_NEEDIMPACTINFO_descriptor_,
      GC_UPDATE_NEEDIMPACTINFO::default_instance_,
      GC_UPDATE_NEEDIMPACTINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_NEEDIMPACTINFO));
  GC_PLAY_EFFECT_descriptor_ = file->message_type(21);
  static const int GC_PLAY_EFFECT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, sceneid_),
  };
  GC_PLAY_EFFECT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PLAY_EFFECT_descriptor_,
      GC_PLAY_EFFECT::default_instance_,
      GC_PLAY_EFFECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PLAY_EFFECT));
  GC_REMOVEEFFECT_descriptor_ = file->message_type(22);
  static const int GC_REMOVEEFFECT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, sceneid_),
  };
  GC_REMOVEEFFECT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_REMOVEEFFECT_descriptor_,
      GC_REMOVEEFFECT::default_instance_,
      GC_REMOVEEFFECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_REMOVEEFFECT));
  CG_FIGHT_descriptor_ = file->message_type(23);
  static const int CG_FIGHT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, defenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, sceneid_),
  };
  CG_FIGHT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_FIGHT_descriptor_,
      CG_FIGHT::default_instance_,
      CG_FIGHT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_FIGHT));
  GC_FIGHT_descriptor_ = file->message_type(24);
  static const int GC_FIGHT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FIGHT, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FIGHT, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FIGHT, sceneid_),
  };
  GC_FIGHT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_FIGHT_descriptor_,
      GC_FIGHT::default_instance_,
      GC_FIGHT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FIGHT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FIGHT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_FIGHT));
  CG_LEAVE_COPYSCENE_descriptor_ = file->message_type(25);
  static const int CG_LEAVE_COPYSCENE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, sceneid_),
  };
  CG_LEAVE_COPYSCENE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_LEAVE_COPYSCENE_descriptor_,
      CG_LEAVE_COPYSCENE::default_instance_,
      CG_LEAVE_COPYSCENE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_LEAVE_COPYSCENE));
  CG_ROBOT_OPEN_descriptor_ = file->message_type(26);
  static const int CG_ROBOT_OPEN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ROBOT_OPEN, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ROBOT_OPEN, open_),
  };
  CG_ROBOT_OPEN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ROBOT_OPEN_descriptor_,
      CG_ROBOT_OPEN::default_instance_,
      CG_ROBOT_OPEN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ROBOT_OPEN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ROBOT_OPEN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ROBOT_OPEN));
  GC_ROBOT_OPEN_descriptor_ = file->message_type(27);
  static const int GC_ROBOT_OPEN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ROBOT_OPEN, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ROBOT_OPEN, ret_),
  };
  GC_ROBOT_OPEN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ROBOT_OPEN_descriptor_,
      GC_ROBOT_OPEN::default_instance_,
      GC_ROBOT_OPEN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ROBOT_OPEN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ROBOT_OPEN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ROBOT_OPEN));
  CG_ASSIGN_HERO_descriptor_ = file->message_type(28);
  static const int CG_ASSIGN_HERO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASSIGN_HERO, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASSIGN_HERO, heroid_),
  };
  CG_ASSIGN_HERO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ASSIGN_HERO_descriptor_,
      CG_ASSIGN_HERO::default_instance_,
      CG_ASSIGN_HERO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASSIGN_HERO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASSIGN_HERO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ASSIGN_HERO));
  GC_ASSIGN_HERO_descriptor_ = file->message_type(29);
  static const int GC_ASSIGN_HERO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASSIGN_HERO, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASSIGN_HERO, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASSIGN_HERO, ret_),
  };
  GC_ASSIGN_HERO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ASSIGN_HERO_descriptor_,
      GC_ASSIGN_HERO::default_instance_,
      GC_ASSIGN_HERO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASSIGN_HERO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASSIGN_HERO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ASSIGN_HERO));
  CG_SEND_MARCH_descriptor_ = file->message_type(30);
  static const int CG_SEND_MARCH_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SEND_MARCH, marchid_),
  };
  CG_SEND_MARCH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_SEND_MARCH_descriptor_,
      CG_SEND_MARCH::default_instance_,
      CG_SEND_MARCH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SEND_MARCH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SEND_MARCH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_SEND_MARCH));
  GC_SEND_MARCH_descriptor_ = file->message_type(31);
  static const int GC_SEND_MARCH_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SEND_MARCH, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SEND_MARCH, ret_),
  };
  GC_SEND_MARCH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SEND_MARCH_descriptor_,
      GC_SEND_MARCH::default_instance_,
      GC_SEND_MARCH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SEND_MARCH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SEND_MARCH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SEND_MARCH));
  CG_CREATEROLE_descriptor_ = file->message_type(32);
  static const int CG_CREATEROLE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, name_),
  };
  CG_CREATEROLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CREATEROLE_descriptor_,
      CG_CREATEROLE::default_instance_,
      CG_CREATEROLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CREATEROLE));
  GC_CREATEROLE_RET_descriptor_ = file->message_type(33);
  static const int GC_CREATEROLE_RET_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, playername_),
  };
  GC_CREATEROLE_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CREATEROLE_RET_descriptor_,
      GC_CREATEROLE_RET::default_instance_,
      GC_CREATEROLE_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CREATEROLE_RET));
  GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_ = GC_CREATEROLE_RET_descriptor_->enum_type(0);
  GC_LOGIN_QUEUE_STATUS_descriptor_ = file->message_type(34);
  static const int GC_LOGIN_QUEUE_STATUS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, index_),
  };
  GC_LOGIN_QUEUE_STATUS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_LOGIN_QUEUE_STATUS_descriptor_,
      GC_LOGIN_QUEUE_STATUS::default_instance_,
      GC_LOGIN_QUEUE_STATUS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_LOGIN_QUEUE_STATUS));
  GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_ = GC_LOGIN_QUEUE_STATUS_descriptor_->enum_type(0);
  GC_RoleData_descriptor_ = file->message_type(35);
  static const int GC_RoleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RoleData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RoleData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RoleData, accountname_),
  };
  GC_RoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RoleData_descriptor_,
      GC_RoleData::default_instance_,
      GC_RoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RoleData));
  GC_BuildingData_descriptor_ = file->message_type(36);
  static const int GC_BuildingData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, level_),
  };
  GC_BuildingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_BuildingData_descriptor_,
      GC_BuildingData::default_instance_,
      GC_BuildingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BuildingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_BuildingData));
  GC_CoolDownInfo_descriptor_ = file->message_type(37);
  static const int GC_CoolDownInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CoolDownInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CoolDownInfo, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CoolDownInfo, elapsed_),
  };
  GC_CoolDownInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CoolDownInfo_descriptor_,
      GC_CoolDownInfo::default_instance_,
      GC_CoolDownInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CoolDownInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CoolDownInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CoolDownInfo));
  GC_HeroData_descriptor_ = file->message_type(38);
  static const int GC_HeroData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, arrangeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, marchid_),
  };
  GC_HeroData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_HeroData_descriptor_,
      GC_HeroData::default_instance_,
      GC_HeroData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_HeroData));
  GC_TroopData_descriptor_ = file->message_type(39);
  static const int GC_TroopData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, arrangeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, marchid_),
  };
  GC_TroopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TroopData_descriptor_,
      GC_TroopData::default_instance_,
      GC_TroopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TroopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TroopData));
  GC_MarchData_descriptor_ = file->message_type(40);
  static const int GC_MarchData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, marchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, troop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, sceneid_),
  };
  GC_MarchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MarchData_descriptor_,
      GC_MarchData::default_instance_,
      GC_MarchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MarchData));
  GC_TargetMarchData_descriptor_ = file->message_type(41);
  static const int GC_TargetMarchData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TargetMarchData, marchid_),
  };
  GC_TargetMarchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TargetMarchData_descriptor_,
      GC_TargetMarchData::default_instance_,
      GC_TargetMarchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TargetMarchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TargetMarchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TargetMarchData));
  GC_CityData_descriptor_ = file->message_type(42);
  static const int GC_CityData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, tileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, buildlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, trooplist_),
  };
  GC_CityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CityData_descriptor_,
      GC_CityData::default_instance_,
      GC_CityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CityData));
  GC_HeroList_descriptor_ = file->message_type(43);
  static const int GC_HeroList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroList, herolist_),
  };
  GC_HeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_HeroList_descriptor_,
      GC_HeroList::default_instance_,
      GC_HeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_HeroList));
  GC_MarchList_descriptor_ = file->message_type(44);
  static const int GC_MarchList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchList, marchlist_),
  };
  GC_MarchList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MarchList_descriptor_,
      GC_MarchList::default_instance_,
      GC_MarchList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarchList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MarchList));
  CG_BATTLEINFOR_descriptor_ = file->message_type(45);
  static const int CG_BATTLEINFOR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_BATTLEINFOR, sceneid_),
  };
  CG_BATTLEINFOR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_BATTLEINFOR_descriptor_,
      CG_BATTLEINFOR::default_instance_,
      CG_BATTLEINFOR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_BATTLEINFOR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_BATTLEINFOR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_BATTLEINFOR));
  GC_OBJINFOR_descriptor_ = file->message_type(46);
  static const int GC_OBJINFOR_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, unitdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, skilldataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, unitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, arrangeindex_),
  };
  GC_OBJINFOR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJINFOR_descriptor_,
      GC_OBJINFOR::default_instance_,
      GC_OBJINFOR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJINFOR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJINFOR));
  GC_BATTLEINFOR_descriptor_ = file->message_type(47);
  static const int GC_BATTLEINFOR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BATTLEINFOR, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BATTLEINFOR, objlist_),
  };
  GC_BATTLEINFOR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_BATTLEINFOR_descriptor_,
      GC_BATTLEINFOR::default_instance_,
      GC_BATTLEINFOR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BATTLEINFOR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BATTLEINFOR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_BATTLEINFOR));
  GC_OBJPOS_descriptor_ = file->message_type(48);
  static const int GC_OBJPOS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, objstate_),
  };
  GC_OBJPOS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJPOS_descriptor_,
      GC_OBJPOS::default_instance_,
      GC_OBJPOS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJPOS));
  GC_OBJPOSLIST_descriptor_ = file->message_type(49);
  static const int GC_OBJPOSLIST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOSLIST, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOSLIST, objposlist_),
  };
  GC_OBJPOSLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJPOSLIST_descriptor_,
      GC_OBJPOSLIST::default_instance_,
      GC_OBJPOSLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOSLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPOSLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJPOSLIST));
  CG_OBJPOSLIST_descriptor_ = file->message_type(50);
  static const int CG_OBJPOSLIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_OBJPOSLIST, sceneid_),
  };
  CG_OBJPOSLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_OBJPOSLIST_descriptor_,
      CG_OBJPOSLIST::default_instance_,
      CG_OBJPOSLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_OBJPOSLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_OBJPOSLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_OBJPOSLIST));
  GC_OBJCOMMANDPURSUE_descriptor_ = file->message_type(51);
  static const int GC_OBJCOMMANDPURSUE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJCOMMANDPURSUE, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJCOMMANDPURSUE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJCOMMANDPURSUE, aimobjid_),
  };
  GC_OBJCOMMANDPURSUE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJCOMMANDPURSUE_descriptor_,
      GC_OBJCOMMANDPURSUE::default_instance_,
      GC_OBJCOMMANDPURSUE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJCOMMANDPURSUE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJCOMMANDPURSUE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJCOMMANDPURSUE));
  GC_OBJPREPAREFORATTACK_descriptor_ = file->message_type(52);
  static const int GC_OBJPREPAREFORATTACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPREPAREFORATTACK, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPREPAREFORATTACK, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPREPAREFORATTACK, aimobjid_),
  };
  GC_OBJPREPAREFORATTACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJPREPAREFORATTACK_descriptor_,
      GC_OBJPREPAREFORATTACK::default_instance_,
      GC_OBJPREPAREFORATTACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPREPAREFORATTACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJPREPAREFORATTACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJPREPAREFORATTACK));
  GC_OBJGETHURT_descriptor_ = file->message_type(53);
  static const int GC_OBJGETHURT_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, attackobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, objdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, deathnumber_),
  };
  GC_OBJGETHURT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OBJGETHURT_descriptor_,
      GC_OBJGETHURT::default_instance_,
      GC_OBJGETHURT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OBJGETHURT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OBJGETHURT));
  CG_Building_LevelUp_descriptor_ = file->message_type(54);
  static const int CG_Building_LevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_Building_LevelUp, buildingid_),
  };
  CG_Building_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_Building_LevelUp_descriptor_,
      CG_Building_LevelUp::default_instance_,
      CG_Building_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_Building_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_Building_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_Building_LevelUp));
  GC_Building_LevelUp_descriptor_ = file->message_type(55);
  static const int GC_Building_LevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Building_LevelUp, buildingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Building_LevelUp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Building_LevelUp, ret_),
  };
  GC_Building_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_Building_LevelUp_descriptor_,
      GC_Building_LevelUp::default_instance_,
      GC_Building_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Building_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Building_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_Building_LevelUp));
  GC_Update_March_descriptor_ = file->message_type(56);
  static const int GC_Update_March_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Update_March, data_),
  };
  GC_Update_March_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_Update_March_descriptor_,
      GC_Update_March::default_instance_,
      GC_Update_March_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Update_March, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Update_March, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_Update_March));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_LOGIN_descriptor_, &CG_LOGIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_LOGIN_RET_descriptor_, &GC_LOGIN_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CONNECTED_HEARTBEAT_descriptor_, &CG_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CONNECTED_HEARTBEAT_descriptor_, &GC_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_REQ_NEAR_LIST_descriptor_, &CG_REQ_NEAR_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_NEAR_MARCHLIST_descriptor_, &GC_NEAR_MARCHLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CHAT_descriptor_, &CG_CHAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CHAT_descriptor_, &GC_CHAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_NOTICE_descriptor_, &GC_NOTICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_SCENE_INSTACTIVATION_descriptor_, &GC_UPDATE_SCENE_INSTACTIVATION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_MOVE_descriptor_, &CG_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MOVE_descriptor_, &GC_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_STOP_descriptor_, &GC_STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TELEMOVE_descriptor_, &GC_TELEMOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_SKILL_USE_descriptor_, &CG_SKILL_USE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RET_USE_SKILL_descriptor_, &GC_RET_USE_SKILL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_ANIMATION_STATE_descriptor_, &GC_UPDATE_ANIMATION_STATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DELETE_OBJ_descriptor_, &GC_DELETE_OBJ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ATTACKFLY_descriptor_, &GC_ATTACKFLY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_FORCE_SETPOS_descriptor_, &GC_FORCE_SETPOS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_NEEDIMPACTINFO_descriptor_, &GC_UPDATE_NEEDIMPACTINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PLAY_EFFECT_descriptor_, &GC_PLAY_EFFECT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_REMOVEEFFECT_descriptor_, &GC_REMOVEEFFECT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_FIGHT_descriptor_, &CG_FIGHT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_FIGHT_descriptor_, &GC_FIGHT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_LEAVE_COPYSCENE_descriptor_, &CG_LEAVE_COPYSCENE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ROBOT_OPEN_descriptor_, &CG_ROBOT_OPEN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ROBOT_OPEN_descriptor_, &GC_ROBOT_OPEN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ASSIGN_HERO_descriptor_, &CG_ASSIGN_HERO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ASSIGN_HERO_descriptor_, &GC_ASSIGN_HERO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_SEND_MARCH_descriptor_, &CG_SEND_MARCH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SEND_MARCH_descriptor_, &GC_SEND_MARCH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CREATEROLE_descriptor_, &CG_CREATEROLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CREATEROLE_RET_descriptor_, &GC_CREATEROLE_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_LOGIN_QUEUE_STATUS_descriptor_, &GC_LOGIN_QUEUE_STATUS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RoleData_descriptor_, &GC_RoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_BuildingData_descriptor_, &GC_BuildingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CoolDownInfo_descriptor_, &GC_CoolDownInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_HeroData_descriptor_, &GC_HeroData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TroopData_descriptor_, &GC_TroopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MarchData_descriptor_, &GC_MarchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TargetMarchData_descriptor_, &GC_TargetMarchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CityData_descriptor_, &GC_CityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_HeroList_descriptor_, &GC_HeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MarchList_descriptor_, &GC_MarchList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_BATTLEINFOR_descriptor_, &CG_BATTLEINFOR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJINFOR_descriptor_, &GC_OBJINFOR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_BATTLEINFOR_descriptor_, &GC_BATTLEINFOR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJPOS_descriptor_, &GC_OBJPOS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJPOSLIST_descriptor_, &GC_OBJPOSLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_OBJPOSLIST_descriptor_, &CG_OBJPOSLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJCOMMANDPURSUE_descriptor_, &GC_OBJCOMMANDPURSUE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJPREPAREFORATTACK_descriptor_, &GC_OBJPREPAREFORATTACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OBJGETHURT_descriptor_, &GC_OBJGETHURT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_Building_LevelUp_descriptor_, &CG_Building_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_Building_LevelUp_descriptor_, &GC_Building_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_Update_March_descriptor_, &GC_Update_March::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMessage_2eproto() {
  delete CG_LOGIN::default_instance_;
  delete CG_LOGIN_reflection_;
  delete GC_LOGIN_RET::default_instance_;
  delete GC_LOGIN_RET_reflection_;
  delete CG_CONNECTED_HEARTBEAT::default_instance_;
  delete CG_CONNECTED_HEARTBEAT_reflection_;
  delete GC_CONNECTED_HEARTBEAT::default_instance_;
  delete GC_CONNECTED_HEARTBEAT_reflection_;
  delete CG_REQ_NEAR_LIST::default_instance_;
  delete CG_REQ_NEAR_LIST_reflection_;
  delete GC_NEAR_MARCHLIST::default_instance_;
  delete GC_NEAR_MARCHLIST_reflection_;
  delete CG_CHAT::default_instance_;
  delete CG_CHAT_reflection_;
  delete GC_CHAT::default_instance_;
  delete GC_CHAT_reflection_;
  delete GC_NOTICE::default_instance_;
  delete GC_NOTICE_reflection_;
  delete GC_UPDATE_SCENE_INSTACTIVATION::default_instance_;
  delete GC_UPDATE_SCENE_INSTACTIVATION_reflection_;
  delete CG_MOVE::default_instance_;
  delete CG_MOVE_reflection_;
  delete GC_MOVE::default_instance_;
  delete GC_MOVE_reflection_;
  delete GC_STOP::default_instance_;
  delete GC_STOP_reflection_;
  delete GC_TELEMOVE::default_instance_;
  delete GC_TELEMOVE_reflection_;
  delete CG_SKILL_USE::default_instance_;
  delete CG_SKILL_USE_reflection_;
  delete GC_RET_USE_SKILL::default_instance_;
  delete GC_RET_USE_SKILL_reflection_;
  delete GC_UPDATE_ANIMATION_STATE::default_instance_;
  delete GC_UPDATE_ANIMATION_STATE_reflection_;
  delete GC_DELETE_OBJ::default_instance_;
  delete GC_DELETE_OBJ_reflection_;
  delete GC_ATTACKFLY::default_instance_;
  delete GC_ATTACKFLY_reflection_;
  delete GC_FORCE_SETPOS::default_instance_;
  delete GC_FORCE_SETPOS_reflection_;
  delete GC_UPDATE_NEEDIMPACTINFO::default_instance_;
  delete GC_UPDATE_NEEDIMPACTINFO_reflection_;
  delete GC_PLAY_EFFECT::default_instance_;
  delete GC_PLAY_EFFECT_reflection_;
  delete GC_REMOVEEFFECT::default_instance_;
  delete GC_REMOVEEFFECT_reflection_;
  delete CG_FIGHT::default_instance_;
  delete CG_FIGHT_reflection_;
  delete GC_FIGHT::default_instance_;
  delete GC_FIGHT_reflection_;
  delete CG_LEAVE_COPYSCENE::default_instance_;
  delete CG_LEAVE_COPYSCENE_reflection_;
  delete CG_ROBOT_OPEN::default_instance_;
  delete CG_ROBOT_OPEN_reflection_;
  delete GC_ROBOT_OPEN::default_instance_;
  delete GC_ROBOT_OPEN_reflection_;
  delete CG_ASSIGN_HERO::default_instance_;
  delete CG_ASSIGN_HERO_reflection_;
  delete GC_ASSIGN_HERO::default_instance_;
  delete GC_ASSIGN_HERO_reflection_;
  delete CG_SEND_MARCH::default_instance_;
  delete CG_SEND_MARCH_reflection_;
  delete GC_SEND_MARCH::default_instance_;
  delete GC_SEND_MARCH_reflection_;
  delete CG_CREATEROLE::default_instance_;
  delete CG_CREATEROLE_reflection_;
  delete GC_CREATEROLE_RET::default_instance_;
  delete GC_CREATEROLE_RET_reflection_;
  delete GC_LOGIN_QUEUE_STATUS::default_instance_;
  delete GC_LOGIN_QUEUE_STATUS_reflection_;
  delete GC_RoleData::default_instance_;
  delete GC_RoleData_reflection_;
  delete GC_BuildingData::default_instance_;
  delete GC_BuildingData_reflection_;
  delete GC_CoolDownInfo::default_instance_;
  delete GC_CoolDownInfo_reflection_;
  delete GC_HeroData::default_instance_;
  delete GC_HeroData_reflection_;
  delete GC_TroopData::default_instance_;
  delete GC_TroopData_reflection_;
  delete GC_MarchData::default_instance_;
  delete GC_MarchData_reflection_;
  delete GC_TargetMarchData::default_instance_;
  delete GC_TargetMarchData_reflection_;
  delete GC_CityData::default_instance_;
  delete GC_CityData_reflection_;
  delete GC_HeroList::default_instance_;
  delete GC_HeroList_reflection_;
  delete GC_MarchList::default_instance_;
  delete GC_MarchList_reflection_;
  delete CG_BATTLEINFOR::default_instance_;
  delete CG_BATTLEINFOR_reflection_;
  delete GC_OBJINFOR::default_instance_;
  delete GC_OBJINFOR_reflection_;
  delete GC_BATTLEINFOR::default_instance_;
  delete GC_BATTLEINFOR_reflection_;
  delete GC_OBJPOS::default_instance_;
  delete GC_OBJPOS_reflection_;
  delete GC_OBJPOSLIST::default_instance_;
  delete GC_OBJPOSLIST_reflection_;
  delete CG_OBJPOSLIST::default_instance_;
  delete CG_OBJPOSLIST_reflection_;
  delete GC_OBJCOMMANDPURSUE::default_instance_;
  delete GC_OBJCOMMANDPURSUE_reflection_;
  delete GC_OBJPREPAREFORATTACK::default_instance_;
  delete GC_OBJPREPAREFORATTACK_reflection_;
  delete GC_OBJGETHURT::default_instance_;
  delete GC_OBJGETHURT_reflection_;
  delete CG_Building_LevelUp::default_instance_;
  delete CG_Building_LevelUp_reflection_;
  delete GC_Building_LevelUp::default_instance_;
  delete GC_Building_LevelUp_reflection_;
  delete GC_Update_March::default_instance_;
  delete GC_Update_March_reflection_;
}

void protobuf_AddDesc_PBMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBMessage.proto\"\332\002\n\010CG_LOGIN\022\r\n\005vtype\030"
    "\001 \001(\005\022\023\n\013gameversion\030\002 \001(\005\022\026\n\016programver"
    "sion\030\003 \001(\005\022\035\n\025publicresourceversion\030\004 \001("
    "\005\022\023\n\013maxpacketid\030\005 \001(\005\022\022\n\nforceenter\030\006 \001"
    "(\005\022\020\n\010deviceid\030\007 \001(\t\022\022\n\ndevicetype\030\010 \001(\t"
    "\022\025\n\rdeviceversion\030\t \001(\t\022\017\n\007account\030\n \002(\t"
    "\022\024\n\014validateinfo\030\013 \001(\t\022\021\n\tchannelid\030\014 \001("
    "\t\022\024\n\014mediachannel\030\r \001(\t\022\031\n\021rapidvalidate"
    "code\030\016 \001(\005\"\"\n\014VALIDATETYPE\022\010\n\004TEST\020\000\022\010\n\004"
    "CYOU\020\001\"\305\004\n\014GC_LOGIN_RET\022\016\n\006result\030\001 \002(\005\022"
    "\026\n\016validateresult\030\002 \002(\005\022\016\n\006userid\030\003 \002(\003\022"
    "\013\n\003oid\030\004 \002(\t\022\023\n\013accesstoken\030\005 \002(\t\022\032\n\004cit"
    "y\030\006 \002(\0132\014.GC_CityData\022\022\n\nplayername\030\007 \002("
    "\t\022\r\n\005level\030\010 \002(\005\022\036\n\010heroList\030\t \001(\0132\014.GC_"
    "HeroList\022 \n\tmarchlist\030\n \001(\0132\r.GC_MarchLi"
    "st\"\245\001\n\013LOGINRESULT\022\013\n\007SUCCESS\020\001\022\025\n\021ACCOU"
    "NTVERIFYFAIL\020\002\022\024\n\020READROLELISTFAIL\020\003\022\020\n\014"
    "ALREADYLOGIN\020\004\022\r\n\tQUEUEFULL\020\005\022\022\n\016NEEDFOR"
    "CEENTER\020\006\022\022\n\016PACKETNOTMATCH\020\007\022\023\n\017VERSION"
    "NOTMATCH\020\010\"\261\001\n\016VALIDATERESULT\022\006\n\002OK\020\000\022\032\n"
    "\026FAIL_VALIDATETYPEERROR\020\001\022\020\n\014FAIL_PERFOR"
    "M\020\002\022\017\n\013FAIL_OPCODE\020\003\022\014\n\010FAIL_TAG\020\004\022\016\n\nFA"
    "IL_STATE\020\005\022\024\n\020FAIL_DATA_STATUS\020\006\022\022\n\016FAIL"
    "_CHANNELID\020\007\022\020\n\014FAIL_BLOCKED\020\010\",\n\026CG_CON"
    "NECTED_HEARTBEAT\022\022\n\nisresponse\030\001 \002(\005\"0\n\026"
    "GC_CONNECTED_HEARTBEAT\022\026\n\016serveransitime"
    "\030\001 \002(\005\"4\n\020CG_REQ_NEAR_LIST\022\017\n\007marchId\030\001 "
    "\002(\005\022\017\n\007sceneId\030\002 \002(\005\"s\n\021GC_NEAR_MARCHLIS"
    "T\022\014\n\004Guid\030\001 \003(\004\022\014\n\004Name\030\002 \003(\t\022\r\n\005Level\030\003"
    " \003(\005\022\021\n\tCombatNum\030\004 \003(\005\022\017\n\007marchId\030\005 \002(\005"
    "\022\017\n\007sceneId\030\006 \002(\005\"\206\002\n\007CG_CHAT\022\020\n\010chattyp"
    "e\030\001 \002(\005\022\020\n\010chatinfo\030\002 \002(\t\022\024\n\014receivergui"
    "d\030\003 \001(\004\022\024\n\014receivername\030\004 \001(\t\022\025\n\rreceive"
    "rlevel\030\005 \001(\005\"\223\001\n\010CHATTYPE\022\025\n\021CHAT_TYPE_I"
    "NVALID\020\000\022\024\n\020CHAT_TYPE_NORMAL\020\001\022\023\n\017CHAT_T"
    "YPE_WORLD\020\002\022\024\n\020CHAT_TYPE_SYSTEM\020\003\022\031\n\025CHA"
    "T_TYPE_LOUDSPEAKER\020\004\022\024\n\020CHAT_TYPE_FRIEND"
    "\020\005\"\254\002\n\007GC_CHAT\022\020\n\010chattype\030\001 \002(\005\022\020\n\010chat"
    "info\030\002 \002(\t\022\022\n\nsenderguid\030\003 \001(\004\022\022\n\nsender"
    "name\030\004 \001(\t\022\023\n\013senderlevel\030\005 \001(\005\022\024\n\014recei"
    "verguid\030\006 \001(\004\022\024\n\014receivername\030\007 \001(\t\"\223\001\n\010"
    "CHATTYPE\022\025\n\021CHAT_TYPE_INVALID\020\000\022\024\n\020CHAT_"
    "TYPE_NORMAL\020\001\022\023\n\017CHAT_TYPE_WORLD\020\002\022\024\n\020CH"
    "AT_TYPE_SYSTEM\020\003\022\031\n\025CHAT_TYPE_LOUDSPEAKE"
    "R\020\004\022\024\n\020CHAT_TYPE_FRIEND\020\005\"1\n\tGC_NOTICE\022\016"
    "\n\006notice\030\001 \002(\t\022\024\n\014filterRepeat\030\002 \001(\005\"g\n\036"
    "GC_UPDATE_SCENE_INSTACTIVATION\022\024\n\014scenec"
    "lassid\030\001 \002(\005\022\026\n\016sceneinstcount\030\002 \002(\005\022\027\n\017"
    "sceneactivation\030\003 \003(\005\"i\n\007CG_MOVE\022\020\n\010posc"
    "ount\030\001 \002(\005\022\014\n\004posx\030\002 \003(\005\022\014\n\004posz\030\003 \003(\005\022\020"
    "\n\010ismoving\030\004 \002(\005\022\r\n\005objid\030\005 \002(\005\022\017\n\007scene"
    "Id\030\006 \002(\005\"j\n\007GC_MOVE\022\r\n\005objid\030\001 \002(\005\022\020\n\010po"
    "scount\030\002 \002(\005\022\021\n\tposserial\030\003 \003(\005\022\014\n\004posx\030"
    "\004 \003(\005\022\014\n\004posz\030\005 \003(\005\022\017\n\007sceneId\030\006 \002(\005\"X\n\007"
    "GC_STOP\022\r\n\005objid\030\001 \002(\005\022\021\n\tposserial\030\002 \002("
    "\005\022\014\n\004posx\030\003 \002(\005\022\014\n\004posz\030\004 \002(\005\022\017\n\007sceneId"
    "\030\005 \002(\005\"\200\001\n\013GC_TELEMOVE\022\r\n\005objId\030\001 \002(\005\022\022\n"
    "\ntargetPosX\030\002 \002(\005\022\022\n\ntargetPosZ\030\003 \002(\005\022\030\n"
    "\020needChangeFaceto\030\004 \002(\005\022\017\n\007animaId\030\005 \001(\005"
    "\022\017\n\007sceneId\030\006 \002(\005\"T\n\014CG_SKILL_USE\022\020\n\010sen"
    "derId\030\001 \002(\005\022\017\n\007skillId\030\002 \002(\005\022\020\n\010targetId"
    "\030\003 \002(\005\022\017\n\007sceneId\030\004 \002(\005\"\202\001\n\020GC_RET_USE_S"
    "KILL\022\017\n\007skillId\030\001 \002(\005\022\020\n\010senderId\030\002 \002(\005\022"
    "\020\n\010TargetId\030\003 \002(\005\022\025\n\rskillfailType\030\004 \001(\005"
    "\022\021\n\tskillname\030\005 \001(\t\022\017\n\007sceneId\030\006 \002(\005\"\334\001\n"
    "\031GC_UPDATE_ANIMATION_STATE\022\r\n\005objId\030\001 \002("
    "\005\022\026\n\016AnimationState\030\002 \002(\005\022\026\n\016verticalOff"
    "Dis\030\003 \001(\005\022\030\n\020horizontalOffDis\030\004 \001(\005\022\025\n\rs"
    "tateLastTime\030\005 \001(\005\022\027\n\017stateResortTime\030\006 "
    "\001(\005\022\020\n\010hitTimes\030\007 \001(\005\022\023\n\013hitInterval\030\010 \001"
    "(\005\022\017\n\007sceneId\030\t \002(\005\"@\n\rGC_DELETE_OBJ\022\r\n\005"
    "objId\030\001 \002(\005\022\017\n\007sceneId\030\002 \002(\005\022\017\n\007marchId\030"
    "\003 \002(\005\"[\n\014GC_ATTACKFLY\022\r\n\005objId\030\001 \002(\005\022\013\n\003"
    "Dis\030\002 \002(\005\022\r\n\005Hight\030\003 \002(\005\022\017\n\007FlyTime\030\004 \002("
    "\005\022\017\n\007sceneId\030\005 \002(\005\"M\n\017GC_FORCE_SETPOS\022\r\n"
    "\005objID\030\001 \002(\005\022\014\n\004PosX\030\002 \002(\005\022\014\n\004PosZ\030\003 \002(\005"
    "\022\017\n\007sceneId\030\004 \002(\005\"\231\001\n\030GC_UPDATE_NEEDIMPA"
    "CTINFO\022\r\n\005objId\030\001 \002(\005\022\020\n\010impactId\030\002 \003(\005\022"
    "\025\n\rimpactLogicId\030\003 \003(\005\022\021\n\tisForever\030\004 \003("
    "\005\022\022\n\nremainTime\030\005 \003(\005\022\r\n\005isAdd\030\006 \003(\005\022\017\n\007"
    "sceneId\030\007 \002(\005\"B\n\016GC_PLAY_EFFECT\022\r\n\005ObjID"
    "\030\001 \002(\005\022\020\n\010EffectID\030\002 \002(\005\022\017\n\007sceneId\030\005 \002("
    "\005\"C\n\017GC_REMOVEEFFECT\022\r\n\005objId\030\001 \002(\005\022\020\n\010e"
    "ffectId\030\002 \002(\005\022\017\n\007sceneId\030\003 \002(\005\"N\n\010CG_FIG"
    "HT\022\014\n\004Type\030\001 \002(\005\022\020\n\010AttackId\030\002 \002(\003\022\021\n\tDe"
    "fenceId\030\003 \001(\003\022\017\n\007sceneId\030\004 \002(\005\"9\n\010GC_FIG"
    "HT\022\013\n\003ret\030\001 \002(\005\022\017\n\007marchId\030\002 \001(\003\022\017\n\007scen"
    "eId\030\003 \001(\005\"4\n\022CG_LEAVE_COPYSCENE\022\r\n\005objId"
    "\030\001 \002(\005\022\017\n\007sceneId\030\002 \002(\005\".\n\rCG_ROBOT_OPEN"
    "\022\017\n\007sceneId\030\001 \002(\005\022\014\n\004open\030\002 \002(\005\"-\n\rGC_RO"
    "BOT_OPEN\022\017\n\007sceneId\030\001 \002(\005\022\013\n\003ret\030\002 \002(\005\"1"
    "\n\016CG_ASSIGN_HERO\022\017\n\007marchid\030\001 \002(\003\022\016\n\006her"
    "oid\030\002 \002(\003\">\n\016GC_ASSIGN_HERO\022\017\n\007marchid\030\001"
    " \002(\003\022\016\n\006heroId\030\002 \002(\003\022\013\n\003ret\030\003 \002(\005\" \n\rCG_"
    "SEND_MARCH\022\017\n\007marchid\030\001 \002(\003\"-\n\rGC_SEND_M"
    "ARCH\022\017\n\007marchId\030\001 \002(\003\022\013\n\003ret\030\002 \002(\005\"-\n\rCG"
    "_CREATEROLE\022\016\n\006gender\030\001 \002(\005\022\014\n\004name\030\002 \002("
    "\t\"\356\001\n\021GC_CREATEROLE_RET\022\016\n\006result\030\001 \002(\005\022"
    "\022\n\nplayerGuid\030\002 \002(\004\022\022\n\nplayerName\030\003 \002(\t\""
    "\240\001\n\021CREATEROLE_RESULT\022\026\n\022CREATEROLE_SUCC"
    "ESS\020\000\022\023\n\017CREATEROLE_FAIL\020\001\022\035\n\031CREATEROLE"
    "_FAIL_NAMEEXIST\020\002\022!\n\035CREATEROLE_FAIL_NAM"
    "ESCREENING\020\003\022\034\n\030CREATEROLE_FAIL_LONGNAME"
    "\020\004\"p\n\025GC_LOGIN_QUEUE_STATUS\022\016\n\006status\030\001 "
    "\002(\005\022\r\n\005index\030\002 \002(\005\"8\n\013QUEUESTATUS\022\016\n\nBEG"
    "INQUEUE\020\000\022\013\n\007QUEUING\020\001\022\014\n\010ENDQUEUE\020\002\"<\n\013"
    "GC_RoleData\022\014\n\004guid\030\001 \002(\003\022\n\n\002hp\030\002 \001(\005\022\023\n"
    "\013accountName\030\003 \002(\t\"J\n\017GC_BuildingData\022\014\n"
    "\004guid\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\014\n\004slot\030\003 \002(\005\022"
    "\r\n\005level\030\004 \002(\005\">\n\017GC_CoolDownInfo\022\n\n\002id\030"
    "\001 \002(\003\022\016\n\006cdtime\030\002 \002(\005\022\017\n\007elapsed\030\003 \002(\005\"\271"
    "\001\n\013GC_HeroData\022\014\n\004guid\030\001 \002(\003\022\014\n\004type\030\002 \002"
    "(\005\022\r\n\005level\030\003 \002(\005\022\r\n\005state\030\004 \002(\005\022\n\n\002hp\030\005"
    " \002(\005\022\n\n\002mp\030\006 \002(\005\022\r\n\005skill\030\007 \003(\005\022\"\n\010coold"
    "own\030\010 \003(\0132\020.GC_CoolDownInfo\022\024\n\014arrangein"
    "dex\030\t \002(\005\022\017\n\007marchId\030\n \002(\003\"\235\001\n\014GC_TroopD"
    "ata\022\014\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\n\n\002hp\030\003"
    " \002(\005\022\n\n\002mp\030\004 \002(\005\022\r\n\005skill\030\005 \003(\005\022\"\n\010coold"
    "own\030\006 \003(\0132\020.GC_CoolDownInfo\022\024\n\014arrangein"
    "dex\030\007 \002(\005\022\017\n\007marchid\030\010 \002(\003\"\340\001\n\014GC_MarchD"
    "ata\022\017\n\007marchid\030\001 \002(\003\022\021\n\tbegintime\030\002 \002(\005\022"
    "\020\n\010playerid\030\003 \002(\003\022\016\n\006cityId\030\004 \002(\003\022\016\n\006sta"
    "tus\030\005 \002(\005\022\r\n\005speed\030\006 \002(\005\022\017\n\007fightid\030\007 \001("
    "\003\022\017\n\007buildid\030\010 \001(\003\022\032\n\004hero\030\t \002(\0132\014.GC_He"
    "roData\022\034\n\005troop\030\n \003(\0132\r.GC_TroopData\022\017\n\007"
    "sceneid\030\013 \001(\005\"%\n\022GC_TargetMarchData\022\017\n\007m"
    "archid\030\001 \002(\003\"\256\001\n\013GC_CityData\022\016\n\006tileId\030\001"
    " \002(\005\022\016\n\006cityId\030\002 \002(\003\022\r\n\005level\030\003 \002(\005\022\014\n\004f"
    "ood\030\004 \002(\003\022\r\n\005stone\030\005 \002(\003\022\014\n\004iron\030\006 \002(\003\022#"
    "\n\tbuildlist\030\007 \003(\0132\020.GC_BuildingData\022 \n\tt"
    "rooplist\030\010 \003(\0132\r.GC_TroopData\"-\n\013GC_Hero"
    "List\022\036\n\010heroList\030\001 \003(\0132\014.GC_HeroData\"0\n\014"
    "GC_MarchList\022 \n\tmarchlist\030\001 \003(\0132\r.GC_Mar"
    "chData\"!\n\016CG_BATTLEINFOR\022\017\n\007sceneId\030\001 \002("
    "\005\"\354\001\n\013GC_OBJINFOR\022\n\n\002id\030\001 \002(\005\022\022\n\nunitDat"
    "aId\030\002 \002(\005\022\023\n\013skilldataid\030\003 \003(\005\022\014\n\004camp\030\004"
    " \002(\005\022\021\n\tunitcount\030\005 \002(\005\022\n\n\002hp\030\006 \002(\005\022\r\n\005m"
    "axhp\030\007 \002(\005\022\016\n\006attack\030\010 \002(\005\022\017\n\007defence\030\t "
    "\002(\005\022\n\n\002sp\030\n \002(\005\022\r\n\005level\030\013 \002(\005\022\014\n\004posx\030\014"
    " \002(\005\022\014\n\004posz\030\r \002(\005\022\024\n\014arrangeindex\030\016 \002(\005"
    "\"@\n\016GC_BATTLEINFOR\022\017\n\007sceneId\030\001 \002(\005\022\035\n\007o"
    "bjList\030\002 \003(\0132\014.GC_OBJINFOR\"f\n\tGC_OBJPOS\022"
    "\r\n\005objId\030\001 \002(\005\022\014\n\004posX\030\002 \002(\005\022\014\n\004posZ\030\003 \002"
    "(\005\022\n\n\002hp\030\004 \002(\005\022\020\n\010targetId\030\005 \002(\005\022\020\n\010objS"
    "tate\030\006 \002(\005\"@\n\rGC_OBJPOSLIST\022\017\n\007sceneId\030\001"
    " \002(\005\022\036\n\nobjPosList\030\002 \003(\0132\n.GC_OBJPOS\" \n\r"
    "CG_OBJPOSLIST\022\017\n\007sceneId\030\001 \002(\005\"G\n\023GC_OBJ"
    "COMMANDPURSUE\022\017\n\007sceneId\030\001 \002(\005\022\r\n\005objId\030"
    "\002 \002(\005\022\020\n\010aimObjId\030\003 \002(\005\"J\n\026GC_OBJPREPARE"
    "FORATTACK\022\017\n\007sceneId\030\001 \002(\005\022\r\n\005objId\030\002 \002("
    "\005\022\020\n\010aimObjId\030\003 \002(\005\"z\n\rGC_OBJGETHURT\022\017\n\007"
    "sceneId\030\001 \002(\005\022\r\n\005objId\030\002 \002(\005\022\023\n\013attackOb"
    "jId\030\003 \002(\005\022\016\n\006damage\030\004 \002(\005\022\017\n\007objDead\030\005 \002"
    "(\005\022\023\n\013deathNumber\030\006 \002(\005\")\n\023CG_Building_L"
    "evelUp\022\022\n\nbuildingID\030\001 \002(\003\"E\n\023GC_Buildin"
    "g_LevelUp\022\022\n\nbuildingID\030\001 \002(\003\022\r\n\005level\030\002"
    " \002(\005\022\013\n\003ret\030\003 \002(\005\".\n\017GC_Update_March\022\033\n\004"
    "data\030\001 \002(\0132\r.GC_MarchData", 6305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMessage.proto", &protobuf_RegisterTypes);
  CG_LOGIN::default_instance_ = new CG_LOGIN();
  GC_LOGIN_RET::default_instance_ = new GC_LOGIN_RET();
  CG_CONNECTED_HEARTBEAT::default_instance_ = new CG_CONNECTED_HEARTBEAT();
  GC_CONNECTED_HEARTBEAT::default_instance_ = new GC_CONNECTED_HEARTBEAT();
  CG_REQ_NEAR_LIST::default_instance_ = new CG_REQ_NEAR_LIST();
  GC_NEAR_MARCHLIST::default_instance_ = new GC_NEAR_MARCHLIST();
  CG_CHAT::default_instance_ = new CG_CHAT();
  GC_CHAT::default_instance_ = new GC_CHAT();
  GC_NOTICE::default_instance_ = new GC_NOTICE();
  GC_UPDATE_SCENE_INSTACTIVATION::default_instance_ = new GC_UPDATE_SCENE_INSTACTIVATION();
  CG_MOVE::default_instance_ = new CG_MOVE();
  GC_MOVE::default_instance_ = new GC_MOVE();
  GC_STOP::default_instance_ = new GC_STOP();
  GC_TELEMOVE::default_instance_ = new GC_TELEMOVE();
  CG_SKILL_USE::default_instance_ = new CG_SKILL_USE();
  GC_RET_USE_SKILL::default_instance_ = new GC_RET_USE_SKILL();
  GC_UPDATE_ANIMATION_STATE::default_instance_ = new GC_UPDATE_ANIMATION_STATE();
  GC_DELETE_OBJ::default_instance_ = new GC_DELETE_OBJ();
  GC_ATTACKFLY::default_instance_ = new GC_ATTACKFLY();
  GC_FORCE_SETPOS::default_instance_ = new GC_FORCE_SETPOS();
  GC_UPDATE_NEEDIMPACTINFO::default_instance_ = new GC_UPDATE_NEEDIMPACTINFO();
  GC_PLAY_EFFECT::default_instance_ = new GC_PLAY_EFFECT();
  GC_REMOVEEFFECT::default_instance_ = new GC_REMOVEEFFECT();
  CG_FIGHT::default_instance_ = new CG_FIGHT();
  GC_FIGHT::default_instance_ = new GC_FIGHT();
  CG_LEAVE_COPYSCENE::default_instance_ = new CG_LEAVE_COPYSCENE();
  CG_ROBOT_OPEN::default_instance_ = new CG_ROBOT_OPEN();
  GC_ROBOT_OPEN::default_instance_ = new GC_ROBOT_OPEN();
  CG_ASSIGN_HERO::default_instance_ = new CG_ASSIGN_HERO();
  GC_ASSIGN_HERO::default_instance_ = new GC_ASSIGN_HERO();
  CG_SEND_MARCH::default_instance_ = new CG_SEND_MARCH();
  GC_SEND_MARCH::default_instance_ = new GC_SEND_MARCH();
  CG_CREATEROLE::default_instance_ = new CG_CREATEROLE();
  GC_CREATEROLE_RET::default_instance_ = new GC_CREATEROLE_RET();
  GC_LOGIN_QUEUE_STATUS::default_instance_ = new GC_LOGIN_QUEUE_STATUS();
  GC_RoleData::default_instance_ = new GC_RoleData();
  GC_BuildingData::default_instance_ = new GC_BuildingData();
  GC_CoolDownInfo::default_instance_ = new GC_CoolDownInfo();
  GC_HeroData::default_instance_ = new GC_HeroData();
  GC_TroopData::default_instance_ = new GC_TroopData();
  GC_MarchData::default_instance_ = new GC_MarchData();
  GC_TargetMarchData::default_instance_ = new GC_TargetMarchData();
  GC_CityData::default_instance_ = new GC_CityData();
  GC_HeroList::default_instance_ = new GC_HeroList();
  GC_MarchList::default_instance_ = new GC_MarchList();
  CG_BATTLEINFOR::default_instance_ = new CG_BATTLEINFOR();
  GC_OBJINFOR::default_instance_ = new GC_OBJINFOR();
  GC_BATTLEINFOR::default_instance_ = new GC_BATTLEINFOR();
  GC_OBJPOS::default_instance_ = new GC_OBJPOS();
  GC_OBJPOSLIST::default_instance_ = new GC_OBJPOSLIST();
  CG_OBJPOSLIST::default_instance_ = new CG_OBJPOSLIST();
  GC_OBJCOMMANDPURSUE::default_instance_ = new GC_OBJCOMMANDPURSUE();
  GC_OBJPREPAREFORATTACK::default_instance_ = new GC_OBJPREPAREFORATTACK();
  GC_OBJGETHURT::default_instance_ = new GC_OBJGETHURT();
  CG_Building_LevelUp::default_instance_ = new CG_Building_LevelUp();
  GC_Building_LevelUp::default_instance_ = new GC_Building_LevelUp();
  GC_Update_March::default_instance_ = new GC_Update_March();
  CG_LOGIN::default_instance_->InitAsDefaultInstance();
  GC_LOGIN_RET::default_instance_->InitAsDefaultInstance();
  CG_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  GC_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  CG_REQ_NEAR_LIST::default_instance_->InitAsDefaultInstance();
  GC_NEAR_MARCHLIST::default_instance_->InitAsDefaultInstance();
  CG_CHAT::default_instance_->InitAsDefaultInstance();
  GC_CHAT::default_instance_->InitAsDefaultInstance();
  GC_NOTICE::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_SCENE_INSTACTIVATION::default_instance_->InitAsDefaultInstance();
  CG_MOVE::default_instance_->InitAsDefaultInstance();
  GC_MOVE::default_instance_->InitAsDefaultInstance();
  GC_STOP::default_instance_->InitAsDefaultInstance();
  GC_TELEMOVE::default_instance_->InitAsDefaultInstance();
  CG_SKILL_USE::default_instance_->InitAsDefaultInstance();
  GC_RET_USE_SKILL::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_ANIMATION_STATE::default_instance_->InitAsDefaultInstance();
  GC_DELETE_OBJ::default_instance_->InitAsDefaultInstance();
  GC_ATTACKFLY::default_instance_->InitAsDefaultInstance();
  GC_FORCE_SETPOS::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_NEEDIMPACTINFO::default_instance_->InitAsDefaultInstance();
  GC_PLAY_EFFECT::default_instance_->InitAsDefaultInstance();
  GC_REMOVEEFFECT::default_instance_->InitAsDefaultInstance();
  CG_FIGHT::default_instance_->InitAsDefaultInstance();
  GC_FIGHT::default_instance_->InitAsDefaultInstance();
  CG_LEAVE_COPYSCENE::default_instance_->InitAsDefaultInstance();
  CG_ROBOT_OPEN::default_instance_->InitAsDefaultInstance();
  GC_ROBOT_OPEN::default_instance_->InitAsDefaultInstance();
  CG_ASSIGN_HERO::default_instance_->InitAsDefaultInstance();
  GC_ASSIGN_HERO::default_instance_->InitAsDefaultInstance();
  CG_SEND_MARCH::default_instance_->InitAsDefaultInstance();
  GC_SEND_MARCH::default_instance_->InitAsDefaultInstance();
  CG_CREATEROLE::default_instance_->InitAsDefaultInstance();
  GC_CREATEROLE_RET::default_instance_->InitAsDefaultInstance();
  GC_LOGIN_QUEUE_STATUS::default_instance_->InitAsDefaultInstance();
  GC_RoleData::default_instance_->InitAsDefaultInstance();
  GC_BuildingData::default_instance_->InitAsDefaultInstance();
  GC_CoolDownInfo::default_instance_->InitAsDefaultInstance();
  GC_HeroData::default_instance_->InitAsDefaultInstance();
  GC_TroopData::default_instance_->InitAsDefaultInstance();
  GC_MarchData::default_instance_->InitAsDefaultInstance();
  GC_TargetMarchData::default_instance_->InitAsDefaultInstance();
  GC_CityData::default_instance_->InitAsDefaultInstance();
  GC_HeroList::default_instance_->InitAsDefaultInstance();
  GC_MarchList::default_instance_->InitAsDefaultInstance();
  CG_BATTLEINFOR::default_instance_->InitAsDefaultInstance();
  GC_OBJINFOR::default_instance_->InitAsDefaultInstance();
  GC_BATTLEINFOR::default_instance_->InitAsDefaultInstance();
  GC_OBJPOS::default_instance_->InitAsDefaultInstance();
  GC_OBJPOSLIST::default_instance_->InitAsDefaultInstance();
  CG_OBJPOSLIST::default_instance_->InitAsDefaultInstance();
  GC_OBJCOMMANDPURSUE::default_instance_->InitAsDefaultInstance();
  GC_OBJPREPAREFORATTACK::default_instance_->InitAsDefaultInstance();
  GC_OBJGETHURT::default_instance_->InitAsDefaultInstance();
  CG_Building_LevelUp::default_instance_->InitAsDefaultInstance();
  GC_Building_LevelUp::default_instance_->InitAsDefaultInstance();
  GC_Update_March::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMessage_2eproto {
  StaticDescriptorInitializer_PBMessage_2eproto() {
    protobuf_AddDesc_PBMessage_2eproto();
  }
} static_descriptor_initializer_PBMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_VALIDATETYPE_descriptor_;
}
bool CG_LOGIN_VALIDATETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_LOGIN_VALIDATETYPE CG_LOGIN::TEST;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::CYOU;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MIN;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MAX;
const int CG_LOGIN::VALIDATETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_LOGIN::kVtypeFieldNumber;
const int CG_LOGIN::kGameversionFieldNumber;
const int CG_LOGIN::kProgramversionFieldNumber;
const int CG_LOGIN::kPublicresourceversionFieldNumber;
const int CG_LOGIN::kMaxpacketidFieldNumber;
const int CG_LOGIN::kForceenterFieldNumber;
const int CG_LOGIN::kDeviceidFieldNumber;
const int CG_LOGIN::kDevicetypeFieldNumber;
const int CG_LOGIN::kDeviceversionFieldNumber;
const int CG_LOGIN::kAccountFieldNumber;
const int CG_LOGIN::kValidateinfoFieldNumber;
const int CG_LOGIN::kChannelidFieldNumber;
const int CG_LOGIN::kMediachannelFieldNumber;
const int CG_LOGIN::kRapidvalidatecodeFieldNumber;
#endif  // !_MSC_VER

CG_LOGIN::CG_LOGIN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_LOGIN::InitAsDefaultInstance() {
}

CG_LOGIN::CG_LOGIN(const CG_LOGIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_LOGIN::SharedCtor() {
  _cached_size_ = 0;
  vtype_ = 0;
  gameversion_ = 0;
  programversion_ = 0;
  publicresourceversion_ = 0;
  maxpacketid_ = 0;
  forceenter_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  validateinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mediachannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rapidvalidatecode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LOGIN::~CG_LOGIN() {
  SharedDtor();
}

void CG_LOGIN::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceversion_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete validateinfo_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
    delete mediachannel_;
  }
  if (this != default_instance_) {
  }
}

void CG_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_descriptor_;
}

const CG_LOGIN& CG_LOGIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_LOGIN* CG_LOGIN::default_instance_ = NULL;

CG_LOGIN* CG_LOGIN::New() const {
  return new CG_LOGIN;
}

void CG_LOGIN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vtype_ = 0;
    gameversion_ = 0;
    programversion_ = 0;
    publicresourceversion_ = 0;
    maxpacketid_ = 0;
    forceenter_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deviceversion()) {
      if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
        deviceversion_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_validateinfo()) {
      if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
        validateinfo_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_mediachannel()) {
      if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
        mediachannel_->clear();
      }
    }
    rapidvalidatecode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameversion;
        break;
      }

      // optional int32 gameversion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_programversion;
        break;
      }

      // optional int32 programversion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_programversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &programversion_)));
          set_has_programversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_publicresourceversion;
        break;
      }

      // optional int32 publicresourceversion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publicresourceversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicresourceversion_)));
          set_has_publicresourceversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxpacketid;
        break;
      }

      // optional int32 maxpacketid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpacketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpacketid_)));
          set_has_maxpacketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forceenter;
        break;
      }

      // optional int32 forceenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forceenter_)));
          set_has_forceenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceid;
        break;
      }

      // optional string deviceid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_devicetype;
        break;
      }

      // optional string devicetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_deviceversion;
        break;
      }

      // optional string deviceversion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceversion().data(), this->deviceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_account;
        break;
      }

      // required string account = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_validateinfo;
        break;
      }

      // optional string validateinfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validateinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validateinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validateinfo().data(), this->validateinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_channelid;
        break;
      }

      // optional string channelid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mediachannel;
        break;
      }

      // optional string mediachannel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediachannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediachannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediachannel().data(), this->mediachannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rapidvalidatecode;
        break;
      }

      // optional int32 rapidvalidatecode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rapidvalidatecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapidvalidatecode_)));
          set_has_rapidvalidatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vtype(), output);
  }

  // optional int32 gameversion = 2;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameversion(), output);
  }

  // optional int32 programversion = 3;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->programversion(), output);
  }

  // optional int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->publicresourceversion(), output);
  }

  // optional int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpacketid(), output);
  }

  // optional int32 forceenter = 6;
  if (has_forceenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forceenter(), output);
  }

  // optional string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceid(), output);
  }

  // optional string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->devicetype(), output);
  }

  // optional string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->deviceversion(), output);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->account(), output);
  }

  // optional string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->validateinfo(), output);
  }

  // optional string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->channelid(), output);
  }

  // optional string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->mediachannel(), output);
  }

  // optional int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rapidvalidatecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_LOGIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vtype(), target);
  }

  // optional int32 gameversion = 2;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameversion(), target);
  }

  // optional int32 programversion = 3;
  if (has_programversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->programversion(), target);
  }

  // optional int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->publicresourceversion(), target);
  }

  // optional int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpacketid(), target);
  }

  // optional int32 forceenter = 6;
  if (has_forceenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->forceenter(), target);
  }

  // optional string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // optional string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicetype(), target);
  }

  // optional string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceversion(), target);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account(), target);
  }

  // optional string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->validateinfo(), target);
  }

  // optional string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->channelid(), target);
  }

  // optional string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->mediachannel(), target);
  }

  // optional int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rapidvalidatecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtype());
    }

    // optional int32 gameversion = 2;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversion());
    }

    // optional int32 programversion = 3;
    if (has_programversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->programversion());
    }

    // optional int32 publicresourceversion = 4;
    if (has_publicresourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicresourceversion());
    }

    // optional int32 maxpacketid = 5;
    if (has_maxpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpacketid());
    }

    // optional int32 forceenter = 6;
    if (has_forceenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forceenter());
    }

    // optional string deviceid = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string devicetype = 8;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string deviceversion = 9;
    if (has_deviceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceversion());
    }

    // required string account = 10;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string validateinfo = 11;
    if (has_validateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validateinfo());
    }

    // optional string channelid = 12;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string mediachannel = 13;
    if (has_mediachannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediachannel());
    }

    // optional int32 rapidvalidatecode = 14;
    if (has_rapidvalidatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rapidvalidatecode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_LOGIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_LOGIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_LOGIN::MergeFrom(const CG_LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_programversion()) {
      set_programversion(from.programversion());
    }
    if (from.has_publicresourceversion()) {
      set_publicresourceversion(from.publicresourceversion());
    }
    if (from.has_maxpacketid()) {
      set_maxpacketid(from.maxpacketid());
    }
    if (from.has_forceenter()) {
      set_forceenter(from.forceenter());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deviceversion()) {
      set_deviceversion(from.deviceversion());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_validateinfo()) {
      set_validateinfo(from.validateinfo());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_mediachannel()) {
      set_mediachannel(from.mediachannel());
    }
    if (from.has_rapidvalidatecode()) {
      set_rapidvalidatecode(from.rapidvalidatecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_LOGIN::CopyFrom(const CG_LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LOGIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000200) != 0x00000200) return false;

  return true;
}

void CG_LOGIN::Swap(CG_LOGIN* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(programversion_, other->programversion_);
    std::swap(publicresourceversion_, other->publicresourceversion_);
    std::swap(maxpacketid_, other->maxpacketid_);
    std::swap(forceenter_, other->forceenter_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceversion_, other->deviceversion_);
    std::swap(account_, other->account_);
    std::swap(validateinfo_, other->validateinfo_);
    std::swap(channelid_, other->channelid_);
    std::swap(mediachannel_, other->mediachannel_);
    std::swap(rapidvalidatecode_, other->rapidvalidatecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_LOGIN_descriptor_;
  metadata.reflection = CG_LOGIN_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_LOGINRESULT_descriptor_;
}
bool GC_LOGIN_RET_LOGINRESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::SUCCESS;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ACCOUNTVERIFYFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::READROLELISTFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ALREADYLOGIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::QUEUEFULL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::NEEDFORCEENTER;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::PACKETNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::VERSIONNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MAX;
const int GC_LOGIN_RET::LOGINRESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_VALIDATERESULT_descriptor_;
}
bool GC_LOGIN_RET_VALIDATERESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::OK;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_VALIDATETYPEERROR;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_PERFORM;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_OPCODE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_TAG;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_STATE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_DATA_STATUS;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_CHANNELID;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_BLOCKED;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MIN;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MAX;
const int GC_LOGIN_RET::VALIDATERESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_LOGIN_RET::kResultFieldNumber;
const int GC_LOGIN_RET::kValidateresultFieldNumber;
const int GC_LOGIN_RET::kUseridFieldNumber;
const int GC_LOGIN_RET::kOidFieldNumber;
const int GC_LOGIN_RET::kAccesstokenFieldNumber;
const int GC_LOGIN_RET::kCityFieldNumber;
const int GC_LOGIN_RET::kPlayernameFieldNumber;
const int GC_LOGIN_RET::kLevelFieldNumber;
const int GC_LOGIN_RET::kHeroListFieldNumber;
const int GC_LOGIN_RET::kMarchlistFieldNumber;
#endif  // !_MSC_VER

GC_LOGIN_RET::GC_LOGIN_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_LOGIN_RET::InitAsDefaultInstance() {
  city_ = const_cast< ::GC_CityData*>(&::GC_CityData::default_instance());
  herolist_ = const_cast< ::GC_HeroList*>(&::GC_HeroList::default_instance());
  marchlist_ = const_cast< ::GC_MarchList*>(&::GC_MarchList::default_instance());
}

GC_LOGIN_RET::GC_LOGIN_RET(const GC_LOGIN_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_LOGIN_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  validateresult_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = NULL;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  herolist_ = NULL;
  marchlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_LOGIN_RET::~GC_LOGIN_RET() {
  SharedDtor();
}

void GC_LOGIN_RET::SharedDtor() {
  if (oid_ != &::google::protobuf::internal::kEmptyString) {
    delete oid_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete city_;
    delete herolist_;
    delete marchlist_;
  }
}

void GC_LOGIN_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_LOGIN_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_descriptor_;
}

const GC_LOGIN_RET& GC_LOGIN_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_LOGIN_RET* GC_LOGIN_RET::default_instance_ = NULL;

GC_LOGIN_RET* GC_LOGIN_RET::New() const {
  return new GC_LOGIN_RET;
}

void GC_LOGIN_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    validateresult_ = 0;
    userid_ = GOOGLE_LONGLONG(0);
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::kEmptyString) {
        oid_->clear();
      }
    }
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
    if (has_city()) {
      if (city_ != NULL) city_->::GC_CityData::Clear();
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_herolist()) {
      if (herolist_ != NULL) herolist_->::GC_HeroList::Clear();
    }
    if (has_marchlist()) {
      if (marchlist_ != NULL) marchlist_->::GC_MarchList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_LOGIN_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validateresult;
        break;
      }

      // required int32 validateresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validateresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validateresult_)));
          set_has_validateresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int64 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oid;
        break;
      }

      // required string oid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oid().data(), this->oid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accesstoken;
        break;
      }

      // required string accesstoken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accesstoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // required .GC_CityData city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playername;
        break;
      }

      // required string playername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_heroList;
        break;
      }

      // optional .GC_HeroList heroList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_marchlist;
        break;
      }

      // optional .GC_MarchList marchlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marchlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_LOGIN_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validateresult(), output);
  }

  // required int64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oid(), output);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accesstoken(), output);
  }

  // required .GC_CityData city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->city(), output);
  }

  // required string playername = 7;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->playername(), output);
  }

  // required int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional .GC_HeroList heroList = 9;
  if (has_herolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->herolist(), output);
  }

  // optional .GC_MarchList marchlist = 10;
  if (has_marchlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->marchlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_LOGIN_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validateresult(), target);
  }

  // required int64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oid(), target);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesstoken(), target);
  }

  // required .GC_CityData city = 6;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->city(), target);
  }

  // required string playername = 7;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playername(), target);
  }

  // required int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional .GC_HeroList heroList = 9;
  if (has_herolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->herolist(), target);
  }

  // optional .GC_MarchList marchlist = 10;
  if (has_marchlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->marchlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_LOGIN_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 validateresult = 2;
    if (has_validateresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validateresult());
    }

    // required int64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // required string oid = 4;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oid());
    }

    // required string accesstoken = 5;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // required .GC_CityData city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

    // required string playername = 7;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GC_HeroList heroList = 9;
    if (has_herolist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herolist());
    }

    // optional .GC_MarchList marchlist = 10;
    if (has_marchlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marchlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_LOGIN_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_LOGIN_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_LOGIN_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_LOGIN_RET::MergeFrom(const GC_LOGIN_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_validateresult()) {
      set_validateresult(from.validateresult());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_city()) {
      mutable_city()->::GC_CityData::MergeFrom(from.city());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_herolist()) {
      mutable_herolist()->::GC_HeroList::MergeFrom(from.herolist());
    }
    if (from.has_marchlist()) {
      mutable_marchlist()->::GC_MarchList::MergeFrom(from.marchlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_LOGIN_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_LOGIN_RET::CopyFrom(const GC_LOGIN_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_LOGIN_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_city()) {
    if (!this->city().IsInitialized()) return false;
  }
  if (has_herolist()) {
    if (!this->herolist().IsInitialized()) return false;
  }
  if (has_marchlist()) {
    if (!this->marchlist().IsInitialized()) return false;
  }
  return true;
}

void GC_LOGIN_RET::Swap(GC_LOGIN_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(validateresult_, other->validateresult_);
    std::swap(userid_, other->userid_);
    std::swap(oid_, other->oid_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(city_, other->city_);
    std::swap(playername_, other->playername_);
    std::swap(level_, other->level_);
    std::swap(herolist_, other->herolist_);
    std::swap(marchlist_, other->marchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_LOGIN_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_LOGIN_RET_descriptor_;
  metadata.reflection = GC_LOGIN_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CONNECTED_HEARTBEAT::kIsresponseFieldNumber;
#endif  // !_MSC_VER

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT(const CG_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  isresponse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CONNECTED_HEARTBEAT::~CG_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void CG_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CONNECTED_HEARTBEAT_descriptor_;
}

const CG_CONNECTED_HEARTBEAT& CG_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::default_instance_ = NULL;

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::New() const {
  return new CG_CONNECTED_HEARTBEAT;
}

void CG_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isresponse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isresponse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isresponse_)));
          set_has_isresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isresponse = 1;
    if (has_isresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const CG_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isresponse()) {
      set_isresponse(from.isresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const CG_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_CONNECTED_HEARTBEAT::Swap(CG_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(isresponse_, other->isresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = CG_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CONNECTED_HEARTBEAT::kServeransitimeFieldNumber;
#endif  // !_MSC_VER

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT(const GC_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  serveransitime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CONNECTED_HEARTBEAT::~GC_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void GC_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CONNECTED_HEARTBEAT_descriptor_;
}

const GC_CONNECTED_HEARTBEAT& GC_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::default_instance_ = NULL;

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::New() const {
  return new GC_CONNECTED_HEARTBEAT;
}

void GC_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serveransitime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serveransitime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serveransitime_)));
          set_has_serveransitime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serveransitime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serveransitime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serveransitime = 1;
    if (has_serveransitime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serveransitime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const GC_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serveransitime()) {
      set_serveransitime(from.serveransitime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const GC_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_CONNECTED_HEARTBEAT::Swap(GC_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(serveransitime_, other->serveransitime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = GC_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_REQ_NEAR_LIST::kMarchIdFieldNumber;
const int CG_REQ_NEAR_LIST::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_REQ_NEAR_LIST::CG_REQ_NEAR_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_REQ_NEAR_LIST::InitAsDefaultInstance() {
}

CG_REQ_NEAR_LIST::CG_REQ_NEAR_LIST(const CG_REQ_NEAR_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_REQ_NEAR_LIST::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_REQ_NEAR_LIST::~CG_REQ_NEAR_LIST() {
  SharedDtor();
}

void CG_REQ_NEAR_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_REQ_NEAR_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_REQ_NEAR_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_REQ_NEAR_LIST_descriptor_;
}

const CG_REQ_NEAR_LIST& CG_REQ_NEAR_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_REQ_NEAR_LIST* CG_REQ_NEAR_LIST::default_instance_ = NULL;

CG_REQ_NEAR_LIST* CG_REQ_NEAR_LIST::New() const {
  return new CG_REQ_NEAR_LIST;
}

void CG_REQ_NEAR_LIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_REQ_NEAR_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_REQ_NEAR_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marchid(), output);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_REQ_NEAR_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marchid(), target);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_REQ_NEAR_LIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marchid());
    }

    // required int32 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_REQ_NEAR_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_REQ_NEAR_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_REQ_NEAR_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_REQ_NEAR_LIST::MergeFrom(const CG_REQ_NEAR_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_REQ_NEAR_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_REQ_NEAR_LIST::CopyFrom(const CG_REQ_NEAR_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_REQ_NEAR_LIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_REQ_NEAR_LIST::Swap(CG_REQ_NEAR_LIST* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_REQ_NEAR_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_REQ_NEAR_LIST_descriptor_;
  metadata.reflection = CG_REQ_NEAR_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_NEAR_MARCHLIST::kGuidFieldNumber;
const int GC_NEAR_MARCHLIST::kNameFieldNumber;
const int GC_NEAR_MARCHLIST::kLevelFieldNumber;
const int GC_NEAR_MARCHLIST::kCombatNumFieldNumber;
const int GC_NEAR_MARCHLIST::kMarchIdFieldNumber;
const int GC_NEAR_MARCHLIST::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_NEAR_MARCHLIST::GC_NEAR_MARCHLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_NEAR_MARCHLIST::InitAsDefaultInstance() {
}

GC_NEAR_MARCHLIST::GC_NEAR_MARCHLIST(const GC_NEAR_MARCHLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_NEAR_MARCHLIST::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_NEAR_MARCHLIST::~GC_NEAR_MARCHLIST() {
  SharedDtor();
}

void GC_NEAR_MARCHLIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_NEAR_MARCHLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_NEAR_MARCHLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_NEAR_MARCHLIST_descriptor_;
}

const GC_NEAR_MARCHLIST& GC_NEAR_MARCHLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_NEAR_MARCHLIST* GC_NEAR_MARCHLIST::default_instance_ = NULL;

GC_NEAR_MARCHLIST* GC_NEAR_MARCHLIST::New() const {
  return new GC_NEAR_MARCHLIST;
}

void GC_NEAR_MARCHLIST::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    marchid_ = 0;
    sceneid_ = 0;
  }
  guid_.Clear();
  name_.Clear();
  level_.Clear();
  combatnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_NEAR_MARCHLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 Guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Guid;
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // repeated string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // repeated int32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        if (input->ExpectTag(32)) goto parse_CombatNum;
        break;
      }

      // repeated int32 CombatNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_combatnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_combatnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CombatNum;
        if (input->ExpectTag(40)) goto parse_marchId;
        break;
      }

      // required int32 marchId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_NEAR_MARCHLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 Guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guid(i), output);
  }

  // repeated string Name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  // repeated int32 Level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->level(i), output);
  }

  // repeated int32 CombatNum = 4;
  for (int i = 0; i < this->combatnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->combatnum(i), output);
  }

  // required int32 marchId = 5;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->marchid(), output);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_NEAR_MARCHLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 Guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->guid(i), target);
  }

  // repeated string Name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  // repeated int32 Level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->level(i), target);
  }

  // repeated int32 CombatNum = 4;
  for (int i = 0; i < this->combatnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->combatnum(i), target);
  }

  // required int32 marchId = 5;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->marchid(), target);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_NEAR_MARCHLIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required int32 marchId = 5;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marchid());
    }

    // required int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated uint64 Guid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guid(i));
    }
    total_size += 1 * this->guid_size() + data_size;
  }

  // repeated string Name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated int32 Level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  // repeated int32 CombatNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->combatnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->combatnum(i));
    }
    total_size += 1 * this->combatnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_NEAR_MARCHLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_NEAR_MARCHLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_NEAR_MARCHLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_NEAR_MARCHLIST::MergeFrom(const GC_NEAR_MARCHLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  name_.MergeFrom(from.name_);
  level_.MergeFrom(from.level_);
  combatnum_.MergeFrom(from.combatnum_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_NEAR_MARCHLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_NEAR_MARCHLIST::CopyFrom(const GC_NEAR_MARCHLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_NEAR_MARCHLIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;

  return true;
}

void GC_NEAR_MARCHLIST::Swap(GC_NEAR_MARCHLIST* other) {
  if (other != this) {
    guid_.Swap(&other->guid_);
    name_.Swap(&other->name_);
    level_.Swap(&other->level_);
    combatnum_.Swap(&other->combatnum_);
    std::swap(marchid_, other->marchid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_NEAR_MARCHLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_NEAR_MARCHLIST_descriptor_;
  metadata.reflection = GC_NEAR_MARCHLIST_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_CHAT_CHATTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CHAT_CHATTYPE_descriptor_;
}
bool CG_CHAT_CHATTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_INVALID;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_NORMAL;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_WORLD;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_SYSTEM;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_LOUDSPEAKER;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_FRIEND;
const CG_CHAT_CHATTYPE CG_CHAT::CHATTYPE_MIN;
const CG_CHAT_CHATTYPE CG_CHAT::CHATTYPE_MAX;
const int CG_CHAT::CHATTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_CHAT::kChattypeFieldNumber;
const int CG_CHAT::kChatinfoFieldNumber;
const int CG_CHAT::kReceiverguidFieldNumber;
const int CG_CHAT::kReceivernameFieldNumber;
const int CG_CHAT::kReceiverlevelFieldNumber;
#endif  // !_MSC_VER

CG_CHAT::CG_CHAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CHAT::InitAsDefaultInstance() {
}

CG_CHAT::CG_CHAT(const CG_CHAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CHAT::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverguid_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CHAT::~CG_CHAT() {
  SharedDtor();
}

void CG_CHAT::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void CG_CHAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CHAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CHAT_descriptor_;
}

const CG_CHAT& CG_CHAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CHAT* CG_CHAT::default_instance_ = NULL;

CG_CHAT* CG_CHAT::New() const {
  return new CG_CHAT;
}

void CG_CHAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    receiverguid_ = GOOGLE_ULONGLONG(0);
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
    receiverlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CHAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chattype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatinfo;
        break;
      }

      // required string chatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverguid;
        break;
      }

      // optional uint64 receiverguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverguid_)));
          set_has_receiverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receivername;
        break;
      }

      // optional string receivername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receiverlevel;
        break;
      }

      // optional int32 receiverlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverlevel_)));
          set_has_receiverlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CHAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatinfo(), output);
  }

  // optional uint64 receiverguid = 3;
  if (has_receiverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->receiverguid(), output);
  }

  // optional string receivername = 4;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->receivername(), output);
  }

  // optional int32 receiverlevel = 5;
  if (has_receiverlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receiverlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CHAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatinfo(), target);
  }

  // optional uint64 receiverguid = 3;
  if (has_receiverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->receiverguid(), target);
  }

  // optional string receivername = 4;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receivername(), target);
  }

  // optional int32 receiverlevel = 5;
  if (has_receiverlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receiverlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CHAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chattype = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // required string chatinfo = 2;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // optional uint64 receiverguid = 3;
    if (has_receiverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverguid());
    }

    // optional string receivername = 4;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

    // optional int32 receiverlevel = 5;
    if (has_receiverlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CHAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CHAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CHAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CHAT::MergeFrom(const CG_CHAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_receiverguid()) {
      set_receiverguid(from.receiverguid());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
    if (from.has_receiverlevel()) {
      set_receiverlevel(from.receiverlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CHAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CHAT::CopyFrom(const CG_CHAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CHAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_CHAT::Swap(CG_CHAT* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(receiverguid_, other->receiverguid_);
    std::swap(receivername_, other->receivername_);
    std::swap(receiverlevel_, other->receiverlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CHAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CHAT_descriptor_;
  metadata.reflection = CG_CHAT_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_CHAT_CHATTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CHAT_CHATTYPE_descriptor_;
}
bool GC_CHAT_CHATTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_INVALID;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_NORMAL;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_WORLD;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_SYSTEM;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_LOUDSPEAKER;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_FRIEND;
const GC_CHAT_CHATTYPE GC_CHAT::CHATTYPE_MIN;
const GC_CHAT_CHATTYPE GC_CHAT::CHATTYPE_MAX;
const int GC_CHAT::CHATTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_CHAT::kChattypeFieldNumber;
const int GC_CHAT::kChatinfoFieldNumber;
const int GC_CHAT::kSenderguidFieldNumber;
const int GC_CHAT::kSendernameFieldNumber;
const int GC_CHAT::kSenderlevelFieldNumber;
const int GC_CHAT::kReceiverguidFieldNumber;
const int GC_CHAT::kReceivernameFieldNumber;
#endif  // !_MSC_VER

GC_CHAT::GC_CHAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CHAT::InitAsDefaultInstance() {
}

GC_CHAT::GC_CHAT(const GC_CHAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CHAT::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderguid_ = GOOGLE_ULONGLONG(0);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderlevel_ = 0;
  receiverguid_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CHAT::~GC_CHAT() {
  SharedDtor();
}

void GC_CHAT::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void GC_CHAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CHAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CHAT_descriptor_;
}

const GC_CHAT& GC_CHAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CHAT* GC_CHAT::default_instance_ = NULL;

GC_CHAT* GC_CHAT::New() const {
  return new GC_CHAT;
}

void GC_CHAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    senderguid_ = GOOGLE_ULONGLONG(0);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    senderlevel_ = 0;
    receiverguid_ = GOOGLE_ULONGLONG(0);
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CHAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chattype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatinfo;
        break;
      }

      // required string chatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_senderguid;
        break;
      }

      // optional uint64 senderguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderguid_)));
          set_has_senderguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendername;
        break;
      }

      // optional string sendername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderlevel;
        break;
      }

      // optional int32 senderlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderlevel_)));
          set_has_senderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiverguid;
        break;
      }

      // optional uint64 receiverguid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverguid_)));
          set_has_receiverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_receivername;
        break;
      }

      // optional string receivername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CHAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatinfo(), output);
  }

  // optional uint64 senderguid = 3;
  if (has_senderguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->senderguid(), output);
  }

  // optional string sendername = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sendername(), output);
  }

  // optional int32 senderlevel = 5;
  if (has_senderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->senderlevel(), output);
  }

  // optional uint64 receiverguid = 6;
  if (has_receiverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->receiverguid(), output);
  }

  // optional string receivername = 7;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->receivername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CHAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatinfo(), target);
  }

  // optional uint64 senderguid = 3;
  if (has_senderguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->senderguid(), target);
  }

  // optional string sendername = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendername(), target);
  }

  // optional int32 senderlevel = 5;
  if (has_senderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->senderlevel(), target);
  }

  // optional uint64 receiverguid = 6;
  if (has_receiverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->receiverguid(), target);
  }

  // optional string receivername = 7;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->receivername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CHAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chattype = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // required string chatinfo = 2;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // optional uint64 senderguid = 3;
    if (has_senderguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderguid());
    }

    // optional string sendername = 4;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional int32 senderlevel = 5;
    if (has_senderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderlevel());
    }

    // optional uint64 receiverguid = 6;
    if (has_receiverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverguid());
    }

    // optional string receivername = 7;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CHAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CHAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CHAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CHAT::MergeFrom(const GC_CHAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_senderguid()) {
      set_senderguid(from.senderguid());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_senderlevel()) {
      set_senderlevel(from.senderlevel());
    }
    if (from.has_receiverguid()) {
      set_receiverguid(from.receiverguid());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CHAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CHAT::CopyFrom(const GC_CHAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CHAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_CHAT::Swap(GC_CHAT* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(senderguid_, other->senderguid_);
    std::swap(sendername_, other->sendername_);
    std::swap(senderlevel_, other->senderlevel_);
    std::swap(receiverguid_, other->receiverguid_);
    std::swap(receivername_, other->receivername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CHAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CHAT_descriptor_;
  metadata.reflection = GC_CHAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_NOTICE::kNoticeFieldNumber;
const int GC_NOTICE::kFilterRepeatFieldNumber;
#endif  // !_MSC_VER

GC_NOTICE::GC_NOTICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_NOTICE::InitAsDefaultInstance() {
}

GC_NOTICE::GC_NOTICE(const GC_NOTICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_NOTICE::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filterrepeat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_NOTICE::~GC_NOTICE() {
  SharedDtor();
}

void GC_NOTICE::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GC_NOTICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_NOTICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_NOTICE_descriptor_;
}

const GC_NOTICE& GC_NOTICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_NOTICE* GC_NOTICE::default_instance_ = NULL;

GC_NOTICE* GC_NOTICE::New() const {
  return new GC_NOTICE;
}

void GC_NOTICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    filterrepeat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_NOTICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filterRepeat;
        break;
      }

      // optional int32 filterRepeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterrepeat_)));
          set_has_filterrepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_NOTICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filterrepeat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_NOTICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filterrepeat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_NOTICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 filterRepeat = 2;
    if (has_filterrepeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterrepeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_NOTICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_NOTICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_NOTICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_NOTICE::MergeFrom(const GC_NOTICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_filterrepeat()) {
      set_filterrepeat(from.filterrepeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_NOTICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_NOTICE::CopyFrom(const GC_NOTICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_NOTICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_NOTICE::Swap(GC_NOTICE* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(filterrepeat_, other->filterrepeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_NOTICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_NOTICE_descriptor_;
  metadata.reflection = GC_NOTICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneclassidFieldNumber;
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneinstcountFieldNumber;
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneactivationFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_SCENE_INSTACTIVATION::GC_UPDATE_SCENE_INSTACTIVATION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_SCENE_INSTACTIVATION::InitAsDefaultInstance() {
}

GC_UPDATE_SCENE_INSTACTIVATION::GC_UPDATE_SCENE_INSTACTIVATION(const GC_UPDATE_SCENE_INSTACTIVATION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_SCENE_INSTACTIVATION::SharedCtor() {
  _cached_size_ = 0;
  sceneclassid_ = 0;
  sceneinstcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_SCENE_INSTACTIVATION::~GC_UPDATE_SCENE_INSTACTIVATION() {
  SharedDtor();
}

void GC_UPDATE_SCENE_INSTACTIVATION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_SCENE_INSTACTIVATION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_SCENE_INSTACTIVATION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_SCENE_INSTACTIVATION_descriptor_;
}

const GC_UPDATE_SCENE_INSTACTIVATION& GC_UPDATE_SCENE_INSTACTIVATION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_SCENE_INSTACTIVATION* GC_UPDATE_SCENE_INSTACTIVATION::default_instance_ = NULL;

GC_UPDATE_SCENE_INSTACTIVATION* GC_UPDATE_SCENE_INSTACTIVATION::New() const {
  return new GC_UPDATE_SCENE_INSTACTIVATION;
}

void GC_UPDATE_SCENE_INSTACTIVATION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneclassid_ = 0;
    sceneinstcount_ = 0;
  }
  sceneactivation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_SCENE_INSTACTIVATION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneclassid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneclassid_)));
          set_has_sceneclassid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneinstcount;
        break;
      }

      // required int32 sceneinstcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneinstcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstcount_)));
          set_has_sceneinstcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneactivation;
        break;
      }

      // repeated int32 sceneactivation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneactivation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_sceneactivation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sceneactivation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneactivation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_SCENE_INSTACTIVATION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneclassid = 1;
  if (has_sceneclassid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneclassid(), output);
  }

  // required int32 sceneinstcount = 2;
  if (has_sceneinstcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneinstcount(), output);
  }

  // repeated int32 sceneactivation = 3;
  for (int i = 0; i < this->sceneactivation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sceneactivation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_SCENE_INSTACTIVATION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneclassid = 1;
  if (has_sceneclassid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneclassid(), target);
  }

  // required int32 sceneinstcount = 2;
  if (has_sceneinstcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneinstcount(), target);
  }

  // repeated int32 sceneactivation = 3;
  for (int i = 0; i < this->sceneactivation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->sceneactivation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_SCENE_INSTACTIVATION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneclassid = 1;
    if (has_sceneclassid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneclassid());
    }

    // required int32 sceneinstcount = 2;
    if (has_sceneinstcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstcount());
    }

  }
  // repeated int32 sceneactivation = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneactivation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sceneactivation(i));
    }
    total_size += 1 * this->sceneactivation_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_SCENE_INSTACTIVATION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_SCENE_INSTACTIVATION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_SCENE_INSTACTIVATION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_SCENE_INSTACTIVATION::MergeFrom(const GC_UPDATE_SCENE_INSTACTIVATION& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneactivation_.MergeFrom(from.sceneactivation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneclassid()) {
      set_sceneclassid(from.sceneclassid());
    }
    if (from.has_sceneinstcount()) {
      set_sceneinstcount(from.sceneinstcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_SCENE_INSTACTIVATION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_SCENE_INSTACTIVATION::CopyFrom(const GC_UPDATE_SCENE_INSTACTIVATION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_SCENE_INSTACTIVATION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_UPDATE_SCENE_INSTACTIVATION::Swap(GC_UPDATE_SCENE_INSTACTIVATION* other) {
  if (other != this) {
    std::swap(sceneclassid_, other->sceneclassid_);
    std::swap(sceneinstcount_, other->sceneinstcount_);
    sceneactivation_.Swap(&other->sceneactivation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_SCENE_INSTACTIVATION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_SCENE_INSTACTIVATION_descriptor_;
  metadata.reflection = GC_UPDATE_SCENE_INSTACTIVATION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_MOVE::kPoscountFieldNumber;
const int CG_MOVE::kPosxFieldNumber;
const int CG_MOVE::kPoszFieldNumber;
const int CG_MOVE::kIsmovingFieldNumber;
const int CG_MOVE::kObjidFieldNumber;
const int CG_MOVE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_MOVE::CG_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_MOVE::InitAsDefaultInstance() {
}

CG_MOVE::CG_MOVE(const CG_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_MOVE::SharedCtor() {
  _cached_size_ = 0;
  poscount_ = 0;
  ismoving_ = 0;
  objid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_MOVE::~CG_MOVE() {
  SharedDtor();
}

void CG_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_MOVE_descriptor_;
}

const CG_MOVE& CG_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_MOVE* CG_MOVE::default_instance_ = NULL;

CG_MOVE* CG_MOVE::New() const {
  return new CG_MOVE;
}

void CG_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poscount_ = 0;
    ismoving_ = 0;
    objid_ = 0;
    sceneid_ = 0;
  }
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 poscount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        if (input->ExpectTag(24)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posz;
        if (input->ExpectTag(32)) goto parse_ismoving;
        break;
      }

      // required int32 ismoving = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismoving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismoving_)));
          set_has_ismoving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_objid;
        break;
      }

      // required int32 objid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poscount(), output);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->posx(i), output);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posz(i), output);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismoving(), output);
  }

  // required int32 objid = 5;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objid(), output);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poscount(), target);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->posx(i), target);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posz(i), target);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ismoving(), target);
  }

  // required int32 objid = 5;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objid(), target);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 poscount = 1;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

    // required int32 ismoving = 4;
    if (has_ismoving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismoving());
    }

    // required int32 objid = 5;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated int32 posx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_MOVE::MergeFrom(const CG_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
    if (from.has_ismoving()) {
      set_ismoving(from.ismoving());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_MOVE::CopyFrom(const CG_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  return true;
}

void CG_MOVE::Swap(CG_MOVE* other) {
  if (other != this) {
    std::swap(poscount_, other->poscount_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(ismoving_, other->ismoving_);
    std::swap(objid_, other->objid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_MOVE_descriptor_;
  metadata.reflection = CG_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MOVE::kObjidFieldNumber;
const int GC_MOVE::kPoscountFieldNumber;
const int GC_MOVE::kPosserialFieldNumber;
const int GC_MOVE::kPosxFieldNumber;
const int GC_MOVE::kPoszFieldNumber;
const int GC_MOVE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_MOVE::GC_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MOVE::InitAsDefaultInstance() {
}

GC_MOVE::GC_MOVE(const GC_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MOVE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  poscount_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MOVE::~GC_MOVE() {
  SharedDtor();
}

void GC_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MOVE_descriptor_;
}

const GC_MOVE& GC_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MOVE* GC_MOVE::default_instance_ = NULL;

GC_MOVE* GC_MOVE::New() const {
  return new GC_MOVE;
}

void GC_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    poscount_ = 0;
    sceneid_ = 0;
  }
  posserial_.Clear();
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_poscount;
        break;
      }

      // required int32 poscount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        break;
      }

      // repeated int32 posserial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posserial())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posserial())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        if (input->ExpectTag(40)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posz;
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objid = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->poscount(), output);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posserial(i), output);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->posx(i), output);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->posz(i), output);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objid = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->poscount(), target);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posserial(i), target);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->posx(i), target);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->posz(i), target);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objid = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 poscount = 2;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

    // required int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated int32 posserial = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posserial_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posserial(i));
    }
    total_size += 1 * this->posserial_size() + data_size;
  }

  // repeated int32 posx = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MOVE::MergeFrom(const GC_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posserial_.MergeFrom(from.posserial_);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MOVE::CopyFrom(const GC_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  return true;
}

void GC_MOVE::Swap(GC_MOVE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(poscount_, other->poscount_);
    posserial_.Swap(&other->posserial_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MOVE_descriptor_;
  metadata.reflection = GC_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_STOP::kObjidFieldNumber;
const int GC_STOP::kPosserialFieldNumber;
const int GC_STOP::kPosxFieldNumber;
const int GC_STOP::kPoszFieldNumber;
const int GC_STOP::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_STOP::GC_STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_STOP::InitAsDefaultInstance() {
}

GC_STOP::GC_STOP(const GC_STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_STOP::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  posserial_ = 0;
  posx_ = 0;
  posz_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_STOP::~GC_STOP() {
  SharedDtor();
}

void GC_STOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_STOP_descriptor_;
}

const GC_STOP& GC_STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_STOP* GC_STOP::default_instance_ = NULL;

GC_STOP* GC_STOP::New() const {
  return new GC_STOP;
}

void GC_STOP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    posserial_ = 0;
    posx_ = 0;
    posz_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posserial;
        break;
      }

      // required int32 posserial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posserial_)));
          set_has_posserial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // required int32 posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posz;
        break;
      }

      // required int32 posz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objid = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posserial(), output);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posz(), output);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objid = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posserial(), target);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posz(), target);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_STOP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objid = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 posserial = 2;
    if (has_posserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posserial());
    }

    // required int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posz = 4;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 sceneId = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_STOP::MergeFrom(const GC_STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_posserial()) {
      set_posserial(from.posserial());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_STOP::CopyFrom(const GC_STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_STOP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GC_STOP::Swap(GC_STOP* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(posserial_, other->posserial_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_STOP_descriptor_;
  metadata.reflection = GC_STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TELEMOVE::kObjIdFieldNumber;
const int GC_TELEMOVE::kTargetPosXFieldNumber;
const int GC_TELEMOVE::kTargetPosZFieldNumber;
const int GC_TELEMOVE::kNeedChangeFacetoFieldNumber;
const int GC_TELEMOVE::kAnimaIdFieldNumber;
const int GC_TELEMOVE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_TELEMOVE::GC_TELEMOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TELEMOVE::InitAsDefaultInstance() {
}

GC_TELEMOVE::GC_TELEMOVE(const GC_TELEMOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TELEMOVE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  targetposx_ = 0;
  targetposz_ = 0;
  needchangefaceto_ = 0;
  animaid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TELEMOVE::~GC_TELEMOVE() {
  SharedDtor();
}

void GC_TELEMOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TELEMOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TELEMOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TELEMOVE_descriptor_;
}

const GC_TELEMOVE& GC_TELEMOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_TELEMOVE* GC_TELEMOVE::default_instance_ = NULL;

GC_TELEMOVE* GC_TELEMOVE::New() const {
  return new GC_TELEMOVE;
}

void GC_TELEMOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    targetposx_ = 0;
    targetposz_ = 0;
    needchangefaceto_ = 0;
    animaid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TELEMOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetPosX;
        break;
      }

      // required int32 targetPosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposx_)));
          set_has_targetposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetPosZ;
        break;
      }

      // required int32 targetPosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposz_)));
          set_has_targetposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needChangeFaceto;
        break;
      }

      // required int32 needChangeFaceto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needChangeFaceto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needchangefaceto_)));
          set_has_needchangefaceto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_animaId;
        break;
      }

      // optional int32 animaId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animaid_)));
          set_has_animaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TELEMOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 targetPosX = 2;
  if (has_targetposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetposx(), output);
  }

  // required int32 targetPosZ = 3;
  if (has_targetposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetposz(), output);
  }

  // required int32 needChangeFaceto = 4;
  if (has_needchangefaceto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needchangefaceto(), output);
  }

  // optional int32 animaId = 5;
  if (has_animaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->animaid(), output);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TELEMOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 targetPosX = 2;
  if (has_targetposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetposx(), target);
  }

  // required int32 targetPosZ = 3;
  if (has_targetposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetposz(), target);
  }

  // required int32 needChangeFaceto = 4;
  if (has_needchangefaceto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needchangefaceto(), target);
  }

  // optional int32 animaId = 5;
  if (has_animaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->animaid(), target);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TELEMOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 targetPosX = 2;
    if (has_targetposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetposx());
    }

    // required int32 targetPosZ = 3;
    if (has_targetposz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetposz());
    }

    // required int32 needChangeFaceto = 4;
    if (has_needchangefaceto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needchangefaceto());
    }

    // optional int32 animaId = 5;
    if (has_animaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animaid());
    }

    // required int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TELEMOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TELEMOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TELEMOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TELEMOVE::MergeFrom(const GC_TELEMOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_targetposx()) {
      set_targetposx(from.targetposx());
    }
    if (from.has_targetposz()) {
      set_targetposz(from.targetposz());
    }
    if (from.has_needchangefaceto()) {
      set_needchangefaceto(from.needchangefaceto());
    }
    if (from.has_animaid()) {
      set_animaid(from.animaid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TELEMOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TELEMOVE::CopyFrom(const GC_TELEMOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TELEMOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void GC_TELEMOVE::Swap(GC_TELEMOVE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(targetposx_, other->targetposx_);
    std::swap(targetposz_, other->targetposz_);
    std::swap(needchangefaceto_, other->needchangefaceto_);
    std::swap(animaid_, other->animaid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TELEMOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TELEMOVE_descriptor_;
  metadata.reflection = GC_TELEMOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_SKILL_USE::kSenderIdFieldNumber;
const int CG_SKILL_USE::kSkillIdFieldNumber;
const int CG_SKILL_USE::kTargetIdFieldNumber;
const int CG_SKILL_USE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_SKILL_USE::CG_SKILL_USE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_SKILL_USE::InitAsDefaultInstance() {
}

CG_SKILL_USE::CG_SKILL_USE(const CG_SKILL_USE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_SKILL_USE::SharedCtor() {
  _cached_size_ = 0;
  senderid_ = 0;
  skillid_ = 0;
  targetid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_SKILL_USE::~CG_SKILL_USE() {
  SharedDtor();
}

void CG_SKILL_USE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_SKILL_USE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_SKILL_USE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_SKILL_USE_descriptor_;
}

const CG_SKILL_USE& CG_SKILL_USE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_SKILL_USE* CG_SKILL_USE::default_instance_ = NULL;

CG_SKILL_USE* CG_SKILL_USE::New() const {
  return new CG_SKILL_USE;
}

void CG_SKILL_USE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderid_ = 0;
    skillid_ = 0;
    targetid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_SKILL_USE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 senderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // required int32 targetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_SKILL_USE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 senderId = 1;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senderid(), output);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required int32 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_SKILL_USE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 senderId = 1;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senderid(), target);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required int32 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_SKILL_USE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 senderId = 1;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // required int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required int32 sceneId = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_SKILL_USE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_SKILL_USE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_SKILL_USE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_SKILL_USE::MergeFrom(const CG_SKILL_USE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_SKILL_USE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_SKILL_USE::CopyFrom(const CG_SKILL_USE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_SKILL_USE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CG_SKILL_USE::Swap(CG_SKILL_USE* other) {
  if (other != this) {
    std::swap(senderid_, other->senderid_);
    std::swap(skillid_, other->skillid_);
    std::swap(targetid_, other->targetid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_SKILL_USE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_SKILL_USE_descriptor_;
  metadata.reflection = CG_SKILL_USE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RET_USE_SKILL::kSkillIdFieldNumber;
const int GC_RET_USE_SKILL::kSenderIdFieldNumber;
const int GC_RET_USE_SKILL::kTargetIdFieldNumber;
const int GC_RET_USE_SKILL::kSkillfailTypeFieldNumber;
const int GC_RET_USE_SKILL::kSkillnameFieldNumber;
const int GC_RET_USE_SKILL::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_RET_USE_SKILL::GC_RET_USE_SKILL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RET_USE_SKILL::InitAsDefaultInstance() {
}

GC_RET_USE_SKILL::GC_RET_USE_SKILL(const GC_RET_USE_SKILL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RET_USE_SKILL::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  senderid_ = 0;
  targetid_ = 0;
  skillfailtype_ = 0;
  skillname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RET_USE_SKILL::~GC_RET_USE_SKILL() {
  SharedDtor();
}

void GC_RET_USE_SKILL::SharedDtor() {
  if (skillname_ != &::google::protobuf::internal::kEmptyString) {
    delete skillname_;
  }
  if (this != default_instance_) {
  }
}

void GC_RET_USE_SKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RET_USE_SKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RET_USE_SKILL_descriptor_;
}

const GC_RET_USE_SKILL& GC_RET_USE_SKILL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_RET_USE_SKILL* GC_RET_USE_SKILL::default_instance_ = NULL;

GC_RET_USE_SKILL* GC_RET_USE_SKILL::New() const {
  return new GC_RET_USE_SKILL;
}

void GC_RET_USE_SKILL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    senderid_ = 0;
    targetid_ = 0;
    skillfailtype_ = 0;
    if (has_skillname()) {
      if (skillname_ != &::google::protobuf::internal::kEmptyString) {
        skillname_->clear();
      }
    }
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RET_USE_SKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderId;
        break;
      }

      // required int32 senderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TargetId;
        break;
      }

      // required int32 TargetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillfailType;
        break;
      }

      // optional int32 skillfailType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillfailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillfailtype_)));
          set_has_skillfailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skillname;
        break;
      }

      // optional string skillname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillname().data(), this->skillname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RET_USE_SKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 senderId = 2;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senderid(), output);
  }

  // required int32 TargetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  // optional int32 skillfailType = 4;
  if (has_skillfailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillfailtype(), output);
  }

  // optional string skillname = 5;
  if (has_skillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillname().data(), this->skillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->skillname(), output);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RET_USE_SKILL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 senderId = 2;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->senderid(), target);
  }

  // required int32 TargetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  // optional int32 skillfailType = 4;
  if (has_skillfailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillfailtype(), target);
  }

  // optional string skillname = 5;
  if (has_skillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillname().data(), this->skillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->skillname(), target);
  }

  // required int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RET_USE_SKILL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 senderId = 2;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // required int32 TargetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 skillfailType = 4;
    if (has_skillfailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillfailtype());
    }

    // optional string skillname = 5;
    if (has_skillname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillname());
    }

    // required int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RET_USE_SKILL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RET_USE_SKILL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RET_USE_SKILL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RET_USE_SKILL::MergeFrom(const GC_RET_USE_SKILL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_skillfailtype()) {
      set_skillfailtype(from.skillfailtype());
    }
    if (from.has_skillname()) {
      set_skillname(from.skillname());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RET_USE_SKILL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RET_USE_SKILL::CopyFrom(const GC_RET_USE_SKILL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RET_USE_SKILL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void GC_RET_USE_SKILL::Swap(GC_RET_USE_SKILL* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(senderid_, other->senderid_);
    std::swap(targetid_, other->targetid_);
    std::swap(skillfailtype_, other->skillfailtype_);
    std::swap(skillname_, other->skillname_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RET_USE_SKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RET_USE_SKILL_descriptor_;
  metadata.reflection = GC_RET_USE_SKILL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_ANIMATION_STATE::kObjIdFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kAnimationStateFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kVerticalOffDisFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHorizontalOffDisFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kStateLastTimeFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kStateResortTimeFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHitTimesFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHitIntervalFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_ANIMATION_STATE::GC_UPDATE_ANIMATION_STATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_ANIMATION_STATE::InitAsDefaultInstance() {
}

GC_UPDATE_ANIMATION_STATE::GC_UPDATE_ANIMATION_STATE(const GC_UPDATE_ANIMATION_STATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_ANIMATION_STATE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  animationstate_ = 0;
  verticaloffdis_ = 0;
  horizontaloffdis_ = 0;
  statelasttime_ = 0;
  stateresorttime_ = 0;
  hittimes_ = 0;
  hitinterval_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_ANIMATION_STATE::~GC_UPDATE_ANIMATION_STATE() {
  SharedDtor();
}

void GC_UPDATE_ANIMATION_STATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_ANIMATION_STATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_ANIMATION_STATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_ANIMATION_STATE_descriptor_;
}

const GC_UPDATE_ANIMATION_STATE& GC_UPDATE_ANIMATION_STATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_ANIMATION_STATE* GC_UPDATE_ANIMATION_STATE::default_instance_ = NULL;

GC_UPDATE_ANIMATION_STATE* GC_UPDATE_ANIMATION_STATE::New() const {
  return new GC_UPDATE_ANIMATION_STATE;
}

void GC_UPDATE_ANIMATION_STATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    animationstate_ = 0;
    verticaloffdis_ = 0;
    horizontaloffdis_ = 0;
    statelasttime_ = 0;
    stateresorttime_ = 0;
    hittimes_ = 0;
    hitinterval_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_ANIMATION_STATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AnimationState;
        break;
      }

      // required int32 AnimationState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimationState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animationstate_)));
          set_has_animationstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_verticalOffDis;
        break;
      }

      // optional int32 verticalOffDis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verticalOffDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verticaloffdis_)));
          set_has_verticaloffdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_horizontalOffDis;
        break;
      }

      // optional int32 horizontalOffDis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horizontalOffDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontaloffdis_)));
          set_has_horizontaloffdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stateLastTime;
        break;
      }

      // optional int32 stateLastTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statelasttime_)));
          set_has_statelasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stateResortTime;
        break;
      }

      // optional int32 stateResortTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateResortTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateresorttime_)));
          set_has_stateresorttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hitTimes;
        break;
      }

      // optional int32 hitTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hittimes_)));
          set_has_hittimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hitInterval;
        break;
      }

      // optional int32 hitInterval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitinterval_)));
          set_has_hitinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_ANIMATION_STATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 AnimationState = 2;
  if (has_animationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->animationstate(), output);
  }

  // optional int32 verticalOffDis = 3;
  if (has_verticaloffdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verticaloffdis(), output);
  }

  // optional int32 horizontalOffDis = 4;
  if (has_horizontaloffdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->horizontaloffdis(), output);
  }

  // optional int32 stateLastTime = 5;
  if (has_statelasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->statelasttime(), output);
  }

  // optional int32 stateResortTime = 6;
  if (has_stateresorttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stateresorttime(), output);
  }

  // optional int32 hitTimes = 7;
  if (has_hittimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hittimes(), output);
  }

  // optional int32 hitInterval = 8;
  if (has_hitinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hitinterval(), output);
  }

  // required int32 sceneId = 9;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_ANIMATION_STATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 AnimationState = 2;
  if (has_animationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->animationstate(), target);
  }

  // optional int32 verticalOffDis = 3;
  if (has_verticaloffdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->verticaloffdis(), target);
  }

  // optional int32 horizontalOffDis = 4;
  if (has_horizontaloffdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->horizontaloffdis(), target);
  }

  // optional int32 stateLastTime = 5;
  if (has_statelasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->statelasttime(), target);
  }

  // optional int32 stateResortTime = 6;
  if (has_stateresorttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stateresorttime(), target);
  }

  // optional int32 hitTimes = 7;
  if (has_hittimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hittimes(), target);
  }

  // optional int32 hitInterval = 8;
  if (has_hitinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hitinterval(), target);
  }

  // required int32 sceneId = 9;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_ANIMATION_STATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 AnimationState = 2;
    if (has_animationstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animationstate());
    }

    // optional int32 verticalOffDis = 3;
    if (has_verticaloffdis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verticaloffdis());
    }

    // optional int32 horizontalOffDis = 4;
    if (has_horizontaloffdis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontaloffdis());
    }

    // optional int32 stateLastTime = 5;
    if (has_statelasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statelasttime());
    }

    // optional int32 stateResortTime = 6;
    if (has_stateresorttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateresorttime());
    }

    // optional int32 hitTimes = 7;
    if (has_hittimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hittimes());
    }

    // optional int32 hitInterval = 8;
    if (has_hitinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitinterval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 sceneId = 9;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_ANIMATION_STATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_ANIMATION_STATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_ANIMATION_STATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_ANIMATION_STATE::MergeFrom(const GC_UPDATE_ANIMATION_STATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_animationstate()) {
      set_animationstate(from.animationstate());
    }
    if (from.has_verticaloffdis()) {
      set_verticaloffdis(from.verticaloffdis());
    }
    if (from.has_horizontaloffdis()) {
      set_horizontaloffdis(from.horizontaloffdis());
    }
    if (from.has_statelasttime()) {
      set_statelasttime(from.statelasttime());
    }
    if (from.has_stateresorttime()) {
      set_stateresorttime(from.stateresorttime());
    }
    if (from.has_hittimes()) {
      set_hittimes(from.hittimes());
    }
    if (from.has_hitinterval()) {
      set_hitinterval(from.hitinterval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_ANIMATION_STATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_ANIMATION_STATE::CopyFrom(const GC_UPDATE_ANIMATION_STATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_ANIMATION_STATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000103) != 0x00000103) return false;

  return true;
}

void GC_UPDATE_ANIMATION_STATE::Swap(GC_UPDATE_ANIMATION_STATE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(animationstate_, other->animationstate_);
    std::swap(verticaloffdis_, other->verticaloffdis_);
    std::swap(horizontaloffdis_, other->horizontaloffdis_);
    std::swap(statelasttime_, other->statelasttime_);
    std::swap(stateresorttime_, other->stateresorttime_);
    std::swap(hittimes_, other->hittimes_);
    std::swap(hitinterval_, other->hitinterval_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_ANIMATION_STATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_ANIMATION_STATE_descriptor_;
  metadata.reflection = GC_UPDATE_ANIMATION_STATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DELETE_OBJ::kObjIdFieldNumber;
const int GC_DELETE_OBJ::kSceneIdFieldNumber;
const int GC_DELETE_OBJ::kMarchIdFieldNumber;
#endif  // !_MSC_VER

GC_DELETE_OBJ::GC_DELETE_OBJ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DELETE_OBJ::InitAsDefaultInstance() {
}

GC_DELETE_OBJ::GC_DELETE_OBJ(const GC_DELETE_OBJ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DELETE_OBJ::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  sceneid_ = 0;
  marchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DELETE_OBJ::~GC_DELETE_OBJ() {
  SharedDtor();
}

void GC_DELETE_OBJ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DELETE_OBJ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DELETE_OBJ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DELETE_OBJ_descriptor_;
}

const GC_DELETE_OBJ& GC_DELETE_OBJ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_DELETE_OBJ* GC_DELETE_OBJ::default_instance_ = NULL;

GC_DELETE_OBJ* GC_DELETE_OBJ::New() const {
  return new GC_DELETE_OBJ;
}

void GC_DELETE_OBJ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    sceneid_ = 0;
    marchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DELETE_OBJ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_marchId;
        break;
      }

      // required int32 marchId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DELETE_OBJ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  // required int32 marchId = 3;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DELETE_OBJ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  // required int32 marchId = 3;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DELETE_OBJ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 marchId = 3;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DELETE_OBJ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DELETE_OBJ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DELETE_OBJ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DELETE_OBJ::MergeFrom(const GC_DELETE_OBJ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DELETE_OBJ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DELETE_OBJ::CopyFrom(const GC_DELETE_OBJ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DELETE_OBJ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_DELETE_OBJ::Swap(GC_DELETE_OBJ* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DELETE_OBJ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DELETE_OBJ_descriptor_;
  metadata.reflection = GC_DELETE_OBJ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ATTACKFLY::kObjIdFieldNumber;
const int GC_ATTACKFLY::kDisFieldNumber;
const int GC_ATTACKFLY::kHightFieldNumber;
const int GC_ATTACKFLY::kFlyTimeFieldNumber;
const int GC_ATTACKFLY::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_ATTACKFLY::GC_ATTACKFLY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ATTACKFLY::InitAsDefaultInstance() {
}

GC_ATTACKFLY::GC_ATTACKFLY(const GC_ATTACKFLY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ATTACKFLY::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  dis_ = 0;
  hight_ = 0;
  flytime_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ATTACKFLY::~GC_ATTACKFLY() {
  SharedDtor();
}

void GC_ATTACKFLY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ATTACKFLY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ATTACKFLY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ATTACKFLY_descriptor_;
}

const GC_ATTACKFLY& GC_ATTACKFLY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ATTACKFLY* GC_ATTACKFLY::default_instance_ = NULL;

GC_ATTACKFLY* GC_ATTACKFLY::New() const {
  return new GC_ATTACKFLY;
}

void GC_ATTACKFLY::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    dis_ = 0;
    hight_ = 0;
    flytime_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ATTACKFLY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Dis;
        break;
      }

      // required int32 Dis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dis_)));
          set_has_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Hight;
        break;
      }

      // required int32 Hight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
          set_has_hight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FlyTime;
        break;
      }

      // required int32 FlyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flytime_)));
          set_has_flytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ATTACKFLY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 Dis = 2;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dis(), output);
  }

  // required int32 Hight = 3;
  if (has_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hight(), output);
  }

  // required int32 FlyTime = 4;
  if (has_flytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flytime(), output);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ATTACKFLY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 Dis = 2;
  if (has_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dis(), target);
  }

  // required int32 Hight = 3;
  if (has_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hight(), target);
  }

  // required int32 FlyTime = 4;
  if (has_flytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flytime(), target);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ATTACKFLY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 Dis = 2;
    if (has_dis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dis());
    }

    // required int32 Hight = 3;
    if (has_hight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hight());
    }

    // required int32 FlyTime = 4;
    if (has_flytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flytime());
    }

    // required int32 sceneId = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ATTACKFLY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ATTACKFLY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ATTACKFLY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ATTACKFLY::MergeFrom(const GC_ATTACKFLY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_dis()) {
      set_dis(from.dis());
    }
    if (from.has_hight()) {
      set_hight(from.hight());
    }
    if (from.has_flytime()) {
      set_flytime(from.flytime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ATTACKFLY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ATTACKFLY::CopyFrom(const GC_ATTACKFLY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ATTACKFLY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GC_ATTACKFLY::Swap(GC_ATTACKFLY* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(dis_, other->dis_);
    std::swap(hight_, other->hight_);
    std::swap(flytime_, other->flytime_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ATTACKFLY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ATTACKFLY_descriptor_;
  metadata.reflection = GC_ATTACKFLY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_FORCE_SETPOS::kObjIDFieldNumber;
const int GC_FORCE_SETPOS::kPosXFieldNumber;
const int GC_FORCE_SETPOS::kPosZFieldNumber;
const int GC_FORCE_SETPOS::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_FORCE_SETPOS::GC_FORCE_SETPOS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_FORCE_SETPOS::InitAsDefaultInstance() {
}

GC_FORCE_SETPOS::GC_FORCE_SETPOS(const GC_FORCE_SETPOS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_FORCE_SETPOS::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  posx_ = 0;
  posz_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_FORCE_SETPOS::~GC_FORCE_SETPOS() {
  SharedDtor();
}

void GC_FORCE_SETPOS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_FORCE_SETPOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_FORCE_SETPOS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_FORCE_SETPOS_descriptor_;
}

const GC_FORCE_SETPOS& GC_FORCE_SETPOS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_FORCE_SETPOS* GC_FORCE_SETPOS::default_instance_ = NULL;

GC_FORCE_SETPOS* GC_FORCE_SETPOS::New() const {
  return new GC_FORCE_SETPOS;
}

void GC_FORCE_SETPOS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    posx_ = 0;
    posz_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_FORCE_SETPOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // required int32 PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PosZ;
        break;
      }

      // required int32 PosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_FORCE_SETPOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // required int32 PosZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posz(), output);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_FORCE_SETPOS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // required int32 PosZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posz(), target);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_FORCE_SETPOS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 PosZ = 3;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 sceneId = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_FORCE_SETPOS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_FORCE_SETPOS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_FORCE_SETPOS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_FORCE_SETPOS::MergeFrom(const GC_FORCE_SETPOS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_FORCE_SETPOS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_FORCE_SETPOS::CopyFrom(const GC_FORCE_SETPOS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_FORCE_SETPOS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_FORCE_SETPOS::Swap(GC_FORCE_SETPOS* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_FORCE_SETPOS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_FORCE_SETPOS_descriptor_;
  metadata.reflection = GC_FORCE_SETPOS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_NEEDIMPACTINFO::kObjIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kImpactIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kImpactLogicIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kIsForeverFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kRemainTimeFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kIsAddFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_NEEDIMPACTINFO::GC_UPDATE_NEEDIMPACTINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_NEEDIMPACTINFO::InitAsDefaultInstance() {
}

GC_UPDATE_NEEDIMPACTINFO::GC_UPDATE_NEEDIMPACTINFO(const GC_UPDATE_NEEDIMPACTINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_NEEDIMPACTINFO::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_NEEDIMPACTINFO::~GC_UPDATE_NEEDIMPACTINFO() {
  SharedDtor();
}

void GC_UPDATE_NEEDIMPACTINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_NEEDIMPACTINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_NEEDIMPACTINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_NEEDIMPACTINFO_descriptor_;
}

const GC_UPDATE_NEEDIMPACTINFO& GC_UPDATE_NEEDIMPACTINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_NEEDIMPACTINFO* GC_UPDATE_NEEDIMPACTINFO::default_instance_ = NULL;

GC_UPDATE_NEEDIMPACTINFO* GC_UPDATE_NEEDIMPACTINFO::New() const {
  return new GC_UPDATE_NEEDIMPACTINFO;
}

void GC_UPDATE_NEEDIMPACTINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    sceneid_ = 0;
  }
  impactid_.Clear();
  impactlogicid_.Clear();
  isforever_.Clear();
  remaintime_.Clear();
  isadd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_NEEDIMPACTINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impactId;
        break;
      }

      // repeated int32 impactId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impactId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_impactid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_impactid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impactId;
        if (input->ExpectTag(24)) goto parse_impactLogicId;
        break;
      }

      // repeated int32 impactLogicId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impactLogicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_impactlogicid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_impactlogicid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_impactLogicId;
        if (input->ExpectTag(32)) goto parse_isForever;
        break;
      }

      // repeated int32 isForever = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_isforever())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isforever())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isForever;
        if (input->ExpectTag(40)) goto parse_remainTime;
        break;
      }

      // repeated int32 remainTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_remaintime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remaintime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainTime;
        if (input->ExpectTag(48)) goto parse_isAdd;
        break;
      }

      // repeated int32 isAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_isadd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isadd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAdd;
        if (input->ExpectTag(56)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_NEEDIMPACTINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // repeated int32 impactId = 2;
  for (int i = 0; i < this->impactid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->impactid(i), output);
  }

  // repeated int32 impactLogicId = 3;
  for (int i = 0; i < this->impactlogicid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->impactlogicid(i), output);
  }

  // repeated int32 isForever = 4;
  for (int i = 0; i < this->isforever_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->isforever(i), output);
  }

  // repeated int32 remainTime = 5;
  for (int i = 0; i < this->remaintime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->remaintime(i), output);
  }

  // repeated int32 isAdd = 6;
  for (int i = 0; i < this->isadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->isadd(i), output);
  }

  // required int32 sceneId = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_NEEDIMPACTINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // repeated int32 impactId = 2;
  for (int i = 0; i < this->impactid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->impactid(i), target);
  }

  // repeated int32 impactLogicId = 3;
  for (int i = 0; i < this->impactlogicid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->impactlogicid(i), target);
  }

  // repeated int32 isForever = 4;
  for (int i = 0; i < this->isforever_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->isforever(i), target);
  }

  // repeated int32 remainTime = 5;
  for (int i = 0; i < this->remaintime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->remaintime(i), target);
  }

  // repeated int32 isAdd = 6;
  for (int i = 0; i < this->isadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->isadd(i), target);
  }

  // required int32 sceneId = 7;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_NEEDIMPACTINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 sceneId = 7;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated int32 impactId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->impactid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->impactid(i));
    }
    total_size += 1 * this->impactid_size() + data_size;
  }

  // repeated int32 impactLogicId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->impactlogicid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->impactlogicid(i));
    }
    total_size += 1 * this->impactlogicid_size() + data_size;
  }

  // repeated int32 isForever = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->isforever_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isforever(i));
    }
    total_size += 1 * this->isforever_size() + data_size;
  }

  // repeated int32 remainTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaintime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remaintime(i));
    }
    total_size += 1 * this->remaintime_size() + data_size;
  }

  // repeated int32 isAdd = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->isadd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isadd(i));
    }
    total_size += 1 * this->isadd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_NEEDIMPACTINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_NEEDIMPACTINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_NEEDIMPACTINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_NEEDIMPACTINFO::MergeFrom(const GC_UPDATE_NEEDIMPACTINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  impactid_.MergeFrom(from.impactid_);
  impactlogicid_.MergeFrom(from.impactlogicid_);
  isforever_.MergeFrom(from.isforever_);
  remaintime_.MergeFrom(from.remaintime_);
  isadd_.MergeFrom(from.isadd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_NEEDIMPACTINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_NEEDIMPACTINFO::CopyFrom(const GC_UPDATE_NEEDIMPACTINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_NEEDIMPACTINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  return true;
}

void GC_UPDATE_NEEDIMPACTINFO::Swap(GC_UPDATE_NEEDIMPACTINFO* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    impactid_.Swap(&other->impactid_);
    impactlogicid_.Swap(&other->impactlogicid_);
    isforever_.Swap(&other->isforever_);
    remaintime_.Swap(&other->remaintime_);
    isadd_.Swap(&other->isadd_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_NEEDIMPACTINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_NEEDIMPACTINFO_descriptor_;
  metadata.reflection = GC_UPDATE_NEEDIMPACTINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PLAY_EFFECT::kObjIDFieldNumber;
const int GC_PLAY_EFFECT::kEffectIDFieldNumber;
const int GC_PLAY_EFFECT::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_PLAY_EFFECT::GC_PLAY_EFFECT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PLAY_EFFECT::InitAsDefaultInstance() {
}

GC_PLAY_EFFECT::GC_PLAY_EFFECT(const GC_PLAY_EFFECT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PLAY_EFFECT::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  effectid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PLAY_EFFECT::~GC_PLAY_EFFECT() {
  SharedDtor();
}

void GC_PLAY_EFFECT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PLAY_EFFECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PLAY_EFFECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PLAY_EFFECT_descriptor_;
}

const GC_PLAY_EFFECT& GC_PLAY_EFFECT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_PLAY_EFFECT* GC_PLAY_EFFECT::default_instance_ = NULL;

GC_PLAY_EFFECT* GC_PLAY_EFFECT::New() const {
  return new GC_PLAY_EFFECT;
}

void GC_PLAY_EFFECT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    effectid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PLAY_EFFECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ObjID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EffectID;
        break;
      }

      // required int32 EffectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PLAY_EFFECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ObjID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 EffectID = 2;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectid(), output);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PLAY_EFFECT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ObjID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 EffectID = 2;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectid(), target);
  }

  // required int32 sceneId = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PLAY_EFFECT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ObjID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 EffectID = 2;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // required int32 sceneId = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PLAY_EFFECT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PLAY_EFFECT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PLAY_EFFECT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PLAY_EFFECT::MergeFrom(const GC_PLAY_EFFECT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PLAY_EFFECT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PLAY_EFFECT::CopyFrom(const GC_PLAY_EFFECT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PLAY_EFFECT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_PLAY_EFFECT::Swap(GC_PLAY_EFFECT* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(effectid_, other->effectid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PLAY_EFFECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PLAY_EFFECT_descriptor_;
  metadata.reflection = GC_PLAY_EFFECT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_REMOVEEFFECT::kObjIdFieldNumber;
const int GC_REMOVEEFFECT::kEffectIdFieldNumber;
const int GC_REMOVEEFFECT::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_REMOVEEFFECT::GC_REMOVEEFFECT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_REMOVEEFFECT::InitAsDefaultInstance() {
}

GC_REMOVEEFFECT::GC_REMOVEEFFECT(const GC_REMOVEEFFECT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_REMOVEEFFECT::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  effectid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_REMOVEEFFECT::~GC_REMOVEEFFECT() {
  SharedDtor();
}

void GC_REMOVEEFFECT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_REMOVEEFFECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_REMOVEEFFECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_REMOVEEFFECT_descriptor_;
}

const GC_REMOVEEFFECT& GC_REMOVEEFFECT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_REMOVEEFFECT* GC_REMOVEEFFECT::default_instance_ = NULL;

GC_REMOVEEFFECT* GC_REMOVEEFFECT::New() const {
  return new GC_REMOVEEFFECT;
}

void GC_REMOVEEFFECT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    effectid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_REMOVEEFFECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectId;
        break;
      }

      // required int32 effectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_REMOVEEFFECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 effectId = 2;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectid(), output);
  }

  // required int32 sceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_REMOVEEFFECT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 effectId = 2;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectid(), target);
  }

  // required int32 sceneId = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_REMOVEEFFECT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 effectId = 2;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // required int32 sceneId = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_REMOVEEFFECT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_REMOVEEFFECT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_REMOVEEFFECT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_REMOVEEFFECT::MergeFrom(const GC_REMOVEEFFECT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_REMOVEEFFECT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_REMOVEEFFECT::CopyFrom(const GC_REMOVEEFFECT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_REMOVEEFFECT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_REMOVEEFFECT::Swap(GC_REMOVEEFFECT* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(effectid_, other->effectid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_REMOVEEFFECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_REMOVEEFFECT_descriptor_;
  metadata.reflection = GC_REMOVEEFFECT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_FIGHT::kTypeFieldNumber;
const int CG_FIGHT::kAttackIdFieldNumber;
const int CG_FIGHT::kDefenceIdFieldNumber;
const int CG_FIGHT::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_FIGHT::CG_FIGHT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_FIGHT::InitAsDefaultInstance() {
}

CG_FIGHT::CG_FIGHT(const CG_FIGHT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_FIGHT::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  attackid_ = GOOGLE_LONGLONG(0);
  defenceid_ = GOOGLE_LONGLONG(0);
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_FIGHT::~CG_FIGHT() {
  SharedDtor();
}

void CG_FIGHT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_FIGHT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_FIGHT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_FIGHT_descriptor_;
}

const CG_FIGHT& CG_FIGHT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_FIGHT* CG_FIGHT::default_instance_ = NULL;

CG_FIGHT* CG_FIGHT::New() const {
  return new CG_FIGHT;
}

void CG_FIGHT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    attackid_ = GOOGLE_LONGLONG(0);
    defenceid_ = GOOGLE_LONGLONG(0);
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_FIGHT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AttackId;
        break;
      }

      // required int64 AttackId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackid_)));
          set_has_attackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DefenceId;
        break;
      }

      // optional int64 DefenceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defenceid_)));
          set_has_defenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_FIGHT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 AttackId = 2;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attackid(), output);
  }

  // optional int64 DefenceId = 3;
  if (has_defenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->defenceid(), output);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_FIGHT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 AttackId = 2;
  if (has_attackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attackid(), target);
  }

  // optional int64 DefenceId = 3;
  if (has_defenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->defenceid(), target);
  }

  // required int32 sceneId = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_FIGHT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 AttackId = 2;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackid());
    }

    // optional int64 DefenceId = 3;
    if (has_defenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defenceid());
    }

    // required int32 sceneId = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_FIGHT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_FIGHT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_FIGHT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_FIGHT::MergeFrom(const CG_FIGHT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_defenceid()) {
      set_defenceid(from.defenceid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_FIGHT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_FIGHT::CopyFrom(const CG_FIGHT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_FIGHT::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CG_FIGHT::Swap(CG_FIGHT* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(attackid_, other->attackid_);
    std::swap(defenceid_, other->defenceid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_FIGHT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_FIGHT_descriptor_;
  metadata.reflection = CG_FIGHT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_FIGHT::kRetFieldNumber;
const int GC_FIGHT::kMarchIdFieldNumber;
const int GC_FIGHT::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GC_FIGHT::GC_FIGHT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_FIGHT::InitAsDefaultInstance() {
}

GC_FIGHT::GC_FIGHT(const GC_FIGHT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_FIGHT::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_FIGHT::~GC_FIGHT() {
  SharedDtor();
}

void GC_FIGHT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_FIGHT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_FIGHT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_FIGHT_descriptor_;
}

const GC_FIGHT& GC_FIGHT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_FIGHT* GC_FIGHT::default_instance_ = NULL;

GC_FIGHT* GC_FIGHT::New() const {
  return new GC_FIGHT;
}

void GC_FIGHT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    marchid_ = GOOGLE_LONGLONG(0);
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_FIGHT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marchId;
        break;
      }

      // optional int64 marchId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneId;
        break;
      }

      // optional int32 sceneId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_FIGHT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 marchId = 2;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->marchid(), output);
  }

  // optional int32 sceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_FIGHT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 marchId = 2;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->marchid(), target);
  }

  // optional int32 sceneId = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_FIGHT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 marchId = 2;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // optional int32 sceneId = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_FIGHT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_FIGHT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_FIGHT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_FIGHT::MergeFrom(const GC_FIGHT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_FIGHT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_FIGHT::CopyFrom(const GC_FIGHT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_FIGHT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_FIGHT::Swap(GC_FIGHT* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(marchid_, other->marchid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_FIGHT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_FIGHT_descriptor_;
  metadata.reflection = GC_FIGHT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_LEAVE_COPYSCENE::kObjIdFieldNumber;
const int CG_LEAVE_COPYSCENE::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_LEAVE_COPYSCENE::CG_LEAVE_COPYSCENE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_LEAVE_COPYSCENE::InitAsDefaultInstance() {
}

CG_LEAVE_COPYSCENE::CG_LEAVE_COPYSCENE(const CG_LEAVE_COPYSCENE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_LEAVE_COPYSCENE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LEAVE_COPYSCENE::~CG_LEAVE_COPYSCENE() {
  SharedDtor();
}

void CG_LEAVE_COPYSCENE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_LEAVE_COPYSCENE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_LEAVE_COPYSCENE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LEAVE_COPYSCENE_descriptor_;
}

const CG_LEAVE_COPYSCENE& CG_LEAVE_COPYSCENE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_LEAVE_COPYSCENE* CG_LEAVE_COPYSCENE::default_instance_ = NULL;

CG_LEAVE_COPYSCENE* CG_LEAVE_COPYSCENE::New() const {
  return new CG_LEAVE_COPYSCENE;
}

void CG_LEAVE_COPYSCENE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_LEAVE_COPYSCENE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // required int32 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_LEAVE_COPYSCENE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_LEAVE_COPYSCENE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_LEAVE_COPYSCENE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LEAVE_COPYSCENE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_LEAVE_COPYSCENE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_LEAVE_COPYSCENE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_LEAVE_COPYSCENE::MergeFrom(const CG_LEAVE_COPYSCENE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_LEAVE_COPYSCENE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_LEAVE_COPYSCENE::CopyFrom(const CG_LEAVE_COPYSCENE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LEAVE_COPYSCENE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_LEAVE_COPYSCENE::Swap(CG_LEAVE_COPYSCENE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_LEAVE_COPYSCENE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_LEAVE_COPYSCENE_descriptor_;
  metadata.reflection = CG_LEAVE_COPYSCENE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ROBOT_OPEN::kSceneIdFieldNumber;
const int CG_ROBOT_OPEN::kOpenFieldNumber;
#endif  // !_MSC_VER

CG_ROBOT_OPEN::CG_ROBOT_OPEN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ROBOT_OPEN::InitAsDefaultInstance() {
}

CG_ROBOT_OPEN::CG_ROBOT_OPEN(const CG_ROBOT_OPEN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ROBOT_OPEN::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ROBOT_OPEN::~CG_ROBOT_OPEN() {
  SharedDtor();
}

void CG_ROBOT_OPEN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ROBOT_OPEN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ROBOT_OPEN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ROBOT_OPEN_descriptor_;
}

const CG_ROBOT_OPEN& CG_ROBOT_OPEN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ROBOT_OPEN* CG_ROBOT_OPEN::default_instance_ = NULL;

CG_ROBOT_OPEN* CG_ROBOT_OPEN::New() const {
  return new CG_ROBOT_OPEN;
}

void CG_ROBOT_OPEN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ROBOT_OPEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // required int32 open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ROBOT_OPEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ROBOT_OPEN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ROBOT_OPEN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ROBOT_OPEN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ROBOT_OPEN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ROBOT_OPEN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ROBOT_OPEN::MergeFrom(const CG_ROBOT_OPEN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ROBOT_OPEN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ROBOT_OPEN::CopyFrom(const CG_ROBOT_OPEN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ROBOT_OPEN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_ROBOT_OPEN::Swap(CG_ROBOT_OPEN* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ROBOT_OPEN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ROBOT_OPEN_descriptor_;
  metadata.reflection = CG_ROBOT_OPEN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ROBOT_OPEN::kSceneIdFieldNumber;
const int GC_ROBOT_OPEN::kRetFieldNumber;
#endif  // !_MSC_VER

GC_ROBOT_OPEN::GC_ROBOT_OPEN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ROBOT_OPEN::InitAsDefaultInstance() {
}

GC_ROBOT_OPEN::GC_ROBOT_OPEN(const GC_ROBOT_OPEN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ROBOT_OPEN::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ROBOT_OPEN::~GC_ROBOT_OPEN() {
  SharedDtor();
}

void GC_ROBOT_OPEN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ROBOT_OPEN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ROBOT_OPEN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ROBOT_OPEN_descriptor_;
}

const GC_ROBOT_OPEN& GC_ROBOT_OPEN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ROBOT_OPEN* GC_ROBOT_OPEN::default_instance_ = NULL;

GC_ROBOT_OPEN* GC_ROBOT_OPEN::New() const {
  return new GC_ROBOT_OPEN;
}

void GC_ROBOT_OPEN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ROBOT_OPEN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ROBOT_OPEN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ROBOT_OPEN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ROBOT_OPEN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ROBOT_OPEN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ROBOT_OPEN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ROBOT_OPEN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ROBOT_OPEN::MergeFrom(const GC_ROBOT_OPEN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ROBOT_OPEN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ROBOT_OPEN::CopyFrom(const GC_ROBOT_OPEN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ROBOT_OPEN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_ROBOT_OPEN::Swap(GC_ROBOT_OPEN* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ROBOT_OPEN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ROBOT_OPEN_descriptor_;
  metadata.reflection = GC_ROBOT_OPEN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ASSIGN_HERO::kMarchidFieldNumber;
const int CG_ASSIGN_HERO::kHeroidFieldNumber;
#endif  // !_MSC_VER

CG_ASSIGN_HERO::CG_ASSIGN_HERO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ASSIGN_HERO::InitAsDefaultInstance() {
}

CG_ASSIGN_HERO::CG_ASSIGN_HERO(const CG_ASSIGN_HERO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ASSIGN_HERO::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  heroid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ASSIGN_HERO::~CG_ASSIGN_HERO() {
  SharedDtor();
}

void CG_ASSIGN_HERO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ASSIGN_HERO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ASSIGN_HERO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ASSIGN_HERO_descriptor_;
}

const CG_ASSIGN_HERO& CG_ASSIGN_HERO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ASSIGN_HERO* CG_ASSIGN_HERO::default_instance_ = NULL;

CG_ASSIGN_HERO* CG_ASSIGN_HERO::New() const {
  return new CG_ASSIGN_HERO;
}

void CG_ASSIGN_HERO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    heroid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ASSIGN_HERO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // required int64 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ASSIGN_HERO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required int64 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ASSIGN_HERO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required int64 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ASSIGN_HERO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchid = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required int64 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ASSIGN_HERO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ASSIGN_HERO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ASSIGN_HERO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ASSIGN_HERO::MergeFrom(const CG_ASSIGN_HERO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ASSIGN_HERO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ASSIGN_HERO::CopyFrom(const CG_ASSIGN_HERO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ASSIGN_HERO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_ASSIGN_HERO::Swap(CG_ASSIGN_HERO* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ASSIGN_HERO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ASSIGN_HERO_descriptor_;
  metadata.reflection = CG_ASSIGN_HERO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ASSIGN_HERO::kMarchidFieldNumber;
const int GC_ASSIGN_HERO::kHeroIdFieldNumber;
const int GC_ASSIGN_HERO::kRetFieldNumber;
#endif  // !_MSC_VER

GC_ASSIGN_HERO::GC_ASSIGN_HERO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ASSIGN_HERO::InitAsDefaultInstance() {
}

GC_ASSIGN_HERO::GC_ASSIGN_HERO(const GC_ASSIGN_HERO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ASSIGN_HERO::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  heroid_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ASSIGN_HERO::~GC_ASSIGN_HERO() {
  SharedDtor();
}

void GC_ASSIGN_HERO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ASSIGN_HERO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ASSIGN_HERO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ASSIGN_HERO_descriptor_;
}

const GC_ASSIGN_HERO& GC_ASSIGN_HERO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ASSIGN_HERO* GC_ASSIGN_HERO::default_instance_ = NULL;

GC_ASSIGN_HERO* GC_ASSIGN_HERO::New() const {
  return new GC_ASSIGN_HERO;
}

void GC_ASSIGN_HERO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    heroid_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ASSIGN_HERO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroId;
        break;
      }

      // required int64 heroId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ASSIGN_HERO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required int64 heroId = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->heroid(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ASSIGN_HERO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required int64 heroId = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->heroid(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ASSIGN_HERO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchid = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required int64 heroId = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ASSIGN_HERO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ASSIGN_HERO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ASSIGN_HERO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ASSIGN_HERO::MergeFrom(const GC_ASSIGN_HERO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ASSIGN_HERO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ASSIGN_HERO::CopyFrom(const GC_ASSIGN_HERO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ASSIGN_HERO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_ASSIGN_HERO::Swap(GC_ASSIGN_HERO* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(heroid_, other->heroid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ASSIGN_HERO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ASSIGN_HERO_descriptor_;
  metadata.reflection = GC_ASSIGN_HERO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_SEND_MARCH::kMarchidFieldNumber;
#endif  // !_MSC_VER

CG_SEND_MARCH::CG_SEND_MARCH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_SEND_MARCH::InitAsDefaultInstance() {
}

CG_SEND_MARCH::CG_SEND_MARCH(const CG_SEND_MARCH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_SEND_MARCH::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_SEND_MARCH::~CG_SEND_MARCH() {
  SharedDtor();
}

void CG_SEND_MARCH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_SEND_MARCH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_SEND_MARCH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_SEND_MARCH_descriptor_;
}

const CG_SEND_MARCH& CG_SEND_MARCH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_SEND_MARCH* CG_SEND_MARCH::default_instance_ = NULL;

CG_SEND_MARCH* CG_SEND_MARCH::New() const {
  return new CG_SEND_MARCH;
}

void CG_SEND_MARCH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_SEND_MARCH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_SEND_MARCH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_SEND_MARCH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_SEND_MARCH::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchid = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_SEND_MARCH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_SEND_MARCH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_SEND_MARCH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_SEND_MARCH::MergeFrom(const CG_SEND_MARCH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_SEND_MARCH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_SEND_MARCH::CopyFrom(const CG_SEND_MARCH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_SEND_MARCH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_SEND_MARCH::Swap(CG_SEND_MARCH* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_SEND_MARCH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_SEND_MARCH_descriptor_;
  metadata.reflection = CG_SEND_MARCH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SEND_MARCH::kMarchIdFieldNumber;
const int GC_SEND_MARCH::kRetFieldNumber;
#endif  // !_MSC_VER

GC_SEND_MARCH::GC_SEND_MARCH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SEND_MARCH::InitAsDefaultInstance() {
}

GC_SEND_MARCH::GC_SEND_MARCH(const GC_SEND_MARCH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SEND_MARCH::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SEND_MARCH::~GC_SEND_MARCH() {
  SharedDtor();
}

void GC_SEND_MARCH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SEND_MARCH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SEND_MARCH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SEND_MARCH_descriptor_;
}

const GC_SEND_MARCH& GC_SEND_MARCH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SEND_MARCH* GC_SEND_MARCH::default_instance_ = NULL;

GC_SEND_MARCH* GC_SEND_MARCH::New() const {
  return new GC_SEND_MARCH;
}

void GC_SEND_MARCH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SEND_MARCH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SEND_MARCH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SEND_MARCH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SEND_MARCH::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SEND_MARCH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SEND_MARCH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SEND_MARCH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SEND_MARCH::MergeFrom(const GC_SEND_MARCH& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SEND_MARCH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SEND_MARCH::CopyFrom(const GC_SEND_MARCH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SEND_MARCH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_SEND_MARCH::Swap(GC_SEND_MARCH* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SEND_MARCH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SEND_MARCH_descriptor_;
  metadata.reflection = GC_SEND_MARCH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CREATEROLE::kGenderFieldNumber;
const int CG_CREATEROLE::kNameFieldNumber;
#endif  // !_MSC_VER

CG_CREATEROLE::CG_CREATEROLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CREATEROLE::InitAsDefaultInstance() {
}

CG_CREATEROLE::CG_CREATEROLE(const CG_CREATEROLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CREATEROLE::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CREATEROLE::~CG_CREATEROLE() {
  SharedDtor();
}

void CG_CREATEROLE::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CG_CREATEROLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CREATEROLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CREATEROLE_descriptor_;
}

const CG_CREATEROLE& CG_CREATEROLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CREATEROLE* CG_CREATEROLE::default_instance_ = NULL;

CG_CREATEROLE* CG_CREATEROLE::New() const {
  return new CG_CREATEROLE;
}

void CG_CREATEROLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gender_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CREATEROLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CREATEROLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CREATEROLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CREATEROLE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CREATEROLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CREATEROLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CREATEROLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CREATEROLE::MergeFrom(const CG_CREATEROLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CREATEROLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CREATEROLE::CopyFrom(const CG_CREATEROLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CREATEROLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_CREATEROLE::Swap(CG_CREATEROLE* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CREATEROLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CREATEROLE_descriptor_;
  metadata.reflection = CG_CREATEROLE_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_;
}
bool GC_CREATEROLE_RET_CREATEROLE_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_SUCCESS;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_NAMEEXIST;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_NAMESCREENING;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_LONGNAME;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_RESULT_MIN;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_RESULT_MAX;
const int GC_CREATEROLE_RET::CREATEROLE_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_CREATEROLE_RET::kResultFieldNumber;
const int GC_CREATEROLE_RET::kPlayerGuidFieldNumber;
const int GC_CREATEROLE_RET::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GC_CREATEROLE_RET::GC_CREATEROLE_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CREATEROLE_RET::InitAsDefaultInstance() {
}

GC_CREATEROLE_RET::GC_CREATEROLE_RET(const GC_CREATEROLE_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CREATEROLE_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CREATEROLE_RET::~GC_CREATEROLE_RET() {
  SharedDtor();
}

void GC_CREATEROLE_RET::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GC_CREATEROLE_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CREATEROLE_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CREATEROLE_RET_descriptor_;
}

const GC_CREATEROLE_RET& GC_CREATEROLE_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CREATEROLE_RET* GC_CREATEROLE_RET::default_instance_ = NULL;

GC_CREATEROLE_RET* GC_CREATEROLE_RET::New() const {
  return new GC_CREATEROLE_RET;
}

void GC_CREATEROLE_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CREATEROLE_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerGuid;
        break;
      }

      // required uint64 playerGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // required string playerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CREATEROLE_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 playerGuid = 2;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerguid(), output);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CREATEROLE_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 playerGuid = 2;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerguid(), target);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CREATEROLE_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 playerGuid = 2;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

    // required string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CREATEROLE_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CREATEROLE_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CREATEROLE_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CREATEROLE_RET::MergeFrom(const GC_CREATEROLE_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CREATEROLE_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CREATEROLE_RET::CopyFrom(const GC_CREATEROLE_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CREATEROLE_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_CREATEROLE_RET::Swap(GC_CREATEROLE_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CREATEROLE_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CREATEROLE_RET_descriptor_;
  metadata.reflection = GC_CREATEROLE_RET_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_;
}
bool GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::BEGINQUEUE;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUING;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::ENDQUEUE;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_MIN;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_MAX;
const int GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_LOGIN_QUEUE_STATUS::kStatusFieldNumber;
const int GC_LOGIN_QUEUE_STATUS::kIndexFieldNumber;
#endif  // !_MSC_VER

GC_LOGIN_QUEUE_STATUS::GC_LOGIN_QUEUE_STATUS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_LOGIN_QUEUE_STATUS::InitAsDefaultInstance() {
}

GC_LOGIN_QUEUE_STATUS::GC_LOGIN_QUEUE_STATUS(const GC_LOGIN_QUEUE_STATUS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_LOGIN_QUEUE_STATUS::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_LOGIN_QUEUE_STATUS::~GC_LOGIN_QUEUE_STATUS() {
  SharedDtor();
}

void GC_LOGIN_QUEUE_STATUS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_LOGIN_QUEUE_STATUS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_LOGIN_QUEUE_STATUS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_QUEUE_STATUS_descriptor_;
}

const GC_LOGIN_QUEUE_STATUS& GC_LOGIN_QUEUE_STATUS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_LOGIN_QUEUE_STATUS* GC_LOGIN_QUEUE_STATUS::default_instance_ = NULL;

GC_LOGIN_QUEUE_STATUS* GC_LOGIN_QUEUE_STATUS::New() const {
  return new GC_LOGIN_QUEUE_STATUS;
}

void GC_LOGIN_QUEUE_STATUS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_LOGIN_QUEUE_STATUS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_LOGIN_QUEUE_STATUS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_LOGIN_QUEUE_STATUS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_LOGIN_QUEUE_STATUS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_LOGIN_QUEUE_STATUS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_LOGIN_QUEUE_STATUS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_LOGIN_QUEUE_STATUS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_LOGIN_QUEUE_STATUS::MergeFrom(const GC_LOGIN_QUEUE_STATUS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_LOGIN_QUEUE_STATUS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_LOGIN_QUEUE_STATUS::CopyFrom(const GC_LOGIN_QUEUE_STATUS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_LOGIN_QUEUE_STATUS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_LOGIN_QUEUE_STATUS::Swap(GC_LOGIN_QUEUE_STATUS* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_LOGIN_QUEUE_STATUS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_LOGIN_QUEUE_STATUS_descriptor_;
  metadata.reflection = GC_LOGIN_QUEUE_STATUS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RoleData::kGuidFieldNumber;
const int GC_RoleData::kHpFieldNumber;
const int GC_RoleData::kAccountNameFieldNumber;
#endif  // !_MSC_VER

GC_RoleData::GC_RoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RoleData::InitAsDefaultInstance() {
}

GC_RoleData::GC_RoleData(const GC_RoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RoleData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  hp_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RoleData::~GC_RoleData() {
  SharedDtor();
}

void GC_RoleData::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void GC_RoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RoleData_descriptor_;
}

const GC_RoleData& GC_RoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_RoleData* GC_RoleData::default_instance_ = NULL;

GC_RoleData* GC_RoleData::New() const {
  return new GC_RoleData;
}

void GC_RoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    hp_ = 0;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountName;
        break;
      }

      // required string accountName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // required string accountName = 3;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accountname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // required string accountName = 3;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required string accountName = 3;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RoleData::MergeFrom(const GC_RoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RoleData::CopyFrom(const GC_RoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RoleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GC_RoleData::Swap(GC_RoleData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(hp_, other->hp_);
    std::swap(accountname_, other->accountname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RoleData_descriptor_;
  metadata.reflection = GC_RoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_BuildingData::kGuidFieldNumber;
const int GC_BuildingData::kTypeFieldNumber;
const int GC_BuildingData::kSlotFieldNumber;
const int GC_BuildingData::kLevelFieldNumber;
#endif  // !_MSC_VER

GC_BuildingData::GC_BuildingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_BuildingData::InitAsDefaultInstance() {
}

GC_BuildingData::GC_BuildingData(const GC_BuildingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_BuildingData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  slot_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_BuildingData::~GC_BuildingData() {
  SharedDtor();
}

void GC_BuildingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_BuildingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_BuildingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_BuildingData_descriptor_;
}

const GC_BuildingData& GC_BuildingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_BuildingData* GC_BuildingData::default_instance_ = NULL;

GC_BuildingData* GC_BuildingData::New() const {
  return new GC_BuildingData;
}

void GC_BuildingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    slot_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_BuildingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // required int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_BuildingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_BuildingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_BuildingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_BuildingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_BuildingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_BuildingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_BuildingData::MergeFrom(const GC_BuildingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_BuildingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_BuildingData::CopyFrom(const GC_BuildingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_BuildingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_BuildingData::Swap(GC_BuildingData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(slot_, other->slot_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_BuildingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_BuildingData_descriptor_;
  metadata.reflection = GC_BuildingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CoolDownInfo::kIdFieldNumber;
const int GC_CoolDownInfo::kCdtimeFieldNumber;
const int GC_CoolDownInfo::kElapsedFieldNumber;
#endif  // !_MSC_VER

GC_CoolDownInfo::GC_CoolDownInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CoolDownInfo::InitAsDefaultInstance() {
}

GC_CoolDownInfo::GC_CoolDownInfo(const GC_CoolDownInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CoolDownInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  cdtime_ = 0;
  elapsed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CoolDownInfo::~GC_CoolDownInfo() {
  SharedDtor();
}

void GC_CoolDownInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CoolDownInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CoolDownInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CoolDownInfo_descriptor_;
}

const GC_CoolDownInfo& GC_CoolDownInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CoolDownInfo* GC_CoolDownInfo::default_instance_ = NULL;

GC_CoolDownInfo* GC_CoolDownInfo::New() const {
  return new GC_CoolDownInfo;
}

void GC_CoolDownInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    cdtime_ = 0;
    elapsed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CoolDownInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cdtime;
        break;
      }

      // required int32 cdtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elapsed;
        break;
      }

      // required int32 elapsed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsed_)));
          set_has_elapsed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CoolDownInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 cdtime = 2;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdtime(), output);
  }

  // required int32 elapsed = 3;
  if (has_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->elapsed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CoolDownInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 cdtime = 2;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdtime(), target);
  }

  // required int32 elapsed = 3;
  if (has_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->elapsed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CoolDownInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 cdtime = 2;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdtime());
    }

    // required int32 elapsed = 3;
    if (has_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CoolDownInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CoolDownInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CoolDownInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CoolDownInfo::MergeFrom(const GC_CoolDownInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_elapsed()) {
      set_elapsed(from.elapsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CoolDownInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CoolDownInfo::CopyFrom(const GC_CoolDownInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CoolDownInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_CoolDownInfo::Swap(GC_CoolDownInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(elapsed_, other->elapsed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CoolDownInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CoolDownInfo_descriptor_;
  metadata.reflection = GC_CoolDownInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_HeroData::kGuidFieldNumber;
const int GC_HeroData::kTypeFieldNumber;
const int GC_HeroData::kLevelFieldNumber;
const int GC_HeroData::kStateFieldNumber;
const int GC_HeroData::kHpFieldNumber;
const int GC_HeroData::kMpFieldNumber;
const int GC_HeroData::kSkillFieldNumber;
const int GC_HeroData::kCooldownFieldNumber;
const int GC_HeroData::kArrangeindexFieldNumber;
const int GC_HeroData::kMarchIdFieldNumber;
#endif  // !_MSC_VER

GC_HeroData::GC_HeroData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_HeroData::InitAsDefaultInstance() {
}

GC_HeroData::GC_HeroData(const GC_HeroData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_HeroData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  level_ = 0;
  state_ = 0;
  hp_ = 0;
  mp_ = 0;
  arrangeindex_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_HeroData::~GC_HeroData() {
  SharedDtor();
}

void GC_HeroData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_HeroData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_HeroData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_HeroData_descriptor_;
}

const GC_HeroData& GC_HeroData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_HeroData* GC_HeroData::default_instance_ = NULL;

GC_HeroData* GC_HeroData::New() const {
  return new GC_HeroData;
}

void GC_HeroData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    level_ = 0;
    state_ = 0;
    hp_ = 0;
    mp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arrangeindex_ = 0;
    marchid_ = GOOGLE_LONGLONG(0);
  }
  skill_.Clear();
  cooldown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_HeroData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mp;
        break;
      }

      // required int32 mp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skill;
        break;
      }

      // repeated int32 skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skill;
        if (input->ExpectTag(66)) goto parse_cooldown;
        break;
      }

      // repeated .GC_CoolDownInfo cooldown = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooldown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooldown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cooldown;
        if (input->ExpectTag(72)) goto parse_arrangeindex;
        break;
      }

      // required int32 arrangeindex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangeindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrangeindex_)));
          set_has_arrangeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_marchId;
        break;
      }

      // required int64 marchId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_HeroData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mp(), output);
  }

  // repeated int32 skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->skill(i), output);
  }

  // repeated .GC_CoolDownInfo cooldown = 8;
  for (int i = 0; i < this->cooldown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cooldown(i), output);
  }

  // required int32 arrangeindex = 9;
  if (has_arrangeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->arrangeindex(), output);
  }

  // required int64 marchId = 10;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_HeroData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mp(), target);
  }

  // repeated int32 skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->skill(i), target);
  }

  // repeated .GC_CoolDownInfo cooldown = 8;
  for (int i = 0; i < this->cooldown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cooldown(i), target);
  }

  // required int32 arrangeindex = 9;
  if (has_arrangeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->arrangeindex(), target);
  }

  // required int64 marchId = 10;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_HeroData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 mp = 6;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 arrangeindex = 9;
    if (has_arrangeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrangeindex());
    }

    // required int64 marchId = 10;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  // repeated int32 skill = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }

  // repeated .GC_CoolDownInfo cooldown = 8;
  total_size += 1 * this->cooldown_size();
  for (int i = 0; i < this->cooldown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooldown(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_HeroData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_HeroData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_HeroData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_HeroData::MergeFrom(const GC_HeroData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  cooldown_.MergeFrom(from.cooldown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arrangeindex()) {
      set_arrangeindex(from.arrangeindex());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_HeroData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_HeroData::CopyFrom(const GC_HeroData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_HeroData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000033f) != 0x0000033f) return false;

  for (int i = 0; i < cooldown_size(); i++) {
    if (!this->cooldown(i).IsInitialized()) return false;
  }
  return true;
}

void GC_HeroData::Swap(GC_HeroData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    skill_.Swap(&other->skill_);
    cooldown_.Swap(&other->cooldown_);
    std::swap(arrangeindex_, other->arrangeindex_);
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_HeroData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_HeroData_descriptor_;
  metadata.reflection = GC_HeroData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TroopData::kTypeFieldNumber;
const int GC_TroopData::kLevelFieldNumber;
const int GC_TroopData::kHpFieldNumber;
const int GC_TroopData::kMpFieldNumber;
const int GC_TroopData::kSkillFieldNumber;
const int GC_TroopData::kCooldownFieldNumber;
const int GC_TroopData::kArrangeindexFieldNumber;
const int GC_TroopData::kMarchidFieldNumber;
#endif  // !_MSC_VER

GC_TroopData::GC_TroopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TroopData::InitAsDefaultInstance() {
}

GC_TroopData::GC_TroopData(const GC_TroopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TroopData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  hp_ = 0;
  mp_ = 0;
  arrangeindex_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TroopData::~GC_TroopData() {
  SharedDtor();
}

void GC_TroopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TroopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TroopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TroopData_descriptor_;
}

const GC_TroopData& GC_TroopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_TroopData* GC_TroopData::default_instance_ = NULL;

GC_TroopData* GC_TroopData::New() const {
  return new GC_TroopData;
}

void GC_TroopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    hp_ = 0;
    mp_ = 0;
    arrangeindex_ = 0;
    marchid_ = GOOGLE_LONGLONG(0);
  }
  skill_.Clear();
  cooldown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TroopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // required int32 mp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill;
        break;
      }

      // repeated int32 skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill;
        if (input->ExpectTag(50)) goto parse_cooldown;
        break;
      }

      // repeated .GC_CoolDownInfo cooldown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooldown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooldown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cooldown;
        if (input->ExpectTag(56)) goto parse_arrangeindex;
        break;
      }

      // required int32 arrangeindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangeindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrangeindex_)));
          set_has_arrangeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_marchid;
        break;
      }

      // required int64 marchid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TroopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required int32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // repeated int32 skill = 5;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->skill(i), output);
  }

  // repeated .GC_CoolDownInfo cooldown = 6;
  for (int i = 0; i < this->cooldown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cooldown(i), output);
  }

  // required int32 arrangeindex = 7;
  if (has_arrangeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->arrangeindex(), output);
  }

  // required int64 marchid = 8;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TroopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // required int32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // repeated int32 skill = 5;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->skill(i), target);
  }

  // repeated .GC_CoolDownInfo cooldown = 6;
  for (int i = 0; i < this->cooldown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cooldown(i), target);
  }

  // required int32 arrangeindex = 7;
  if (has_arrangeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->arrangeindex(), target);
  }

  // required int64 marchid = 8;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TroopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 arrangeindex = 7;
    if (has_arrangeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrangeindex());
    }

    // required int64 marchid = 8;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  // repeated int32 skill = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }

  // repeated .GC_CoolDownInfo cooldown = 6;
  total_size += 1 * this->cooldown_size();
  for (int i = 0; i < this->cooldown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooldown(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TroopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TroopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TroopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TroopData::MergeFrom(const GC_TroopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  cooldown_.MergeFrom(from.cooldown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_arrangeindex()) {
      set_arrangeindex(from.arrangeindex());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TroopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TroopData::CopyFrom(const GC_TroopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TroopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000cf) != 0x000000cf) return false;

  for (int i = 0; i < cooldown_size(); i++) {
    if (!this->cooldown(i).IsInitialized()) return false;
  }
  return true;
}

void GC_TroopData::Swap(GC_TroopData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    skill_.Swap(&other->skill_);
    cooldown_.Swap(&other->cooldown_);
    std::swap(arrangeindex_, other->arrangeindex_);
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TroopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TroopData_descriptor_;
  metadata.reflection = GC_TroopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MarchData::kMarchidFieldNumber;
const int GC_MarchData::kBegintimeFieldNumber;
const int GC_MarchData::kPlayeridFieldNumber;
const int GC_MarchData::kCityIdFieldNumber;
const int GC_MarchData::kStatusFieldNumber;
const int GC_MarchData::kSpeedFieldNumber;
const int GC_MarchData::kFightidFieldNumber;
const int GC_MarchData::kBuildidFieldNumber;
const int GC_MarchData::kHeroFieldNumber;
const int GC_MarchData::kTroopFieldNumber;
const int GC_MarchData::kSceneidFieldNumber;
#endif  // !_MSC_VER

GC_MarchData::GC_MarchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MarchData::InitAsDefaultInstance() {
  hero_ = const_cast< ::GC_HeroData*>(&::GC_HeroData::default_instance());
}

GC_MarchData::GC_MarchData(const GC_MarchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MarchData::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  begintime_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  cityid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  speed_ = 0;
  fightid_ = GOOGLE_LONGLONG(0);
  buildid_ = GOOGLE_LONGLONG(0);
  hero_ = NULL;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MarchData::~GC_MarchData() {
  SharedDtor();
}

void GC_MarchData::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void GC_MarchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MarchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MarchData_descriptor_;
}

const GC_MarchData& GC_MarchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MarchData* GC_MarchData::default_instance_ = NULL;

GC_MarchData* GC_MarchData::New() const {
  return new GC_MarchData;
}

void GC_MarchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
    begintime_ = 0;
    playerid_ = GOOGLE_LONGLONG(0);
    cityid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    speed_ = 0;
    fightid_ = GOOGLE_LONGLONG(0);
    buildid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::GC_HeroData::Clear();
    }
    sceneid_ = 0;
  }
  troop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MarchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begintime;
        break;
      }

      // required int32 begintime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required int64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cityId;
        break;
      }

      // required int64 cityId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // required int32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fightid;
        break;
      }

      // optional int64 fightid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightid_)));
          set_has_fightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buildid;
        break;
      }

      // optional int64 buildid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_hero;
        break;
      }

      // required .GC_HeroData hero = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_troop;
        break;
      }

      // repeated .GC_TroopData troop = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_troop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_troop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_troop;
        if (input->ExpectTag(88)) goto parse_sceneid;
        break;
      }

      // optional int32 sceneid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MarchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  // required int32 begintime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begintime(), output);
  }

  // required int64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }

  // required int64 cityId = 4;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cityid(), output);
  }

  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // required int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int64 fightid = 7;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fightid(), output);
  }

  // optional int64 buildid = 8;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->buildid(), output);
  }

  // required .GC_HeroData hero = 9;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->hero(), output);
  }

  // repeated .GC_TroopData troop = 10;
  for (int i = 0; i < this->troop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->troop(i), output);
  }

  // optional int32 sceneid = 11;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MarchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  // required int32 begintime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begintime(), target);
  }

  // required int64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }

  // required int64 cityId = 4;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cityid(), target);
  }

  // required int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // required int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int64 fightid = 7;
  if (has_fightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fightid(), target);
  }

  // optional int64 buildid = 8;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->buildid(), target);
  }

  // required .GC_HeroData hero = 9;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->hero(), target);
  }

  // repeated .GC_TroopData troop = 10;
  for (int i = 0; i < this->troop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->troop(i), target);
  }

  // optional int32 sceneid = 11;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MarchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchid = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

    // required int32 begintime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

    // required int64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // required int64 cityId = 4;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cityid());
    }

    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int64 fightid = 7;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightid());
    }

    // optional int64 buildid = 8;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buildid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .GC_HeroData hero = 9;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // optional int32 sceneid = 11;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated .GC_TroopData troop = 10;
  total_size += 1 * this->troop_size();
  for (int i = 0; i < this->troop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->troop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MarchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MarchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MarchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MarchData::MergeFrom(const GC_MarchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  troop_.MergeFrom(from.troop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::GC_HeroData::MergeFrom(from.hero());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MarchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MarchData::CopyFrom(const GC_MarchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MarchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  for (int i = 0; i < troop_size(); i++) {
    if (!this->troop(i).IsInitialized()) return false;
  }
  return true;
}

void GC_MarchData::Swap(GC_MarchData* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(begintime_, other->begintime_);
    std::swap(playerid_, other->playerid_);
    std::swap(cityid_, other->cityid_);
    std::swap(status_, other->status_);
    std::swap(speed_, other->speed_);
    std::swap(fightid_, other->fightid_);
    std::swap(buildid_, other->buildid_);
    std::swap(hero_, other->hero_);
    troop_.Swap(&other->troop_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MarchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MarchData_descriptor_;
  metadata.reflection = GC_MarchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TargetMarchData::kMarchidFieldNumber;
#endif  // !_MSC_VER

GC_TargetMarchData::GC_TargetMarchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TargetMarchData::InitAsDefaultInstance() {
}

GC_TargetMarchData::GC_TargetMarchData(const GC_TargetMarchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TargetMarchData::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TargetMarchData::~GC_TargetMarchData() {
  SharedDtor();
}

void GC_TargetMarchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TargetMarchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TargetMarchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TargetMarchData_descriptor_;
}

const GC_TargetMarchData& GC_TargetMarchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_TargetMarchData* GC_TargetMarchData::default_instance_ = NULL;

GC_TargetMarchData* GC_TargetMarchData::New() const {
  return new GC_TargetMarchData;
}

void GC_TargetMarchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TargetMarchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TargetMarchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TargetMarchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchid = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TargetMarchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchid = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TargetMarchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TargetMarchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TargetMarchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TargetMarchData::MergeFrom(const GC_TargetMarchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TargetMarchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TargetMarchData::CopyFrom(const GC_TargetMarchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TargetMarchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_TargetMarchData::Swap(GC_TargetMarchData* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TargetMarchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TargetMarchData_descriptor_;
  metadata.reflection = GC_TargetMarchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CityData::kTileIdFieldNumber;
const int GC_CityData::kCityIdFieldNumber;
const int GC_CityData::kLevelFieldNumber;
const int GC_CityData::kFoodFieldNumber;
const int GC_CityData::kStoneFieldNumber;
const int GC_CityData::kIronFieldNumber;
const int GC_CityData::kBuildlistFieldNumber;
const int GC_CityData::kTrooplistFieldNumber;
#endif  // !_MSC_VER

GC_CityData::GC_CityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CityData::InitAsDefaultInstance() {
}

GC_CityData::GC_CityData(const GC_CityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CityData::SharedCtor() {
  _cached_size_ = 0;
  tileid_ = 0;
  cityid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  food_ = GOOGLE_LONGLONG(0);
  stone_ = GOOGLE_LONGLONG(0);
  iron_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CityData::~GC_CityData() {
  SharedDtor();
}

void GC_CityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CityData_descriptor_;
}

const GC_CityData& GC_CityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CityData* GC_CityData::default_instance_ = NULL;

GC_CityData* GC_CityData::New() const {
  return new GC_CityData;
}

void GC_CityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tileid_ = 0;
    cityid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    food_ = GOOGLE_LONGLONG(0);
    stone_ = GOOGLE_LONGLONG(0);
    iron_ = GOOGLE_LONGLONG(0);
  }
  buildlist_.Clear();
  trooplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // required int64 cityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_food;
        break;
      }

      // required int64 food = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stone;
        break;
      }

      // required int64 stone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stone_)));
          set_has_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iron;
        break;
      }

      // required int64 iron = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buildlist;
        break;
      }

      // repeated .GC_BuildingData buildlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buildlist;
        if (input->ExpectTag(66)) goto parse_trooplist;
        break;
      }

      // repeated .GC_TroopData trooplist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trooplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trooplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_trooplist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tileId = 1;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tileid(), output);
  }

  // required int64 cityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cityid(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int64 food = 4;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->food(), output);
  }

  // required int64 stone = 5;
  if (has_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->stone(), output);
  }

  // required int64 iron = 6;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->iron(), output);
  }

  // repeated .GC_BuildingData buildlist = 7;
  for (int i = 0; i < this->buildlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buildlist(i), output);
  }

  // repeated .GC_TroopData trooplist = 8;
  for (int i = 0; i < this->trooplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->trooplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tileId = 1;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tileid(), target);
  }

  // required int64 cityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cityid(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int64 food = 4;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->food(), target);
  }

  // required int64 stone = 5;
  if (has_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->stone(), target);
  }

  // required int64 iron = 6;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->iron(), target);
  }

  // repeated .GC_BuildingData buildlist = 7;
  for (int i = 0; i < this->buildlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buildlist(i), target);
  }

  // repeated .GC_TroopData trooplist = 8;
  for (int i = 0; i < this->trooplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->trooplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tileId = 1;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }

    // required int64 cityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cityid());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int64 food = 4;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->food());
    }

    // required int64 stone = 5;
    if (has_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stone());
    }

    // required int64 iron = 6;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iron());
    }

  }
  // repeated .GC_BuildingData buildlist = 7;
  total_size += 1 * this->buildlist_size();
  for (int i = 0; i < this->buildlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildlist(i));
  }

  // repeated .GC_TroopData trooplist = 8;
  total_size += 1 * this->trooplist_size();
  for (int i = 0; i < this->trooplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trooplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CityData::MergeFrom(const GC_CityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildlist_.MergeFrom(from.buildlist_);
  trooplist_.MergeFrom(from.trooplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_stone()) {
      set_stone(from.stone());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CityData::CopyFrom(const GC_CityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CityData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < buildlist_size(); i++) {
    if (!this->buildlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < trooplist_size(); i++) {
    if (!this->trooplist(i).IsInitialized()) return false;
  }
  return true;
}

void GC_CityData::Swap(GC_CityData* other) {
  if (other != this) {
    std::swap(tileid_, other->tileid_);
    std::swap(cityid_, other->cityid_);
    std::swap(level_, other->level_);
    std::swap(food_, other->food_);
    std::swap(stone_, other->stone_);
    std::swap(iron_, other->iron_);
    buildlist_.Swap(&other->buildlist_);
    trooplist_.Swap(&other->trooplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CityData_descriptor_;
  metadata.reflection = GC_CityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_HeroList::kHeroListFieldNumber;
#endif  // !_MSC_VER

GC_HeroList::GC_HeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_HeroList::InitAsDefaultInstance() {
}

GC_HeroList::GC_HeroList(const GC_HeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_HeroList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_HeroList::~GC_HeroList() {
  SharedDtor();
}

void GC_HeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_HeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_HeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_HeroList_descriptor_;
}

const GC_HeroList& GC_HeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_HeroList* GC_HeroList::default_instance_ = NULL;

GC_HeroList* GC_HeroList::New() const {
  return new GC_HeroList;
}

void GC_HeroList::Clear() {
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_HeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GC_HeroData heroList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_HeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GC_HeroData heroList = 1;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_HeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GC_HeroData heroList = 1;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_HeroList::ByteSize() const {
  int total_size = 0;

  // repeated .GC_HeroData heroList = 1;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_HeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_HeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_HeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_HeroList::MergeFrom(const GC_HeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_HeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_HeroList::CopyFrom(const GC_HeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_HeroList::IsInitialized() const {

  for (int i = 0; i < herolist_size(); i++) {
    if (!this->herolist(i).IsInitialized()) return false;
  }
  return true;
}

void GC_HeroList::Swap(GC_HeroList* other) {
  if (other != this) {
    herolist_.Swap(&other->herolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_HeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_HeroList_descriptor_;
  metadata.reflection = GC_HeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MarchList::kMarchlistFieldNumber;
#endif  // !_MSC_VER

GC_MarchList::GC_MarchList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MarchList::InitAsDefaultInstance() {
}

GC_MarchList::GC_MarchList(const GC_MarchList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MarchList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MarchList::~GC_MarchList() {
  SharedDtor();
}

void GC_MarchList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MarchList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MarchList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MarchList_descriptor_;
}

const GC_MarchList& GC_MarchList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MarchList* GC_MarchList::default_instance_ = NULL;

GC_MarchList* GC_MarchList::New() const {
  return new GC_MarchList;
}

void GC_MarchList::Clear() {
  marchlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MarchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GC_MarchData marchlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marchlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marchlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MarchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GC_MarchData marchlist = 1;
  for (int i = 0; i < this->marchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marchlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MarchList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GC_MarchData marchlist = 1;
  for (int i = 0; i < this->marchlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marchlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MarchList::ByteSize() const {
  int total_size = 0;

  // repeated .GC_MarchData marchlist = 1;
  total_size += 1 * this->marchlist_size();
  for (int i = 0; i < this->marchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marchlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MarchList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MarchList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MarchList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MarchList::MergeFrom(const GC_MarchList& from) {
  GOOGLE_CHECK_NE(&from, this);
  marchlist_.MergeFrom(from.marchlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MarchList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MarchList::CopyFrom(const GC_MarchList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MarchList::IsInitialized() const {

  for (int i = 0; i < marchlist_size(); i++) {
    if (!this->marchlist(i).IsInitialized()) return false;
  }
  return true;
}

void GC_MarchList::Swap(GC_MarchList* other) {
  if (other != this) {
    marchlist_.Swap(&other->marchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MarchList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MarchList_descriptor_;
  metadata.reflection = GC_MarchList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_BATTLEINFOR::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_BATTLEINFOR::CG_BATTLEINFOR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_BATTLEINFOR::InitAsDefaultInstance() {
}

CG_BATTLEINFOR::CG_BATTLEINFOR(const CG_BATTLEINFOR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_BATTLEINFOR::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_BATTLEINFOR::~CG_BATTLEINFOR() {
  SharedDtor();
}

void CG_BATTLEINFOR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_BATTLEINFOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_BATTLEINFOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_BATTLEINFOR_descriptor_;
}

const CG_BATTLEINFOR& CG_BATTLEINFOR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_BATTLEINFOR* CG_BATTLEINFOR::default_instance_ = NULL;

CG_BATTLEINFOR* CG_BATTLEINFOR::New() const {
  return new CG_BATTLEINFOR;
}

void CG_BATTLEINFOR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_BATTLEINFOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_BATTLEINFOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_BATTLEINFOR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_BATTLEINFOR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_BATTLEINFOR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_BATTLEINFOR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_BATTLEINFOR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_BATTLEINFOR::MergeFrom(const CG_BATTLEINFOR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_BATTLEINFOR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_BATTLEINFOR::CopyFrom(const CG_BATTLEINFOR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_BATTLEINFOR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_BATTLEINFOR::Swap(CG_BATTLEINFOR* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_BATTLEINFOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_BATTLEINFOR_descriptor_;
  metadata.reflection = CG_BATTLEINFOR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJINFOR::kIdFieldNumber;
const int GC_OBJINFOR::kUnitDataIdFieldNumber;
const int GC_OBJINFOR::kSkilldataidFieldNumber;
const int GC_OBJINFOR::kCampFieldNumber;
const int GC_OBJINFOR::kUnitcountFieldNumber;
const int GC_OBJINFOR::kHpFieldNumber;
const int GC_OBJINFOR::kMaxhpFieldNumber;
const int GC_OBJINFOR::kAttackFieldNumber;
const int GC_OBJINFOR::kDefenceFieldNumber;
const int GC_OBJINFOR::kSpFieldNumber;
const int GC_OBJINFOR::kLevelFieldNumber;
const int GC_OBJINFOR::kPosxFieldNumber;
const int GC_OBJINFOR::kPoszFieldNumber;
const int GC_OBJINFOR::kArrangeindexFieldNumber;
#endif  // !_MSC_VER

GC_OBJINFOR::GC_OBJINFOR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJINFOR::InitAsDefaultInstance() {
}

GC_OBJINFOR::GC_OBJINFOR(const GC_OBJINFOR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJINFOR::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  unitdataid_ = 0;
  camp_ = 0;
  unitcount_ = 0;
  hp_ = 0;
  maxhp_ = 0;
  attack_ = 0;
  defence_ = 0;
  sp_ = 0;
  level_ = 0;
  posx_ = 0;
  posz_ = 0;
  arrangeindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJINFOR::~GC_OBJINFOR() {
  SharedDtor();
}

void GC_OBJINFOR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJINFOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJINFOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJINFOR_descriptor_;
}

const GC_OBJINFOR& GC_OBJINFOR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJINFOR* GC_OBJINFOR::default_instance_ = NULL;

GC_OBJINFOR* GC_OBJINFOR::New() const {
  return new GC_OBJINFOR;
}

void GC_OBJINFOR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    unitdataid_ = 0;
    camp_ = 0;
    unitcount_ = 0;
    hp_ = 0;
    maxhp_ = 0;
    attack_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defence_ = 0;
    sp_ = 0;
    level_ = 0;
    posx_ = 0;
    posz_ = 0;
    arrangeindex_ = 0;
  }
  skilldataid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJINFOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitDataId;
        break;
      }

      // required int32 unitDataId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitDataId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitdataid_)));
          set_has_unitdataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilldataid;
        break;
      }

      // repeated int32 skilldataid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilldataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skilldataid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilldataid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilldataid;
        if (input->ExpectTag(32)) goto parse_camp;
        break;
      }

      // required int32 camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitcount;
        break;
      }

      // required int32 unitcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitcount_)));
          set_has_unitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // required int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxhp;
        break;
      }

      // required int32 maxhp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attack;
        break;
      }

      // required int32 attack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defence;
        break;
      }

      // required int32 defence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sp;
        break;
      }

      // required int32 sp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // required int32 level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_posx;
        break;
      }

      // required int32 posx = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_posz;
        break;
      }

      // required int32 posz = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_arrangeindex;
        break;
      }

      // required int32 arrangeindex = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangeindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrangeindex_)));
          set_has_arrangeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJINFOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 unitDataId = 2;
  if (has_unitdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unitdataid(), output);
  }

  // repeated int32 skilldataid = 3;
  for (int i = 0; i < this->skilldataid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skilldataid(i), output);
  }

  // required int32 camp = 4;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp(), output);
  }

  // required int32 unitcount = 5;
  if (has_unitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unitcount(), output);
  }

  // required int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // required int32 maxhp = 7;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxhp(), output);
  }

  // required int32 attack = 8;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attack(), output);
  }

  // required int32 defence = 9;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defence(), output);
  }

  // required int32 sp = 10;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sp(), output);
  }

  // required int32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  // required int32 posx = 12;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->posx(), output);
  }

  // required int32 posz = 13;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->posz(), output);
  }

  // required int32 arrangeindex = 14;
  if (has_arrangeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->arrangeindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJINFOR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 unitDataId = 2;
  if (has_unitdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unitdataid(), target);
  }

  // repeated int32 skilldataid = 3;
  for (int i = 0; i < this->skilldataid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skilldataid(i), target);
  }

  // required int32 camp = 4;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp(), target);
  }

  // required int32 unitcount = 5;
  if (has_unitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unitcount(), target);
  }

  // required int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // required int32 maxhp = 7;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxhp(), target);
  }

  // required int32 attack = 8;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attack(), target);
  }

  // required int32 defence = 9;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defence(), target);
  }

  // required int32 sp = 10;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sp(), target);
  }

  // required int32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  // required int32 posx = 12;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->posx(), target);
  }

  // required int32 posz = 13;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->posz(), target);
  }

  // required int32 arrangeindex = 14;
  if (has_arrangeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->arrangeindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJINFOR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 unitDataId = 2;
    if (has_unitdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitdataid());
    }

    // required int32 camp = 4;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // required int32 unitcount = 5;
    if (has_unitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitcount());
    }

    // required int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 maxhp = 7;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // required int32 attack = 8;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 defence = 9;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

    // required int32 sp = 10;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

    // required int32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 posx = 12;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posz = 13;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 arrangeindex = 14;
    if (has_arrangeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrangeindex());
    }

  }
  // repeated int32 skilldataid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilldataid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilldataid(i));
    }
    total_size += 1 * this->skilldataid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJINFOR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJINFOR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJINFOR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJINFOR::MergeFrom(const GC_OBJINFOR& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldataid_.MergeFrom(from.skilldataid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unitdataid()) {
      set_unitdataid(from.unitdataid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_unitcount()) {
      set_unitcount(from.unitcount());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_arrangeindex()) {
      set_arrangeindex(from.arrangeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJINFOR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJINFOR::CopyFrom(const GC_OBJINFOR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJINFOR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003ffb) != 0x00003ffb) return false;

  return true;
}

void GC_OBJINFOR::Swap(GC_OBJINFOR* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unitdataid_, other->unitdataid_);
    skilldataid_.Swap(&other->skilldataid_);
    std::swap(camp_, other->camp_);
    std::swap(unitcount_, other->unitcount_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(sp_, other->sp_);
    std::swap(level_, other->level_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(arrangeindex_, other->arrangeindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJINFOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJINFOR_descriptor_;
  metadata.reflection = GC_OBJINFOR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_BATTLEINFOR::kSceneIdFieldNumber;
const int GC_BATTLEINFOR::kObjListFieldNumber;
#endif  // !_MSC_VER

GC_BATTLEINFOR::GC_BATTLEINFOR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_BATTLEINFOR::InitAsDefaultInstance() {
}

GC_BATTLEINFOR::GC_BATTLEINFOR(const GC_BATTLEINFOR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_BATTLEINFOR::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_BATTLEINFOR::~GC_BATTLEINFOR() {
  SharedDtor();
}

void GC_BATTLEINFOR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_BATTLEINFOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_BATTLEINFOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_BATTLEINFOR_descriptor_;
}

const GC_BATTLEINFOR& GC_BATTLEINFOR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_BATTLEINFOR* GC_BATTLEINFOR::default_instance_ = NULL;

GC_BATTLEINFOR* GC_BATTLEINFOR::New() const {
  return new GC_BATTLEINFOR;
}

void GC_BATTLEINFOR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
  }
  objlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_BATTLEINFOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objList;
        break;
      }

      // repeated .GC_OBJINFOR objList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_BATTLEINFOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // repeated .GC_OBJINFOR objList = 2;
  for (int i = 0; i < this->objlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_BATTLEINFOR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // repeated .GC_OBJINFOR objList = 2;
  for (int i = 0; i < this->objlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_BATTLEINFOR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated .GC_OBJINFOR objList = 2;
  total_size += 1 * this->objlist_size();
  for (int i = 0; i < this->objlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_BATTLEINFOR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_BATTLEINFOR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_BATTLEINFOR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_BATTLEINFOR::MergeFrom(const GC_BATTLEINFOR& from) {
  GOOGLE_CHECK_NE(&from, this);
  objlist_.MergeFrom(from.objlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_BATTLEINFOR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_BATTLEINFOR::CopyFrom(const GC_BATTLEINFOR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_BATTLEINFOR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < objlist_size(); i++) {
    if (!this->objlist(i).IsInitialized()) return false;
  }
  return true;
}

void GC_BATTLEINFOR::Swap(GC_BATTLEINFOR* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    objlist_.Swap(&other->objlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_BATTLEINFOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_BATTLEINFOR_descriptor_;
  metadata.reflection = GC_BATTLEINFOR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJPOS::kObjIdFieldNumber;
const int GC_OBJPOS::kPosXFieldNumber;
const int GC_OBJPOS::kPosZFieldNumber;
const int GC_OBJPOS::kHpFieldNumber;
const int GC_OBJPOS::kTargetIdFieldNumber;
const int GC_OBJPOS::kObjStateFieldNumber;
#endif  // !_MSC_VER

GC_OBJPOS::GC_OBJPOS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJPOS::InitAsDefaultInstance() {
}

GC_OBJPOS::GC_OBJPOS(const GC_OBJPOS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJPOS::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  posx_ = 0;
  posz_ = 0;
  hp_ = 0;
  targetid_ = 0;
  objstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJPOS::~GC_OBJPOS() {
  SharedDtor();
}

void GC_OBJPOS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJPOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJPOS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJPOS_descriptor_;
}

const GC_OBJPOS& GC_OBJPOS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJPOS* GC_OBJPOS::default_instance_ = NULL;

GC_OBJPOS* GC_OBJPOS::New() const {
  return new GC_OBJPOS;
}

void GC_OBJPOS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    posx_ = 0;
    posz_ = 0;
    hp_ = 0;
    targetid_ = 0;
    objstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJPOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posX;
        break;
      }

      // required int32 posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetId;
        break;
      }

      // required int32 targetId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objState;
        break;
      }

      // required int32 objState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objstate_)));
          set_has_objstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJPOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // required int32 posZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posz(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 targetId = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetid(), output);
  }

  // required int32 objState = 6;
  if (has_objstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->objstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJPOS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // required int32 posZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posz(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 targetId = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetid(), target);
  }

  // required int32 objState = 6;
  if (has_objstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->objstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJPOS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 posX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 3;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 targetId = 5;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required int32 objState = 6;
    if (has_objstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJPOS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJPOS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJPOS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJPOS::MergeFrom(const GC_OBJPOS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_objstate()) {
      set_objstate(from.objstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJPOS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJPOS::CopyFrom(const GC_OBJPOS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJPOS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_OBJPOS::Swap(GC_OBJPOS* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(hp_, other->hp_);
    std::swap(targetid_, other->targetid_);
    std::swap(objstate_, other->objstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJPOS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJPOS_descriptor_;
  metadata.reflection = GC_OBJPOS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJPOSLIST::kSceneIdFieldNumber;
const int GC_OBJPOSLIST::kObjPosListFieldNumber;
#endif  // !_MSC_VER

GC_OBJPOSLIST::GC_OBJPOSLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJPOSLIST::InitAsDefaultInstance() {
}

GC_OBJPOSLIST::GC_OBJPOSLIST(const GC_OBJPOSLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJPOSLIST::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJPOSLIST::~GC_OBJPOSLIST() {
  SharedDtor();
}

void GC_OBJPOSLIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJPOSLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJPOSLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJPOSLIST_descriptor_;
}

const GC_OBJPOSLIST& GC_OBJPOSLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJPOSLIST* GC_OBJPOSLIST::default_instance_ = NULL;

GC_OBJPOSLIST* GC_OBJPOSLIST::New() const {
  return new GC_OBJPOSLIST;
}

void GC_OBJPOSLIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
  }
  objposlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJPOSLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objPosList;
        break;
      }

      // repeated .GC_OBJPOS objPosList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objPosList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objposlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objPosList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJPOSLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // repeated .GC_OBJPOS objPosList = 2;
  for (int i = 0; i < this->objposlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objposlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJPOSLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // repeated .GC_OBJPOS objPosList = 2;
  for (int i = 0; i < this->objposlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objposlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJPOSLIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated .GC_OBJPOS objPosList = 2;
  total_size += 1 * this->objposlist_size();
  for (int i = 0; i < this->objposlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objposlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJPOSLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJPOSLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJPOSLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJPOSLIST::MergeFrom(const GC_OBJPOSLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  objposlist_.MergeFrom(from.objposlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJPOSLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJPOSLIST::CopyFrom(const GC_OBJPOSLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJPOSLIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < objposlist_size(); i++) {
    if (!this->objposlist(i).IsInitialized()) return false;
  }
  return true;
}

void GC_OBJPOSLIST::Swap(GC_OBJPOSLIST* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    objposlist_.Swap(&other->objposlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJPOSLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJPOSLIST_descriptor_;
  metadata.reflection = GC_OBJPOSLIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_OBJPOSLIST::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CG_OBJPOSLIST::CG_OBJPOSLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_OBJPOSLIST::InitAsDefaultInstance() {
}

CG_OBJPOSLIST::CG_OBJPOSLIST(const CG_OBJPOSLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_OBJPOSLIST::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_OBJPOSLIST::~CG_OBJPOSLIST() {
  SharedDtor();
}

void CG_OBJPOSLIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_OBJPOSLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_OBJPOSLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_OBJPOSLIST_descriptor_;
}

const CG_OBJPOSLIST& CG_OBJPOSLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_OBJPOSLIST* CG_OBJPOSLIST::default_instance_ = NULL;

CG_OBJPOSLIST* CG_OBJPOSLIST::New() const {
  return new CG_OBJPOSLIST;
}

void CG_OBJPOSLIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_OBJPOSLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_OBJPOSLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_OBJPOSLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_OBJPOSLIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_OBJPOSLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_OBJPOSLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_OBJPOSLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_OBJPOSLIST::MergeFrom(const CG_OBJPOSLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_OBJPOSLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_OBJPOSLIST::CopyFrom(const CG_OBJPOSLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_OBJPOSLIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_OBJPOSLIST::Swap(CG_OBJPOSLIST* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_OBJPOSLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_OBJPOSLIST_descriptor_;
  metadata.reflection = CG_OBJPOSLIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJCOMMANDPURSUE::kSceneIdFieldNumber;
const int GC_OBJCOMMANDPURSUE::kObjIdFieldNumber;
const int GC_OBJCOMMANDPURSUE::kAimObjIdFieldNumber;
#endif  // !_MSC_VER

GC_OBJCOMMANDPURSUE::GC_OBJCOMMANDPURSUE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJCOMMANDPURSUE::InitAsDefaultInstance() {
}

GC_OBJCOMMANDPURSUE::GC_OBJCOMMANDPURSUE(const GC_OBJCOMMANDPURSUE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJCOMMANDPURSUE::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  objid_ = 0;
  aimobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJCOMMANDPURSUE::~GC_OBJCOMMANDPURSUE() {
  SharedDtor();
}

void GC_OBJCOMMANDPURSUE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJCOMMANDPURSUE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJCOMMANDPURSUE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJCOMMANDPURSUE_descriptor_;
}

const GC_OBJCOMMANDPURSUE& GC_OBJCOMMANDPURSUE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJCOMMANDPURSUE* GC_OBJCOMMANDPURSUE::default_instance_ = NULL;

GC_OBJCOMMANDPURSUE* GC_OBJCOMMANDPURSUE::New() const {
  return new GC_OBJCOMMANDPURSUE;
}

void GC_OBJCOMMANDPURSUE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    objid_ = 0;
    aimobjid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJCOMMANDPURSUE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // required int32 objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aimObjId;
        break;
      }

      // required int32 aimObjId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aimObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aimobjid_)));
          set_has_aimobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJCOMMANDPURSUE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // required int32 aimObjId = 3;
  if (has_aimobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aimobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJCOMMANDPURSUE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // required int32 aimObjId = 3;
  if (has_aimobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aimobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJCOMMANDPURSUE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 aimObjId = 3;
    if (has_aimobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aimobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJCOMMANDPURSUE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJCOMMANDPURSUE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJCOMMANDPURSUE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJCOMMANDPURSUE::MergeFrom(const GC_OBJCOMMANDPURSUE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_aimobjid()) {
      set_aimobjid(from.aimobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJCOMMANDPURSUE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJCOMMANDPURSUE::CopyFrom(const GC_OBJCOMMANDPURSUE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJCOMMANDPURSUE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_OBJCOMMANDPURSUE::Swap(GC_OBJCOMMANDPURSUE* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(objid_, other->objid_);
    std::swap(aimobjid_, other->aimobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJCOMMANDPURSUE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJCOMMANDPURSUE_descriptor_;
  metadata.reflection = GC_OBJCOMMANDPURSUE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJPREPAREFORATTACK::kSceneIdFieldNumber;
const int GC_OBJPREPAREFORATTACK::kObjIdFieldNumber;
const int GC_OBJPREPAREFORATTACK::kAimObjIdFieldNumber;
#endif  // !_MSC_VER

GC_OBJPREPAREFORATTACK::GC_OBJPREPAREFORATTACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJPREPAREFORATTACK::InitAsDefaultInstance() {
}

GC_OBJPREPAREFORATTACK::GC_OBJPREPAREFORATTACK(const GC_OBJPREPAREFORATTACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJPREPAREFORATTACK::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  objid_ = 0;
  aimobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJPREPAREFORATTACK::~GC_OBJPREPAREFORATTACK() {
  SharedDtor();
}

void GC_OBJPREPAREFORATTACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJPREPAREFORATTACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJPREPAREFORATTACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJPREPAREFORATTACK_descriptor_;
}

const GC_OBJPREPAREFORATTACK& GC_OBJPREPAREFORATTACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJPREPAREFORATTACK* GC_OBJPREPAREFORATTACK::default_instance_ = NULL;

GC_OBJPREPAREFORATTACK* GC_OBJPREPAREFORATTACK::New() const {
  return new GC_OBJPREPAREFORATTACK;
}

void GC_OBJPREPAREFORATTACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    objid_ = 0;
    aimobjid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJPREPAREFORATTACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // required int32 objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aimObjId;
        break;
      }

      // required int32 aimObjId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aimObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aimobjid_)));
          set_has_aimobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJPREPAREFORATTACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // required int32 aimObjId = 3;
  if (has_aimobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aimobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJPREPAREFORATTACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // required int32 aimObjId = 3;
  if (has_aimobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aimobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJPREPAREFORATTACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 aimObjId = 3;
    if (has_aimobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aimobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJPREPAREFORATTACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJPREPAREFORATTACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJPREPAREFORATTACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJPREPAREFORATTACK::MergeFrom(const GC_OBJPREPAREFORATTACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_aimobjid()) {
      set_aimobjid(from.aimobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJPREPAREFORATTACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJPREPAREFORATTACK::CopyFrom(const GC_OBJPREPAREFORATTACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJPREPAREFORATTACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_OBJPREPAREFORATTACK::Swap(GC_OBJPREPAREFORATTACK* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(objid_, other->objid_);
    std::swap(aimobjid_, other->aimobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJPREPAREFORATTACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJPREPAREFORATTACK_descriptor_;
  metadata.reflection = GC_OBJPREPAREFORATTACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OBJGETHURT::kSceneIdFieldNumber;
const int GC_OBJGETHURT::kObjIdFieldNumber;
const int GC_OBJGETHURT::kAttackObjIdFieldNumber;
const int GC_OBJGETHURT::kDamageFieldNumber;
const int GC_OBJGETHURT::kObjDeadFieldNumber;
const int GC_OBJGETHURT::kDeathNumberFieldNumber;
#endif  // !_MSC_VER

GC_OBJGETHURT::GC_OBJGETHURT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OBJGETHURT::InitAsDefaultInstance() {
}

GC_OBJGETHURT::GC_OBJGETHURT(const GC_OBJGETHURT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OBJGETHURT::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  objid_ = 0;
  attackobjid_ = 0;
  damage_ = 0;
  objdead_ = 0;
  deathnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OBJGETHURT::~GC_OBJGETHURT() {
  SharedDtor();
}

void GC_OBJGETHURT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_OBJGETHURT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OBJGETHURT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OBJGETHURT_descriptor_;
}

const GC_OBJGETHURT& GC_OBJGETHURT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_OBJGETHURT* GC_OBJGETHURT::default_instance_ = NULL;

GC_OBJGETHURT* GC_OBJGETHURT::New() const {
  return new GC_OBJGETHURT;
}

void GC_OBJGETHURT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    objid_ = 0;
    attackobjid_ = 0;
    damage_ = 0;
    objdead_ = 0;
    deathnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OBJGETHURT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // required int32 objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackObjId;
        break;
      }

      // required int32 attackObjId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackobjid_)));
          set_has_attackobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // required int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_objDead;
        break;
      }

      // required int32 objDead = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objdead_)));
          set_has_objdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deathNumber;
        break;
      }

      // required int32 deathNumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deathNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deathnumber_)));
          set_has_deathnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OBJGETHURT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // required int32 attackObjId = 3;
  if (has_attackobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attackobjid(), output);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  // required int32 objDead = 5;
  if (has_objdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objdead(), output);
  }

  // required int32 deathNumber = 6;
  if (has_deathnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deathnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OBJGETHURT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // required int32 attackObjId = 3;
  if (has_attackobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attackobjid(), target);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  // required int32 objDead = 5;
  if (has_objdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objdead(), target);
  }

  // required int32 deathNumber = 6;
  if (has_deathnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deathnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OBJGETHURT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 attackObjId = 3;
    if (has_attackobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackobjid());
    }

    // required int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 objDead = 5;
    if (has_objdead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objdead());
    }

    // required int32 deathNumber = 6;
    if (has_deathnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deathnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OBJGETHURT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OBJGETHURT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OBJGETHURT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OBJGETHURT::MergeFrom(const GC_OBJGETHURT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_attackobjid()) {
      set_attackobjid(from.attackobjid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_objdead()) {
      set_objdead(from.objdead());
    }
    if (from.has_deathnumber()) {
      set_deathnumber(from.deathnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OBJGETHURT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OBJGETHURT::CopyFrom(const GC_OBJGETHURT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OBJGETHURT::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_OBJGETHURT::Swap(GC_OBJGETHURT* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(objid_, other->objid_);
    std::swap(attackobjid_, other->attackobjid_);
    std::swap(damage_, other->damage_);
    std::swap(objdead_, other->objdead_);
    std::swap(deathnumber_, other->deathnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OBJGETHURT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OBJGETHURT_descriptor_;
  metadata.reflection = GC_OBJGETHURT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_Building_LevelUp::kBuildingIDFieldNumber;
#endif  // !_MSC_VER

CG_Building_LevelUp::CG_Building_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_Building_LevelUp::InitAsDefaultInstance() {
}

CG_Building_LevelUp::CG_Building_LevelUp(const CG_Building_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_Building_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_Building_LevelUp::~CG_Building_LevelUp() {
  SharedDtor();
}

void CG_Building_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_Building_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_Building_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_Building_LevelUp_descriptor_;
}

const CG_Building_LevelUp& CG_Building_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_Building_LevelUp* CG_Building_LevelUp::default_instance_ = NULL;

CG_Building_LevelUp* CG_Building_LevelUp::New() const {
  return new CG_Building_LevelUp;
}

void CG_Building_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_Building_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buildingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_Building_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buildingID = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buildingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_Building_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buildingID = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buildingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_Building_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buildingID = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buildingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_Building_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_Building_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_Building_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_Building_LevelUp::MergeFrom(const CG_Building_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_Building_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_Building_LevelUp::CopyFrom(const CG_Building_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_Building_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_Building_LevelUp::Swap(CG_Building_LevelUp* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_Building_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_Building_LevelUp_descriptor_;
  metadata.reflection = CG_Building_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_Building_LevelUp::kBuildingIDFieldNumber;
const int GC_Building_LevelUp::kLevelFieldNumber;
const int GC_Building_LevelUp::kRetFieldNumber;
#endif  // !_MSC_VER

GC_Building_LevelUp::GC_Building_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_Building_LevelUp::InitAsDefaultInstance() {
}

GC_Building_LevelUp::GC_Building_LevelUp(const GC_Building_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_Building_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  buildingid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_Building_LevelUp::~GC_Building_LevelUp() {
  SharedDtor();
}

void GC_Building_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_Building_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_Building_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_Building_LevelUp_descriptor_;
}

const GC_Building_LevelUp& GC_Building_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_Building_LevelUp* GC_Building_LevelUp::default_instance_ = NULL;

GC_Building_LevelUp* GC_Building_LevelUp::New() const {
  return new GC_Building_LevelUp;
}

void GC_Building_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_Building_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buildingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_Building_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buildingID = 1;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buildingid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_Building_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buildingID = 1;
  if (has_buildingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buildingid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_Building_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buildingID = 1;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buildingid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_Building_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_Building_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_Building_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_Building_LevelUp::MergeFrom(const GC_Building_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_Building_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_Building_LevelUp::CopyFrom(const GC_Building_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_Building_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_Building_LevelUp::Swap(GC_Building_LevelUp* other) {
  if (other != this) {
    std::swap(buildingid_, other->buildingid_);
    std::swap(level_, other->level_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_Building_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_Building_LevelUp_descriptor_;
  metadata.reflection = GC_Building_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_Update_March::kDataFieldNumber;
#endif  // !_MSC_VER

GC_Update_March::GC_Update_March()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_Update_March::InitAsDefaultInstance() {
  data_ = const_cast< ::GC_MarchData*>(&::GC_MarchData::default_instance());
}

GC_Update_March::GC_Update_March(const GC_Update_March& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_Update_March::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_Update_March::~GC_Update_March() {
  SharedDtor();
}

void GC_Update_March::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GC_Update_March::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_Update_March::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_Update_March_descriptor_;
}

const GC_Update_March& GC_Update_March::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_Update_March* GC_Update_March::default_instance_ = NULL;

GC_Update_March* GC_Update_March::New() const {
  return new GC_Update_March;
}

void GC_Update_March::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::GC_MarchData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_Update_March::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GC_MarchData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_Update_March::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GC_MarchData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_Update_March::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GC_MarchData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_Update_March::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GC_MarchData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_Update_March::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_Update_March* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_Update_March*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_Update_March::MergeFrom(const GC_Update_March& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::GC_MarchData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_Update_March::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_Update_March::CopyFrom(const GC_Update_March& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_Update_March::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GC_Update_March::Swap(GC_Update_March* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_Update_March::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_Update_March_descriptor_;
  metadata.reflection = GC_Update_March_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
