// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CG_LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_LOGIN_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_LOGIN_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_LOGIN_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_REQ_NEAR_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_REQ_NEAR_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_NEAR_MARCHLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_NEAR_MARCHLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CHAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CHAT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_CHAT_CHATTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_CHAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CHAT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_CHAT_CHATTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_NOTICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_NOTICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_SCENE_INSTACTIVATION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_SCENE_INSTACTIVATION_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TELEMOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TELEMOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_RET_USE_SKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RET_USE_SKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_ANIMATION_STATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_ANIMATION_STATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DELETE_OBJ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DELETE_OBJ_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ATTACKFLY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ATTACKFLY_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_FORCE_SETPOS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_FORCE_SETPOS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_UPDATE_NEEDIMPACTINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_UPDATE_NEEDIMPACTINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PLAY_EFFECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PLAY_EFFECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_REMOVEEFFECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_REMOVEEFFECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_FIGHT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_FIGHT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_LEAVE_COPYSCENE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_LEAVE_COPYSCENE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMessage_2eproto() {
  protobuf_AddDesc_PBMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CG_LOGIN_descriptor_ = file->message_type(0);
  static const int CG_LOGIN_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, programversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, publicresourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, maxpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, forceenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, validateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, mediachannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, rapidvalidatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring4_),
  };
  CG_LOGIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_LOGIN_descriptor_,
      CG_LOGIN::default_instance_,
      CG_LOGIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_LOGIN));
  CG_LOGIN_VALIDATETYPE_descriptor_ = CG_LOGIN_descriptor_->enum_type(0);
  GC_LOGIN_RET_descriptor_ = file->message_type(1);
  static const int GC_LOGIN_RET_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, validateresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, rapidvalidatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, roleguidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, roletypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, playernamelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, rolelevellist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, modelvisualid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, weaponeffectgem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, huanhuaweaponmodel_),
  };
  GC_LOGIN_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_LOGIN_RET_descriptor_,
      GC_LOGIN_RET::default_instance_,
      GC_LOGIN_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_LOGIN_RET));
  GC_LOGIN_RET_LOGINRESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(0);
  GC_LOGIN_RET_VALIDATERESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(1);
  CG_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(2);
  static const int CG_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, isresponse_),
  };
  CG_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CONNECTED_HEARTBEAT_descriptor_,
      CG_CONNECTED_HEARTBEAT::default_instance_,
      CG_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CONNECTED_HEARTBEAT));
  GC_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(3);
  static const int GC_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, serveransitime_),
  };
  GC_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CONNECTED_HEARTBEAT_descriptor_,
      GC_CONNECTED_HEARTBEAT::default_instance_,
      GC_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CONNECTED_HEARTBEAT));
  CG_REQ_NEAR_LIST_descriptor_ = file->message_type(4);
  static const int CG_REQ_NEAR_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, marchid_),
  };
  CG_REQ_NEAR_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_REQ_NEAR_LIST_descriptor_,
      CG_REQ_NEAR_LIST::default_instance_,
      CG_REQ_NEAR_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_NEAR_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_REQ_NEAR_LIST));
  GC_NEAR_MARCHLIST_descriptor_ = file->message_type(5);
  static const int GC_NEAR_MARCHLIST_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, combatnum_),
  };
  GC_NEAR_MARCHLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_NEAR_MARCHLIST_descriptor_,
      GC_NEAR_MARCHLIST::default_instance_,
      GC_NEAR_MARCHLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NEAR_MARCHLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_NEAR_MARCHLIST));
  CG_CHAT_descriptor_ = file->message_type(6);
  static const int CG_CHAT_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receiverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, receiverlevel_),
  };
  CG_CHAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CHAT_descriptor_,
      CG_CHAT::default_instance_,
      CG_CHAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CHAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CHAT));
  CG_CHAT_CHATTYPE_descriptor_ = CG_CHAT_descriptor_->enum_type(0);
  GC_CHAT_descriptor_ = file->message_type(7);
  static const int GC_CHAT_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, senderguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, senderlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, receiverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, receivername_),
  };
  GC_CHAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CHAT_descriptor_,
      GC_CHAT::default_instance_,
      GC_CHAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CHAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CHAT));
  GC_CHAT_CHATTYPE_descriptor_ = GC_CHAT_descriptor_->enum_type(0);
  GC_NOTICE_descriptor_ = file->message_type(8);
  static const int GC_NOTICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, filterrepeat_),
  };
  GC_NOTICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_NOTICE_descriptor_,
      GC_NOTICE::default_instance_,
      GC_NOTICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_NOTICE));
  GC_UPDATE_SCENE_INSTACTIVATION_descriptor_ = file->message_type(9);
  static const int GC_UPDATE_SCENE_INSTACTIVATION_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneclassid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneinstcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, sceneactivation_),
  };
  GC_UPDATE_SCENE_INSTACTIVATION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_SCENE_INSTACTIVATION_descriptor_,
      GC_UPDATE_SCENE_INSTACTIVATION::default_instance_,
      GC_UPDATE_SCENE_INSTACTIVATION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_SCENE_INSTACTIVATION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_SCENE_INSTACTIVATION));
  GS_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(10);
  static const int GS_CONNECTED_HEARTBEAT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CONNECTED_HEARTBEAT, senderworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CONNECTED_HEARTBEAT, receiverworldid_),
  };
  GS_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS_CONNECTED_HEARTBEAT_descriptor_,
      GS_CONNECTED_HEARTBEAT::default_instance_,
      GS_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS_CONNECTED_HEARTBEAT));
  SG_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(11);
  static const int SG_CONNECTED_HEARTBEAT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_CONNECTED_HEARTBEAT, senderworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_CONNECTED_HEARTBEAT, receiverworldid_),
  };
  SG_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG_CONNECTED_HEARTBEAT_descriptor_,
      SG_CONNECTED_HEARTBEAT::default_instance_,
      SG_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG_CONNECTED_HEARTBEAT));
  CG_MOVE_descriptor_ = file->message_type(12);
  static const int CG_MOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, ismoving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, marchid_),
  };
  CG_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_MOVE_descriptor_,
      CG_MOVE::default_instance_,
      CG_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_MOVE));
  GC_MOVE_descriptor_ = file->message_type(13);
  static const int GC_MOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posz_),
  };
  GC_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MOVE_descriptor_,
      GC_MOVE::default_instance_,
      GC_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MOVE));
  GC_STOP_descriptor_ = file->message_type(14);
  static const int GC_STOP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posz_),
  };
  GC_STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_STOP_descriptor_,
      GC_STOP::default_instance_,
      GC_STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_STOP));
  GC_TELEMOVE_descriptor_ = file->message_type(15);
  static const int GC_TELEMOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, targetposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, targetposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, needchangefaceto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, animaid_),
  };
  GC_TELEMOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TELEMOVE_descriptor_,
      GC_TELEMOVE::default_instance_,
      GC_TELEMOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TELEMOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TELEMOVE));
  GC_RET_USE_SKILL_descriptor_ = file->message_type(16);
  static const int GC_RET_USE_SKILL_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillfailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, skillname_),
  };
  GC_RET_USE_SKILL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RET_USE_SKILL_descriptor_,
      GC_RET_USE_SKILL::default_instance_,
      GC_RET_USE_SKILL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_USE_SKILL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RET_USE_SKILL));
  GC_UPDATE_ANIMATION_STATE_descriptor_ = file->message_type(17);
  static const int GC_UPDATE_ANIMATION_STATE_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, animationstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, verticaloffdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, horizontaloffdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, statelasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, stateresorttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, hittimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, hitinterval_),
  };
  GC_UPDATE_ANIMATION_STATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_ANIMATION_STATE_descriptor_,
      GC_UPDATE_ANIMATION_STATE::default_instance_,
      GC_UPDATE_ANIMATION_STATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_ANIMATION_STATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_ANIMATION_STATE));
  GC_DELETE_OBJ_descriptor_ = file->message_type(18);
  static const int GC_DELETE_OBJ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, serverid_),
  };
  GC_DELETE_OBJ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DELETE_OBJ_descriptor_,
      GC_DELETE_OBJ::default_instance_,
      GC_DELETE_OBJ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DELETE_OBJ));
  GC_ATTACKFLY_descriptor_ = file->message_type(19);
  static const int GC_ATTACKFLY_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, flytime_),
  };
  GC_ATTACKFLY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ATTACKFLY_descriptor_,
      GC_ATTACKFLY::default_instance_,
      GC_ATTACKFLY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ATTACKFLY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ATTACKFLY));
  GC_FORCE_SETPOS_descriptor_ = file->message_type(20);
  static const int GC_FORCE_SETPOS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, posz_),
  };
  GC_FORCE_SETPOS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_FORCE_SETPOS_descriptor_,
      GC_FORCE_SETPOS::default_instance_,
      GC_FORCE_SETPOS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FORCE_SETPOS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_FORCE_SETPOS));
  GC_UPDATE_NEEDIMPACTINFO_descriptor_ = file->message_type(21);
  static const int GC_UPDATE_NEEDIMPACTINFO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, impactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, impactlogicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, isforever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, isadd_),
  };
  GC_UPDATE_NEEDIMPACTINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_UPDATE_NEEDIMPACTINFO_descriptor_,
      GC_UPDATE_NEEDIMPACTINFO::default_instance_,
      GC_UPDATE_NEEDIMPACTINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_UPDATE_NEEDIMPACTINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_UPDATE_NEEDIMPACTINFO));
  GC_PLAY_EFFECT_descriptor_ = file->message_type(22);
  static const int GC_PLAY_EFFECT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, effectid_),
  };
  GC_PLAY_EFFECT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PLAY_EFFECT_descriptor_,
      GC_PLAY_EFFECT::default_instance_,
      GC_PLAY_EFFECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PLAY_EFFECT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PLAY_EFFECT));
  GC_REMOVEEFFECT_descriptor_ = file->message_type(23);
  static const int GC_REMOVEEFFECT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, effectid_),
  };
  GC_REMOVEEFFECT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_REMOVEEFFECT_descriptor_,
      GC_REMOVEEFFECT::default_instance_,
      GC_REMOVEEFFECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_REMOVEEFFECT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_REMOVEEFFECT));
  CG_FIGHT_descriptor_ = file->message_type(24);
  static const int CG_FIGHT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, defenceid_),
  };
  CG_FIGHT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_FIGHT_descriptor_,
      CG_FIGHT::default_instance_,
      CG_FIGHT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_FIGHT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_FIGHT));
  CG_LEAVE_COPYSCENE_descriptor_ = file->message_type(25);
  static const int CG_LEAVE_COPYSCENE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, noparam_),
  };
  CG_LEAVE_COPYSCENE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_LEAVE_COPYSCENE_descriptor_,
      CG_LEAVE_COPYSCENE::default_instance_,
      CG_LEAVE_COPYSCENE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LEAVE_COPYSCENE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_LEAVE_COPYSCENE));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_LOGIN_descriptor_, &CG_LOGIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_LOGIN_RET_descriptor_, &GC_LOGIN_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CONNECTED_HEARTBEAT_descriptor_, &CG_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CONNECTED_HEARTBEAT_descriptor_, &GC_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_REQ_NEAR_LIST_descriptor_, &CG_REQ_NEAR_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_NEAR_MARCHLIST_descriptor_, &GC_NEAR_MARCHLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CHAT_descriptor_, &CG_CHAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CHAT_descriptor_, &GC_CHAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_NOTICE_descriptor_, &GC_NOTICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_SCENE_INSTACTIVATION_descriptor_, &GC_UPDATE_SCENE_INSTACTIVATION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS_CONNECTED_HEARTBEAT_descriptor_, &GS_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG_CONNECTED_HEARTBEAT_descriptor_, &SG_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_MOVE_descriptor_, &CG_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MOVE_descriptor_, &GC_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_STOP_descriptor_, &GC_STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TELEMOVE_descriptor_, &GC_TELEMOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RET_USE_SKILL_descriptor_, &GC_RET_USE_SKILL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_ANIMATION_STATE_descriptor_, &GC_UPDATE_ANIMATION_STATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DELETE_OBJ_descriptor_, &GC_DELETE_OBJ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ATTACKFLY_descriptor_, &GC_ATTACKFLY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_FORCE_SETPOS_descriptor_, &GC_FORCE_SETPOS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_UPDATE_NEEDIMPACTINFO_descriptor_, &GC_UPDATE_NEEDIMPACTINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PLAY_EFFECT_descriptor_, &GC_PLAY_EFFECT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_REMOVEEFFECT_descriptor_, &GC_REMOVEEFFECT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_FIGHT_descriptor_, &CG_FIGHT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_LEAVE_COPYSCENE_descriptor_, &CG_LEAVE_COPYSCENE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMessage_2eproto() {
  delete CG_LOGIN::default_instance_;
  delete CG_LOGIN_reflection_;
  delete GC_LOGIN_RET::default_instance_;
  delete GC_LOGIN_RET_reflection_;
  delete CG_CONNECTED_HEARTBEAT::default_instance_;
  delete CG_CONNECTED_HEARTBEAT_reflection_;
  delete GC_CONNECTED_HEARTBEAT::default_instance_;
  delete GC_CONNECTED_HEARTBEAT_reflection_;
  delete CG_REQ_NEAR_LIST::default_instance_;
  delete CG_REQ_NEAR_LIST_reflection_;
  delete GC_NEAR_MARCHLIST::default_instance_;
  delete GC_NEAR_MARCHLIST_reflection_;
  delete CG_CHAT::default_instance_;
  delete CG_CHAT_reflection_;
  delete GC_CHAT::default_instance_;
  delete GC_CHAT_reflection_;
  delete GC_NOTICE::default_instance_;
  delete GC_NOTICE_reflection_;
  delete GC_UPDATE_SCENE_INSTACTIVATION::default_instance_;
  delete GC_UPDATE_SCENE_INSTACTIVATION_reflection_;
  delete GS_CONNECTED_HEARTBEAT::default_instance_;
  delete GS_CONNECTED_HEARTBEAT_reflection_;
  delete SG_CONNECTED_HEARTBEAT::default_instance_;
  delete SG_CONNECTED_HEARTBEAT_reflection_;
  delete CG_MOVE::default_instance_;
  delete CG_MOVE_reflection_;
  delete GC_MOVE::default_instance_;
  delete GC_MOVE_reflection_;
  delete GC_STOP::default_instance_;
  delete GC_STOP_reflection_;
  delete GC_TELEMOVE::default_instance_;
  delete GC_TELEMOVE_reflection_;
  delete GC_RET_USE_SKILL::default_instance_;
  delete GC_RET_USE_SKILL_reflection_;
  delete GC_UPDATE_ANIMATION_STATE::default_instance_;
  delete GC_UPDATE_ANIMATION_STATE_reflection_;
  delete GC_DELETE_OBJ::default_instance_;
  delete GC_DELETE_OBJ_reflection_;
  delete GC_ATTACKFLY::default_instance_;
  delete GC_ATTACKFLY_reflection_;
  delete GC_FORCE_SETPOS::default_instance_;
  delete GC_FORCE_SETPOS_reflection_;
  delete GC_UPDATE_NEEDIMPACTINFO::default_instance_;
  delete GC_UPDATE_NEEDIMPACTINFO_reflection_;
  delete GC_PLAY_EFFECT::default_instance_;
  delete GC_PLAY_EFFECT_reflection_;
  delete GC_REMOVEEFFECT::default_instance_;
  delete GC_REMOVEEFFECT_reflection_;
  delete CG_FIGHT::default_instance_;
  delete CG_FIGHT_reflection_;
  delete CG_LEAVE_COPYSCENE::default_instance_;
  delete CG_LEAVE_COPYSCENE_reflection_;
}

void protobuf_AddDesc_PBMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBMessage.proto\"\226\004\n\010CG_LOGIN\022\r\n\005vtype\030"
    "\001 \002(\005\022\023\n\013gameversion\030\002 \002(\005\022\026\n\016programver"
    "sion\030\003 \002(\005\022\035\n\025publicresourceversion\030\004 \002("
    "\005\022\023\n\013maxpacketid\030\005 \002(\005\022\022\n\nforceenter\030\006 \002"
    "(\005\022\020\n\010deviceid\030\007 \002(\t\022\022\n\ndevicetype\030\010 \002(\t"
    "\022\025\n\rdeviceversion\030\t \002(\t\022\017\n\007account\030\n \002(\t"
    "\022\024\n\014validateinfo\030\013 \002(\t\022\021\n\tchannelid\030\014 \002("
    "\t\022\024\n\014mediachannel\030\r \002(\t\022\031\n\021rapidvalidate"
    "code\030\016 \002(\005\022\024\n\014reservedint1\030\017 \002(\005\022\024\n\014rese"
    "rvedint2\030\020 \002(\005\022\024\n\014reservedint3\030\021 \002(\005\022\024\n\014"
    "reservedint4\030\022 \002(\005\022\027\n\017reservedstring1\030\023 "
    "\002(\t\022\027\n\017reservedstring2\030\024 \002(\t\022\027\n\017reserved"
    "string3\030\025 \002(\t\022\027\n\017reservedstring4\030\026 \002(\t\"\""
    "\n\014VALIDATETYPE\022\010\n\004TEST\020\000\022\010\n\004CYOU\020\001\"\230\005\n\014G"
    "C_LOGIN_RET\022\016\n\006result\030\001 \002(\005\022\026\n\016validater"
    "esult\030\002 \002(\005\022\016\n\006userid\030\003 \002(\t\022\013\n\003oid\030\004 \002(\t"
    "\022\023\n\013accesstoken\030\005 \002(\t\022\031\n\021rapidvalidateco"
    "de\030\006 \002(\005\022\024\n\014roleGUIDList\030\007 \003(\004\022\024\n\014roleTy"
    "peList\030\010 \003(\005\022\026\n\016playerNameList\030\t \003(\t\022\025\n\r"
    "roleLevelList\030\n \003(\005\022\025\n\rModelVisualID\030\013 \003"
    "(\005\022\020\n\010WeaponID\030\014 \003(\005\022\027\n\017WeaponEffectGem\030"
    "\r \003(\005\022\032\n\022HuanHuaWeaponModel\030\016 \003(\005\"\245\001\n\013LO"
    "GINRESULT\022\013\n\007SUCCESS\020\001\022\025\n\021ACCOUNTVERIFYF"
    "AIL\020\002\022\024\n\020READROLELISTFAIL\020\003\022\020\n\014ALREADYLO"
    "GIN\020\004\022\r\n\tQUEUEFULL\020\005\022\022\n\016NEEDFORCEENTER\020\006"
    "\022\022\n\016PACKETNOTMATCH\020\007\022\023\n\017VERSIONNOTMATCH\020"
    "\010\"\261\001\n\016VALIDATERESULT\022\006\n\002OK\020\000\022\032\n\026FAIL_VAL"
    "IDATETYPEERROR\020\001\022\020\n\014FAIL_PERFORM\020\002\022\017\n\013FA"
    "IL_OPCODE\020\003\022\014\n\010FAIL_TAG\020\004\022\016\n\nFAIL_STATE\020"
    "\005\022\024\n\020FAIL_DATA_STATUS\020\006\022\022\n\016FAIL_CHANNELI"
    "D\020\007\022\020\n\014FAIL_BLOCKED\020\010\",\n\026CG_CONNECTED_HE"
    "ARTBEAT\022\022\n\nisresponse\030\001 \002(\005\"0\n\026GC_CONNEC"
    "TED_HEARTBEAT\022\026\n\016serveransitime\030\001 \002(\005\"#\n"
    "\020CG_REQ_NEAR_LIST\022\017\n\007marchId\030\001 \002(\003\"Q\n\021GC"
    "_NEAR_MARCHLIST\022\014\n\004Guid\030\001 \003(\004\022\014\n\004Name\030\002 "
    "\003(\t\022\r\n\005Level\030\003 \003(\005\022\021\n\tCombatNum\030\004 \003(\005\"\206\002"
    "\n\007CG_CHAT\022\020\n\010chattype\030\001 \002(\005\022\020\n\010chatinfo\030"
    "\002 \002(\t\022\024\n\014receiverguid\030\003 \001(\004\022\024\n\014receivern"
    "ame\030\004 \001(\t\022\025\n\rreceiverlevel\030\005 \001(\005\"\223\001\n\010CHA"
    "TTYPE\022\025\n\021CHAT_TYPE_INVALID\020\000\022\024\n\020CHAT_TYP"
    "E_NORMAL\020\001\022\023\n\017CHAT_TYPE_WORLD\020\002\022\024\n\020CHAT_"
    "TYPE_SYSTEM\020\003\022\031\n\025CHAT_TYPE_LOUDSPEAKER\020\004"
    "\022\024\n\020CHAT_TYPE_FRIEND\020\005\"\254\002\n\007GC_CHAT\022\020\n\010ch"
    "attype\030\001 \002(\005\022\020\n\010chatinfo\030\002 \002(\t\022\022\n\nsender"
    "guid\030\003 \001(\004\022\022\n\nsendername\030\004 \001(\t\022\023\n\013sender"
    "level\030\005 \001(\005\022\024\n\014receiverguid\030\006 \001(\004\022\024\n\014rec"
    "eivername\030\007 \001(\t\"\223\001\n\010CHATTYPE\022\025\n\021CHAT_TYP"
    "E_INVALID\020\000\022\024\n\020CHAT_TYPE_NORMAL\020\001\022\023\n\017CHA"
    "T_TYPE_WORLD\020\002\022\024\n\020CHAT_TYPE_SYSTEM\020\003\022\031\n\025"
    "CHAT_TYPE_LOUDSPEAKER\020\004\022\024\n\020CHAT_TYPE_FRI"
    "END\020\005\"1\n\tGC_NOTICE\022\016\n\006notice\030\001 \002(\t\022\024\n\014fi"
    "lterRepeat\030\002 \001(\005\"g\n\036GC_UPDATE_SCENE_INST"
    "ACTIVATION\022\024\n\014sceneclassid\030\001 \002(\005\022\026\n\016scen"
    "einstcount\030\002 \002(\005\022\027\n\017sceneactivation\030\003 \003("
    "\005\"H\n\026GS_CONNECTED_HEARTBEAT\022\025\n\rsenderwor"
    "ldid\030\001 \002(\005\022\027\n\017receiverworldid\030\002 \002(\005\"H\n\026S"
    "G_CONNECTED_HEARTBEAT\022\025\n\rsenderworldid\030\001"
    " \002(\005\022\027\n\017receiverworldid\030\002 \002(\005\"Z\n\007CG_MOVE"
    "\022\020\n\010poscount\030\001 \002(\005\022\014\n\004posx\030\002 \003(\005\022\014\n\004posz"
    "\030\003 \003(\005\022\020\n\010ismoving\030\004 \002(\005\022\017\n\007marchid\030\005 \002("
    "\003\"\\\n\007GC_MOVE\022\020\n\010serverid\030\001 \002(\005\022\020\n\010poscou"
    "nt\030\002 \002(\005\022\021\n\tposserial\030\003 \003(\005\022\014\n\004posx\030\004 \003("
    "\005\022\014\n\004posz\030\005 \003(\005\"J\n\007GC_STOP\022\020\n\010serverid\030\001"
    " \002(\005\022\021\n\tposserial\030\002 \002(\005\022\014\n\004posx\030\003 \002(\005\022\014\n"
    "\004posz\030\004 \002(\005\"o\n\013GC_TELEMOVE\022\r\n\005objId\030\001 \002("
    "\005\022\022\n\ntargetPosX\030\002 \002(\005\022\022\n\ntargetPosZ\030\003 \002("
    "\005\022\030\n\020needChangeFaceto\030\004 \002(\005\022\017\n\007animaId\030\005"
    " \001(\005\"q\n\020GC_RET_USE_SKILL\022\017\n\007skillId\030\001 \002("
    "\005\022\020\n\010senderId\030\002 \002(\005\022\020\n\010TargetId\030\003 \002(\005\022\025\n"
    "\rskillfailType\030\004 \001(\005\022\021\n\tskillname\030\005 \001(\t\""
    "\313\001\n\031GC_UPDATE_ANIMATION_STATE\022\r\n\005objId\030\001"
    " \002(\005\022\026\n\016AnimationState\030\002 \002(\005\022\026\n\016vertical"
    "OffDis\030\003 \001(\005\022\030\n\020horizontalOffDis\030\004 \001(\005\022\025"
    "\n\rstateLastTime\030\005 \001(\005\022\027\n\017stateResortTime"
    "\030\006 \001(\005\022\020\n\010hitTimes\030\007 \001(\005\022\023\n\013hitInterval\030"
    "\010 \001(\005\"!\n\rGC_DELETE_OBJ\022\020\n\010serverId\030\001 \002(\005"
    "\"J\n\014GC_ATTACKFLY\022\r\n\005objId\030\001 \002(\005\022\013\n\003Dis\030\002"
    " \002(\005\022\r\n\005Hight\030\003 \002(\005\022\017\n\007FlyTime\030\004 \002(\005\"\?\n\017"
    "GC_FORCE_SETPOS\022\020\n\010ServerID\030\001 \002(\005\022\014\n\004Pos"
    "X\030\002 \002(\005\022\014\n\004PosZ\030\003 \002(\005\"\210\001\n\030GC_UPDATE_NEED"
    "IMPACTINFO\022\r\n\005objId\030\001 \002(\005\022\020\n\010impactId\030\002 "
    "\003(\005\022\025\n\rimpactLogicId\030\003 \003(\005\022\021\n\tisForever\030"
    "\004 \003(\005\022\022\n\nremainTime\030\005 \003(\005\022\r\n\005isAdd\030\006 \003(\005"
    "\"1\n\016GC_PLAY_EFFECT\022\r\n\005ObjID\030\001 \002(\005\022\020\n\010Eff"
    "ectID\030\002 \002(\005\"2\n\017GC_REMOVEEFFECT\022\r\n\005objId\030"
    "\001 \002(\005\022\020\n\010effectId\030\002 \002(\005\"N\n\010CG_FIGHT\022\017\n\007S"
    "ceneID\030\001 \002(\005\022\014\n\004Type\030\002 \002(\005\022\020\n\010AttackId\030\003"
    " \002(\003\022\021\n\tDefenceId\030\004 \001(\003\"%\n\022CG_LEAVE_COPY"
    "SCENE\022\017\n\007noParam\030\001 \002(\005", 3542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMessage.proto", &protobuf_RegisterTypes);
  CG_LOGIN::default_instance_ = new CG_LOGIN();
  GC_LOGIN_RET::default_instance_ = new GC_LOGIN_RET();
  CG_CONNECTED_HEARTBEAT::default_instance_ = new CG_CONNECTED_HEARTBEAT();
  GC_CONNECTED_HEARTBEAT::default_instance_ = new GC_CONNECTED_HEARTBEAT();
  CG_REQ_NEAR_LIST::default_instance_ = new CG_REQ_NEAR_LIST();
  GC_NEAR_MARCHLIST::default_instance_ = new GC_NEAR_MARCHLIST();
  CG_CHAT::default_instance_ = new CG_CHAT();
  GC_CHAT::default_instance_ = new GC_CHAT();
  GC_NOTICE::default_instance_ = new GC_NOTICE();
  GC_UPDATE_SCENE_INSTACTIVATION::default_instance_ = new GC_UPDATE_SCENE_INSTACTIVATION();
  GS_CONNECTED_HEARTBEAT::default_instance_ = new GS_CONNECTED_HEARTBEAT();
  SG_CONNECTED_HEARTBEAT::default_instance_ = new SG_CONNECTED_HEARTBEAT();
  CG_MOVE::default_instance_ = new CG_MOVE();
  GC_MOVE::default_instance_ = new GC_MOVE();
  GC_STOP::default_instance_ = new GC_STOP();
  GC_TELEMOVE::default_instance_ = new GC_TELEMOVE();
  GC_RET_USE_SKILL::default_instance_ = new GC_RET_USE_SKILL();
  GC_UPDATE_ANIMATION_STATE::default_instance_ = new GC_UPDATE_ANIMATION_STATE();
  GC_DELETE_OBJ::default_instance_ = new GC_DELETE_OBJ();
  GC_ATTACKFLY::default_instance_ = new GC_ATTACKFLY();
  GC_FORCE_SETPOS::default_instance_ = new GC_FORCE_SETPOS();
  GC_UPDATE_NEEDIMPACTINFO::default_instance_ = new GC_UPDATE_NEEDIMPACTINFO();
  GC_PLAY_EFFECT::default_instance_ = new GC_PLAY_EFFECT();
  GC_REMOVEEFFECT::default_instance_ = new GC_REMOVEEFFECT();
  CG_FIGHT::default_instance_ = new CG_FIGHT();
  CG_LEAVE_COPYSCENE::default_instance_ = new CG_LEAVE_COPYSCENE();
  CG_LOGIN::default_instance_->InitAsDefaultInstance();
  GC_LOGIN_RET::default_instance_->InitAsDefaultInstance();
  CG_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  GC_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  CG_REQ_NEAR_LIST::default_instance_->InitAsDefaultInstance();
  GC_NEAR_MARCHLIST::default_instance_->InitAsDefaultInstance();
  CG_CHAT::default_instance_->InitAsDefaultInstance();
  GC_CHAT::default_instance_->InitAsDefaultInstance();
  GC_NOTICE::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_SCENE_INSTACTIVATION::default_instance_->InitAsDefaultInstance();
  GS_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  SG_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  CG_MOVE::default_instance_->InitAsDefaultInstance();
  GC_MOVE::default_instance_->InitAsDefaultInstance();
  GC_STOP::default_instance_->InitAsDefaultInstance();
  GC_TELEMOVE::default_instance_->InitAsDefaultInstance();
  GC_RET_USE_SKILL::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_ANIMATION_STATE::default_instance_->InitAsDefaultInstance();
  GC_DELETE_OBJ::default_instance_->InitAsDefaultInstance();
  GC_ATTACKFLY::default_instance_->InitAsDefaultInstance();
  GC_FORCE_SETPOS::default_instance_->InitAsDefaultInstance();
  GC_UPDATE_NEEDIMPACTINFO::default_instance_->InitAsDefaultInstance();
  GC_PLAY_EFFECT::default_instance_->InitAsDefaultInstance();
  GC_REMOVEEFFECT::default_instance_->InitAsDefaultInstance();
  CG_FIGHT::default_instance_->InitAsDefaultInstance();
  CG_LEAVE_COPYSCENE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMessage_2eproto {
  StaticDescriptorInitializer_PBMessage_2eproto() {
    protobuf_AddDesc_PBMessage_2eproto();
  }
} static_descriptor_initializer_PBMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_VALIDATETYPE_descriptor_;
}
bool CG_LOGIN_VALIDATETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_LOGIN_VALIDATETYPE CG_LOGIN::TEST;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::CYOU;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MIN;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MAX;
const int CG_LOGIN::VALIDATETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_LOGIN::kVtypeFieldNumber;
const int CG_LOGIN::kGameversionFieldNumber;
const int CG_LOGIN::kProgramversionFieldNumber;
const int CG_LOGIN::kPublicresourceversionFieldNumber;
const int CG_LOGIN::kMaxpacketidFieldNumber;
const int CG_LOGIN::kForceenterFieldNumber;
const int CG_LOGIN::kDeviceidFieldNumber;
const int CG_LOGIN::kDevicetypeFieldNumber;
const int CG_LOGIN::kDeviceversionFieldNumber;
const int CG_LOGIN::kAccountFieldNumber;
const int CG_LOGIN::kValidateinfoFieldNumber;
const int CG_LOGIN::kChannelidFieldNumber;
const int CG_LOGIN::kMediachannelFieldNumber;
const int CG_LOGIN::kRapidvalidatecodeFieldNumber;
const int CG_LOGIN::kReservedint1FieldNumber;
const int CG_LOGIN::kReservedint2FieldNumber;
const int CG_LOGIN::kReservedint3FieldNumber;
const int CG_LOGIN::kReservedint4FieldNumber;
const int CG_LOGIN::kReservedstring1FieldNumber;
const int CG_LOGIN::kReservedstring2FieldNumber;
const int CG_LOGIN::kReservedstring3FieldNumber;
const int CG_LOGIN::kReservedstring4FieldNumber;
#endif  // !_MSC_VER

CG_LOGIN::CG_LOGIN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_LOGIN::InitAsDefaultInstance() {
}

CG_LOGIN::CG_LOGIN(const CG_LOGIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_LOGIN::SharedCtor() {
  _cached_size_ = 0;
  vtype_ = 0;
  gameversion_ = 0;
  programversion_ = 0;
  publicresourceversion_ = 0;
  maxpacketid_ = 0;
  forceenter_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  validateinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mediachannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rapidvalidatecode_ = 0;
  reservedint1_ = 0;
  reservedint2_ = 0;
  reservedint3_ = 0;
  reservedint4_ = 0;
  reservedstring1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LOGIN::~CG_LOGIN() {
  SharedDtor();
}

void CG_LOGIN::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceversion_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete validateinfo_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
    delete mediachannel_;
  }
  if (reservedstring1_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring1_;
  }
  if (reservedstring2_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring2_;
  }
  if (reservedstring3_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring3_;
  }
  if (reservedstring4_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring4_;
  }
  if (this != default_instance_) {
  }
}

void CG_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_descriptor_;
}

const CG_LOGIN& CG_LOGIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_LOGIN* CG_LOGIN::default_instance_ = NULL;

CG_LOGIN* CG_LOGIN::New() const {
  return new CG_LOGIN;
}

void CG_LOGIN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vtype_ = 0;
    gameversion_ = 0;
    programversion_ = 0;
    publicresourceversion_ = 0;
    maxpacketid_ = 0;
    forceenter_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deviceversion()) {
      if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
        deviceversion_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_validateinfo()) {
      if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
        validateinfo_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_mediachannel()) {
      if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
        mediachannel_->clear();
      }
    }
    rapidvalidatecode_ = 0;
    reservedint1_ = 0;
    reservedint2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reservedint3_ = 0;
    reservedint4_ = 0;
    if (has_reservedstring1()) {
      if (reservedstring1_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring1_->clear();
      }
    }
    if (has_reservedstring2()) {
      if (reservedstring2_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring2_->clear();
      }
    }
    if (has_reservedstring3()) {
      if (reservedstring3_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring3_->clear();
      }
    }
    if (has_reservedstring4()) {
      if (reservedstring4_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring4_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameversion;
        break;
      }

      // required int32 gameversion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_programversion;
        break;
      }

      // required int32 programversion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_programversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &programversion_)));
          set_has_programversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_publicresourceversion;
        break;
      }

      // required int32 publicresourceversion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publicresourceversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicresourceversion_)));
          set_has_publicresourceversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxpacketid;
        break;
      }

      // required int32 maxpacketid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpacketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpacketid_)));
          set_has_maxpacketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forceenter;
        break;
      }

      // required int32 forceenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forceenter_)));
          set_has_forceenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceid;
        break;
      }

      // required string deviceid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_devicetype;
        break;
      }

      // required string devicetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_deviceversion;
        break;
      }

      // required string deviceversion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceversion().data(), this->deviceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_account;
        break;
      }

      // required string account = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_validateinfo;
        break;
      }

      // required string validateinfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validateinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validateinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validateinfo().data(), this->validateinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_channelid;
        break;
      }

      // required string channelid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mediachannel;
        break;
      }

      // required string mediachannel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediachannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediachannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediachannel().data(), this->mediachannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rapidvalidatecode;
        break;
      }

      // required int32 rapidvalidatecode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rapidvalidatecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapidvalidatecode_)));
          set_has_rapidvalidatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_reservedint1;
        break;
      }

      // required int32 reservedint1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint1_)));
          set_has_reservedint1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_reservedint2;
        break;
      }

      // required int32 reservedint2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint2_)));
          set_has_reservedint2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_reservedint3;
        break;
      }

      // required int32 reservedint3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint3_)));
          set_has_reservedint3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_reservedint4;
        break;
      }

      // required int32 reservedint4 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint4_)));
          set_has_reservedint4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_reservedstring1;
        break;
      }

      // required string reservedstring1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring1().data(), this->reservedstring1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reservedstring2;
        break;
      }

      // required string reservedstring2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring2().data(), this->reservedstring2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_reservedstring3;
        break;
      }

      // required string reservedstring3 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring3().data(), this->reservedstring3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_reservedstring4;
        break;
      }

      // required string reservedstring4 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring4().data(), this->reservedstring4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vtype(), output);
  }

  // required int32 gameversion = 2;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameversion(), output);
  }

  // required int32 programversion = 3;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->programversion(), output);
  }

  // required int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->publicresourceversion(), output);
  }

  // required int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpacketid(), output);
  }

  // required int32 forceenter = 6;
  if (has_forceenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forceenter(), output);
  }

  // required string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceid(), output);
  }

  // required string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->devicetype(), output);
  }

  // required string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->deviceversion(), output);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->account(), output);
  }

  // required string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->validateinfo(), output);
  }

  // required string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->channelid(), output);
  }

  // required string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->mediachannel(), output);
  }

  // required int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rapidvalidatecode(), output);
  }

  // required int32 reservedint1 = 15;
  if (has_reservedint1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->reservedint1(), output);
  }

  // required int32 reservedint2 = 16;
  if (has_reservedint2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reservedint2(), output);
  }

  // required int32 reservedint3 = 17;
  if (has_reservedint3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reservedint3(), output);
  }

  // required int32 reservedint4 = 18;
  if (has_reservedint4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->reservedint4(), output);
  }

  // required string reservedstring1 = 19;
  if (has_reservedstring1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring1().data(), this->reservedstring1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->reservedstring1(), output);
  }

  // required string reservedstring2 = 20;
  if (has_reservedstring2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring2().data(), this->reservedstring2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->reservedstring2(), output);
  }

  // required string reservedstring3 = 21;
  if (has_reservedstring3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring3().data(), this->reservedstring3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->reservedstring3(), output);
  }

  // required string reservedstring4 = 22;
  if (has_reservedstring4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring4().data(), this->reservedstring4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->reservedstring4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_LOGIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vtype(), target);
  }

  // required int32 gameversion = 2;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameversion(), target);
  }

  // required int32 programversion = 3;
  if (has_programversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->programversion(), target);
  }

  // required int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->publicresourceversion(), target);
  }

  // required int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpacketid(), target);
  }

  // required int32 forceenter = 6;
  if (has_forceenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->forceenter(), target);
  }

  // required string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // required string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicetype(), target);
  }

  // required string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceversion(), target);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account(), target);
  }

  // required string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->validateinfo(), target);
  }

  // required string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->channelid(), target);
  }

  // required string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->mediachannel(), target);
  }

  // required int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rapidvalidatecode(), target);
  }

  // required int32 reservedint1 = 15;
  if (has_reservedint1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->reservedint1(), target);
  }

  // required int32 reservedint2 = 16;
  if (has_reservedint2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->reservedint2(), target);
  }

  // required int32 reservedint3 = 17;
  if (has_reservedint3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->reservedint3(), target);
  }

  // required int32 reservedint4 = 18;
  if (has_reservedint4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->reservedint4(), target);
  }

  // required string reservedstring1 = 19;
  if (has_reservedstring1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring1().data(), this->reservedstring1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->reservedstring1(), target);
  }

  // required string reservedstring2 = 20;
  if (has_reservedstring2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring2().data(), this->reservedstring2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->reservedstring2(), target);
  }

  // required string reservedstring3 = 21;
  if (has_reservedstring3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring3().data(), this->reservedstring3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->reservedstring3(), target);
  }

  // required string reservedstring4 = 22;
  if (has_reservedstring4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring4().data(), this->reservedstring4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->reservedstring4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtype());
    }

    // required int32 gameversion = 2;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversion());
    }

    // required int32 programversion = 3;
    if (has_programversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->programversion());
    }

    // required int32 publicresourceversion = 4;
    if (has_publicresourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicresourceversion());
    }

    // required int32 maxpacketid = 5;
    if (has_maxpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpacketid());
    }

    // required int32 forceenter = 6;
    if (has_forceenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forceenter());
    }

    // required string deviceid = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string devicetype = 8;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string deviceversion = 9;
    if (has_deviceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceversion());
    }

    // required string account = 10;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string validateinfo = 11;
    if (has_validateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validateinfo());
    }

    // required string channelid = 12;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string mediachannel = 13;
    if (has_mediachannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediachannel());
    }

    // required int32 rapidvalidatecode = 14;
    if (has_rapidvalidatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rapidvalidatecode());
    }

    // required int32 reservedint1 = 15;
    if (has_reservedint1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint1());
    }

    // required int32 reservedint2 = 16;
    if (has_reservedint2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 reservedint3 = 17;
    if (has_reservedint3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint3());
    }

    // required int32 reservedint4 = 18;
    if (has_reservedint4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint4());
    }

    // required string reservedstring1 = 19;
    if (has_reservedstring1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring1());
    }

    // required string reservedstring2 = 20;
    if (has_reservedstring2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring2());
    }

    // required string reservedstring3 = 21;
    if (has_reservedstring3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring3());
    }

    // required string reservedstring4 = 22;
    if (has_reservedstring4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_LOGIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_LOGIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_LOGIN::MergeFrom(const CG_LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_programversion()) {
      set_programversion(from.programversion());
    }
    if (from.has_publicresourceversion()) {
      set_publicresourceversion(from.publicresourceversion());
    }
    if (from.has_maxpacketid()) {
      set_maxpacketid(from.maxpacketid());
    }
    if (from.has_forceenter()) {
      set_forceenter(from.forceenter());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deviceversion()) {
      set_deviceversion(from.deviceversion());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_validateinfo()) {
      set_validateinfo(from.validateinfo());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_mediachannel()) {
      set_mediachannel(from.mediachannel());
    }
    if (from.has_rapidvalidatecode()) {
      set_rapidvalidatecode(from.rapidvalidatecode());
    }
    if (from.has_reservedint1()) {
      set_reservedint1(from.reservedint1());
    }
    if (from.has_reservedint2()) {
      set_reservedint2(from.reservedint2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reservedint3()) {
      set_reservedint3(from.reservedint3());
    }
    if (from.has_reservedint4()) {
      set_reservedint4(from.reservedint4());
    }
    if (from.has_reservedstring1()) {
      set_reservedstring1(from.reservedstring1());
    }
    if (from.has_reservedstring2()) {
      set_reservedstring2(from.reservedstring2());
    }
    if (from.has_reservedstring3()) {
      set_reservedstring3(from.reservedstring3());
    }
    if (from.has_reservedstring4()) {
      set_reservedstring4(from.reservedstring4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_LOGIN::CopyFrom(const CG_LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LOGIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void CG_LOGIN::Swap(CG_LOGIN* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(programversion_, other->programversion_);
    std::swap(publicresourceversion_, other->publicresourceversion_);
    std::swap(maxpacketid_, other->maxpacketid_);
    std::swap(forceenter_, other->forceenter_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceversion_, other->deviceversion_);
    std::swap(account_, other->account_);
    std::swap(validateinfo_, other->validateinfo_);
    std::swap(channelid_, other->channelid_);
    std::swap(mediachannel_, other->mediachannel_);
    std::swap(rapidvalidatecode_, other->rapidvalidatecode_);
    std::swap(reservedint1_, other->reservedint1_);
    std::swap(reservedint2_, other->reservedint2_);
    std::swap(reservedint3_, other->reservedint3_);
    std::swap(reservedint4_, other->reservedint4_);
    std::swap(reservedstring1_, other->reservedstring1_);
    std::swap(reservedstring2_, other->reservedstring2_);
    std::swap(reservedstring3_, other->reservedstring3_);
    std::swap(reservedstring4_, other->reservedstring4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_LOGIN_descriptor_;
  metadata.reflection = CG_LOGIN_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_LOGINRESULT_descriptor_;
}
bool GC_LOGIN_RET_LOGINRESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::SUCCESS;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ACCOUNTVERIFYFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::READROLELISTFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ALREADYLOGIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::QUEUEFULL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::NEEDFORCEENTER;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::PACKETNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::VERSIONNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MAX;
const int GC_LOGIN_RET::LOGINRESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_VALIDATERESULT_descriptor_;
}
bool GC_LOGIN_RET_VALIDATERESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::OK;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_VALIDATETYPEERROR;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_PERFORM;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_OPCODE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_TAG;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_STATE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_DATA_STATUS;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_CHANNELID;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_BLOCKED;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MIN;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MAX;
const int GC_LOGIN_RET::VALIDATERESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_LOGIN_RET::kResultFieldNumber;
const int GC_LOGIN_RET::kValidateresultFieldNumber;
const int GC_LOGIN_RET::kUseridFieldNumber;
const int GC_LOGIN_RET::kOidFieldNumber;
const int GC_LOGIN_RET::kAccesstokenFieldNumber;
const int GC_LOGIN_RET::kRapidvalidatecodeFieldNumber;
const int GC_LOGIN_RET::kRoleGUIDListFieldNumber;
const int GC_LOGIN_RET::kRoleTypeListFieldNumber;
const int GC_LOGIN_RET::kPlayerNameListFieldNumber;
const int GC_LOGIN_RET::kRoleLevelListFieldNumber;
const int GC_LOGIN_RET::kModelVisualIDFieldNumber;
const int GC_LOGIN_RET::kWeaponIDFieldNumber;
const int GC_LOGIN_RET::kWeaponEffectGemFieldNumber;
const int GC_LOGIN_RET::kHuanHuaWeaponModelFieldNumber;
#endif  // !_MSC_VER

GC_LOGIN_RET::GC_LOGIN_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_LOGIN_RET::InitAsDefaultInstance() {
}

GC_LOGIN_RET::GC_LOGIN_RET(const GC_LOGIN_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_LOGIN_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  validateresult_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rapidvalidatecode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_LOGIN_RET::~GC_LOGIN_RET() {
  SharedDtor();
}

void GC_LOGIN_RET::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (oid_ != &::google::protobuf::internal::kEmptyString) {
    delete oid_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (this != default_instance_) {
  }
}

void GC_LOGIN_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_LOGIN_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_descriptor_;
}

const GC_LOGIN_RET& GC_LOGIN_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_LOGIN_RET* GC_LOGIN_RET::default_instance_ = NULL;

GC_LOGIN_RET* GC_LOGIN_RET::New() const {
  return new GC_LOGIN_RET;
}

void GC_LOGIN_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    validateresult_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::kEmptyString) {
        oid_->clear();
      }
    }
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
    rapidvalidatecode_ = 0;
  }
  roleguidlist_.Clear();
  roletypelist_.Clear();
  playernamelist_.Clear();
  rolelevellist_.Clear();
  modelvisualid_.Clear();
  weaponid_.Clear();
  weaponeffectgem_.Clear();
  huanhuaweaponmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_LOGIN_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validateresult;
        break;
      }

      // required int32 validateresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validateresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validateresult_)));
          set_has_validateresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oid;
        break;
      }

      // required string oid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oid().data(), this->oid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accesstoken;
        break;
      }

      // required string accesstoken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accesstoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rapidvalidatecode;
        break;
      }

      // required int32 rapidvalidatecode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rapidvalidatecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapidvalidatecode_)));
          set_has_rapidvalidatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleGUIDList;
        break;
      }

      // repeated uint64 roleGUIDList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleGUIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_roleguidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleguidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleGUIDList;
        if (input->ExpectTag(64)) goto parse_roleTypeList;
        break;
      }

      // repeated int32 roleTypeList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleTypeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_roletypelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roletypelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roleTypeList;
        if (input->ExpectTag(74)) goto parse_playerNameList;
        break;
      }

      // repeated string playerNameList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerNameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_playernamelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playernamelist(this->playernamelist_size() - 1).data(),
            this->playernamelist(this->playernamelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerNameList;
        if (input->ExpectTag(80)) goto parse_roleLevelList;
        break;
      }

      // repeated int32 roleLevelList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLevelList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_rolelevellist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rolelevellist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roleLevelList;
        if (input->ExpectTag(88)) goto parse_ModelVisualID;
        break;
      }

      // repeated int32 ModelVisualID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelVisualID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_modelvisualid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_modelvisualid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ModelVisualID;
        if (input->ExpectTag(96)) goto parse_WeaponID;
        break;
      }

      // repeated int32 WeaponID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_weaponid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weaponid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WeaponID;
        if (input->ExpectTag(104)) goto parse_WeaponEffectGem;
        break;
      }

      // repeated int32 WeaponEffectGem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponEffectGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_weaponeffectgem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weaponeffectgem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_WeaponEffectGem;
        if (input->ExpectTag(112)) goto parse_HuanHuaWeaponModel;
        break;
      }

      // repeated int32 HuanHuaWeaponModel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuanHuaWeaponModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_huanhuaweaponmodel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huanhuaweaponmodel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_HuanHuaWeaponModel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_LOGIN_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validateresult(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oid(), output);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accesstoken(), output);
  }

  // required int32 rapidvalidatecode = 6;
  if (has_rapidvalidatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rapidvalidatecode(), output);
  }

  // repeated uint64 roleGUIDList = 7;
  for (int i = 0; i < this->roleguidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->roleguidlist(i), output);
  }

  // repeated int32 roleTypeList = 8;
  for (int i = 0; i < this->roletypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->roletypelist(i), output);
  }

  // repeated string playerNameList = 9;
  for (int i = 0; i < this->playernamelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->playernamelist(i).data(), this->playernamelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->playernamelist(i), output);
  }

  // repeated int32 roleLevelList = 10;
  for (int i = 0; i < this->rolelevellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->rolelevellist(i), output);
  }

  // repeated int32 ModelVisualID = 11;
  for (int i = 0; i < this->modelvisualid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->modelvisualid(i), output);
  }

  // repeated int32 WeaponID = 12;
  for (int i = 0; i < this->weaponid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->weaponid(i), output);
  }

  // repeated int32 WeaponEffectGem = 13;
  for (int i = 0; i < this->weaponeffectgem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->weaponeffectgem(i), output);
  }

  // repeated int32 HuanHuaWeaponModel = 14;
  for (int i = 0; i < this->huanhuaweaponmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->huanhuaweaponmodel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_LOGIN_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validateresult(), target);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oid(), target);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesstoken(), target);
  }

  // required int32 rapidvalidatecode = 6;
  if (has_rapidvalidatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rapidvalidatecode(), target);
  }

  // repeated uint64 roleGUIDList = 7;
  for (int i = 0; i < this->roleguidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->roleguidlist(i), target);
  }

  // repeated int32 roleTypeList = 8;
  for (int i = 0; i < this->roletypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->roletypelist(i), target);
  }

  // repeated string playerNameList = 9;
  for (int i = 0; i < this->playernamelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernamelist(i).data(), this->playernamelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->playernamelist(i), target);
  }

  // repeated int32 roleLevelList = 10;
  for (int i = 0; i < this->rolelevellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->rolelevellist(i), target);
  }

  // repeated int32 ModelVisualID = 11;
  for (int i = 0; i < this->modelvisualid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->modelvisualid(i), target);
  }

  // repeated int32 WeaponID = 12;
  for (int i = 0; i < this->weaponid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->weaponid(i), target);
  }

  // repeated int32 WeaponEffectGem = 13;
  for (int i = 0; i < this->weaponeffectgem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->weaponeffectgem(i), target);
  }

  // repeated int32 HuanHuaWeaponModel = 14;
  for (int i = 0; i < this->huanhuaweaponmodel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->huanhuaweaponmodel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_LOGIN_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 validateresult = 2;
    if (has_validateresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validateresult());
    }

    // required string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string oid = 4;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oid());
    }

    // required string accesstoken = 5;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // required int32 rapidvalidatecode = 6;
    if (has_rapidvalidatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rapidvalidatecode());
    }

  }
  // repeated uint64 roleGUIDList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleguidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleguidlist(i));
    }
    total_size += 1 * this->roleguidlist_size() + data_size;
  }

  // repeated int32 roleTypeList = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->roletypelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roletypelist(i));
    }
    total_size += 1 * this->roletypelist_size() + data_size;
  }

  // repeated string playerNameList = 9;
  total_size += 1 * this->playernamelist_size();
  for (int i = 0; i < this->playernamelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->playernamelist(i));
  }

  // repeated int32 roleLevelList = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->rolelevellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rolelevellist(i));
    }
    total_size += 1 * this->rolelevellist_size() + data_size;
  }

  // repeated int32 ModelVisualID = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->modelvisualid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->modelvisualid(i));
    }
    total_size += 1 * this->modelvisualid_size() + data_size;
  }

  // repeated int32 WeaponID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponid(i));
    }
    total_size += 1 * this->weaponid_size() + data_size;
  }

  // repeated int32 WeaponEffectGem = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponeffectgem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponeffectgem(i));
    }
    total_size += 1 * this->weaponeffectgem_size() + data_size;
  }

  // repeated int32 HuanHuaWeaponModel = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->huanhuaweaponmodel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huanhuaweaponmodel(i));
    }
    total_size += 1 * this->huanhuaweaponmodel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_LOGIN_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_LOGIN_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_LOGIN_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_LOGIN_RET::MergeFrom(const GC_LOGIN_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleguidlist_.MergeFrom(from.roleguidlist_);
  roletypelist_.MergeFrom(from.roletypelist_);
  playernamelist_.MergeFrom(from.playernamelist_);
  rolelevellist_.MergeFrom(from.rolelevellist_);
  modelvisualid_.MergeFrom(from.modelvisualid_);
  weaponid_.MergeFrom(from.weaponid_);
  weaponeffectgem_.MergeFrom(from.weaponeffectgem_);
  huanhuaweaponmodel_.MergeFrom(from.huanhuaweaponmodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_validateresult()) {
      set_validateresult(from.validateresult());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_rapidvalidatecode()) {
      set_rapidvalidatecode(from.rapidvalidatecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_LOGIN_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_LOGIN_RET::CopyFrom(const GC_LOGIN_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_LOGIN_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_LOGIN_RET::Swap(GC_LOGIN_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(validateresult_, other->validateresult_);
    std::swap(userid_, other->userid_);
    std::swap(oid_, other->oid_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(rapidvalidatecode_, other->rapidvalidatecode_);
    roleguidlist_.Swap(&other->roleguidlist_);
    roletypelist_.Swap(&other->roletypelist_);
    playernamelist_.Swap(&other->playernamelist_);
    rolelevellist_.Swap(&other->rolelevellist_);
    modelvisualid_.Swap(&other->modelvisualid_);
    weaponid_.Swap(&other->weaponid_);
    weaponeffectgem_.Swap(&other->weaponeffectgem_);
    huanhuaweaponmodel_.Swap(&other->huanhuaweaponmodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_LOGIN_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_LOGIN_RET_descriptor_;
  metadata.reflection = GC_LOGIN_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CONNECTED_HEARTBEAT::kIsresponseFieldNumber;
#endif  // !_MSC_VER

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT(const CG_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  isresponse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CONNECTED_HEARTBEAT::~CG_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void CG_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CONNECTED_HEARTBEAT_descriptor_;
}

const CG_CONNECTED_HEARTBEAT& CG_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::default_instance_ = NULL;

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::New() const {
  return new CG_CONNECTED_HEARTBEAT;
}

void CG_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isresponse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isresponse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isresponse_)));
          set_has_isresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isresponse = 1;
    if (has_isresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const CG_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isresponse()) {
      set_isresponse(from.isresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const CG_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_CONNECTED_HEARTBEAT::Swap(CG_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(isresponse_, other->isresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = CG_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CONNECTED_HEARTBEAT::kServeransitimeFieldNumber;
#endif  // !_MSC_VER

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT(const GC_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  serveransitime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CONNECTED_HEARTBEAT::~GC_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void GC_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CONNECTED_HEARTBEAT_descriptor_;
}

const GC_CONNECTED_HEARTBEAT& GC_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::default_instance_ = NULL;

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::New() const {
  return new GC_CONNECTED_HEARTBEAT;
}

void GC_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serveransitime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serveransitime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serveransitime_)));
          set_has_serveransitime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serveransitime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serveransitime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serveransitime = 1;
    if (has_serveransitime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serveransitime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const GC_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serveransitime()) {
      set_serveransitime(from.serveransitime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const GC_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_CONNECTED_HEARTBEAT::Swap(GC_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(serveransitime_, other->serveransitime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = GC_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_REQ_NEAR_LIST::kMarchIdFieldNumber;
#endif  // !_MSC_VER

CG_REQ_NEAR_LIST::CG_REQ_NEAR_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_REQ_NEAR_LIST::InitAsDefaultInstance() {
}

CG_REQ_NEAR_LIST::CG_REQ_NEAR_LIST(const CG_REQ_NEAR_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_REQ_NEAR_LIST::SharedCtor() {
  _cached_size_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_REQ_NEAR_LIST::~CG_REQ_NEAR_LIST() {
  SharedDtor();
}

void CG_REQ_NEAR_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_REQ_NEAR_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_REQ_NEAR_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_REQ_NEAR_LIST_descriptor_;
}

const CG_REQ_NEAR_LIST& CG_REQ_NEAR_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_REQ_NEAR_LIST* CG_REQ_NEAR_LIST::default_instance_ = NULL;

CG_REQ_NEAR_LIST* CG_REQ_NEAR_LIST::New() const {
  return new CG_REQ_NEAR_LIST;
}

void CG_REQ_NEAR_LIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marchid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_REQ_NEAR_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_REQ_NEAR_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_REQ_NEAR_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marchId = 1;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_REQ_NEAR_LIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marchId = 1;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_REQ_NEAR_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_REQ_NEAR_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_REQ_NEAR_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_REQ_NEAR_LIST::MergeFrom(const CG_REQ_NEAR_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_REQ_NEAR_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_REQ_NEAR_LIST::CopyFrom(const CG_REQ_NEAR_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_REQ_NEAR_LIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_REQ_NEAR_LIST::Swap(CG_REQ_NEAR_LIST* other) {
  if (other != this) {
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_REQ_NEAR_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_REQ_NEAR_LIST_descriptor_;
  metadata.reflection = CG_REQ_NEAR_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_NEAR_MARCHLIST::kGuidFieldNumber;
const int GC_NEAR_MARCHLIST::kNameFieldNumber;
const int GC_NEAR_MARCHLIST::kLevelFieldNumber;
const int GC_NEAR_MARCHLIST::kCombatNumFieldNumber;
#endif  // !_MSC_VER

GC_NEAR_MARCHLIST::GC_NEAR_MARCHLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_NEAR_MARCHLIST::InitAsDefaultInstance() {
}

GC_NEAR_MARCHLIST::GC_NEAR_MARCHLIST(const GC_NEAR_MARCHLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_NEAR_MARCHLIST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_NEAR_MARCHLIST::~GC_NEAR_MARCHLIST() {
  SharedDtor();
}

void GC_NEAR_MARCHLIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_NEAR_MARCHLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_NEAR_MARCHLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_NEAR_MARCHLIST_descriptor_;
}

const GC_NEAR_MARCHLIST& GC_NEAR_MARCHLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_NEAR_MARCHLIST* GC_NEAR_MARCHLIST::default_instance_ = NULL;

GC_NEAR_MARCHLIST* GC_NEAR_MARCHLIST::New() const {
  return new GC_NEAR_MARCHLIST;
}

void GC_NEAR_MARCHLIST::Clear() {
  guid_.Clear();
  name_.Clear();
  level_.Clear();
  combatnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_NEAR_MARCHLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 Guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Guid;
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // repeated string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // repeated int32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        if (input->ExpectTag(32)) goto parse_CombatNum;
        break;
      }

      // repeated int32 CombatNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_combatnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_combatnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CombatNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_NEAR_MARCHLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 Guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guid(i), output);
  }

  // repeated string Name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  // repeated int32 Level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->level(i), output);
  }

  // repeated int32 CombatNum = 4;
  for (int i = 0; i < this->combatnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->combatnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_NEAR_MARCHLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 Guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->guid(i), target);
  }

  // repeated string Name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  // repeated int32 Level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->level(i), target);
  }

  // repeated int32 CombatNum = 4;
  for (int i = 0; i < this->combatnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->combatnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_NEAR_MARCHLIST::ByteSize() const {
  int total_size = 0;

  // repeated uint64 Guid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guid(i));
    }
    total_size += 1 * this->guid_size() + data_size;
  }

  // repeated string Name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated int32 Level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  // repeated int32 CombatNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->combatnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->combatnum(i));
    }
    total_size += 1 * this->combatnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_NEAR_MARCHLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_NEAR_MARCHLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_NEAR_MARCHLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_NEAR_MARCHLIST::MergeFrom(const GC_NEAR_MARCHLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  name_.MergeFrom(from.name_);
  level_.MergeFrom(from.level_);
  combatnum_.MergeFrom(from.combatnum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_NEAR_MARCHLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_NEAR_MARCHLIST::CopyFrom(const GC_NEAR_MARCHLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_NEAR_MARCHLIST::IsInitialized() const {

  return true;
}

void GC_NEAR_MARCHLIST::Swap(GC_NEAR_MARCHLIST* other) {
  if (other != this) {
    guid_.Swap(&other->guid_);
    name_.Swap(&other->name_);
    level_.Swap(&other->level_);
    combatnum_.Swap(&other->combatnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_NEAR_MARCHLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_NEAR_MARCHLIST_descriptor_;
  metadata.reflection = GC_NEAR_MARCHLIST_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_CHAT_CHATTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CHAT_CHATTYPE_descriptor_;
}
bool CG_CHAT_CHATTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_INVALID;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_NORMAL;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_WORLD;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_SYSTEM;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_LOUDSPEAKER;
const CG_CHAT_CHATTYPE CG_CHAT::CHAT_TYPE_FRIEND;
const CG_CHAT_CHATTYPE CG_CHAT::CHATTYPE_MIN;
const CG_CHAT_CHATTYPE CG_CHAT::CHATTYPE_MAX;
const int CG_CHAT::CHATTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_CHAT::kChattypeFieldNumber;
const int CG_CHAT::kChatinfoFieldNumber;
const int CG_CHAT::kReceiverguidFieldNumber;
const int CG_CHAT::kReceivernameFieldNumber;
const int CG_CHAT::kReceiverlevelFieldNumber;
#endif  // !_MSC_VER

CG_CHAT::CG_CHAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CHAT::InitAsDefaultInstance() {
}

CG_CHAT::CG_CHAT(const CG_CHAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CHAT::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverguid_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CHAT::~CG_CHAT() {
  SharedDtor();
}

void CG_CHAT::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void CG_CHAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CHAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CHAT_descriptor_;
}

const CG_CHAT& CG_CHAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CHAT* CG_CHAT::default_instance_ = NULL;

CG_CHAT* CG_CHAT::New() const {
  return new CG_CHAT;
}

void CG_CHAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    receiverguid_ = GOOGLE_ULONGLONG(0);
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
    receiverlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CHAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chattype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatinfo;
        break;
      }

      // required string chatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverguid;
        break;
      }

      // optional uint64 receiverguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverguid_)));
          set_has_receiverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receivername;
        break;
      }

      // optional string receivername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receiverlevel;
        break;
      }

      // optional int32 receiverlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverlevel_)));
          set_has_receiverlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CHAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatinfo(), output);
  }

  // optional uint64 receiverguid = 3;
  if (has_receiverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->receiverguid(), output);
  }

  // optional string receivername = 4;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->receivername(), output);
  }

  // optional int32 receiverlevel = 5;
  if (has_receiverlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receiverlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CHAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatinfo(), target);
  }

  // optional uint64 receiverguid = 3;
  if (has_receiverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->receiverguid(), target);
  }

  // optional string receivername = 4;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receivername(), target);
  }

  // optional int32 receiverlevel = 5;
  if (has_receiverlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receiverlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CHAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chattype = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // required string chatinfo = 2;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // optional uint64 receiverguid = 3;
    if (has_receiverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverguid());
    }

    // optional string receivername = 4;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

    // optional int32 receiverlevel = 5;
    if (has_receiverlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CHAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CHAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CHAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CHAT::MergeFrom(const CG_CHAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_receiverguid()) {
      set_receiverguid(from.receiverguid());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
    if (from.has_receiverlevel()) {
      set_receiverlevel(from.receiverlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CHAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CHAT::CopyFrom(const CG_CHAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CHAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_CHAT::Swap(CG_CHAT* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(receiverguid_, other->receiverguid_);
    std::swap(receivername_, other->receivername_);
    std::swap(receiverlevel_, other->receiverlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CHAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CHAT_descriptor_;
  metadata.reflection = CG_CHAT_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_CHAT_CHATTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CHAT_CHATTYPE_descriptor_;
}
bool GC_CHAT_CHATTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_INVALID;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_NORMAL;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_WORLD;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_SYSTEM;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_LOUDSPEAKER;
const GC_CHAT_CHATTYPE GC_CHAT::CHAT_TYPE_FRIEND;
const GC_CHAT_CHATTYPE GC_CHAT::CHATTYPE_MIN;
const GC_CHAT_CHATTYPE GC_CHAT::CHATTYPE_MAX;
const int GC_CHAT::CHATTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_CHAT::kChattypeFieldNumber;
const int GC_CHAT::kChatinfoFieldNumber;
const int GC_CHAT::kSenderguidFieldNumber;
const int GC_CHAT::kSendernameFieldNumber;
const int GC_CHAT::kSenderlevelFieldNumber;
const int GC_CHAT::kReceiverguidFieldNumber;
const int GC_CHAT::kReceivernameFieldNumber;
#endif  // !_MSC_VER

GC_CHAT::GC_CHAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CHAT::InitAsDefaultInstance() {
}

GC_CHAT::GC_CHAT(const GC_CHAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CHAT::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderguid_ = GOOGLE_ULONGLONG(0);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderlevel_ = 0;
  receiverguid_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CHAT::~GC_CHAT() {
  SharedDtor();
}

void GC_CHAT::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void GC_CHAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CHAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CHAT_descriptor_;
}

const GC_CHAT& GC_CHAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CHAT* GC_CHAT::default_instance_ = NULL;

GC_CHAT* GC_CHAT::New() const {
  return new GC_CHAT;
}

void GC_CHAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    senderguid_ = GOOGLE_ULONGLONG(0);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    senderlevel_ = 0;
    receiverguid_ = GOOGLE_ULONGLONG(0);
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CHAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chattype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatinfo;
        break;
      }

      // required string chatinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_senderguid;
        break;
      }

      // optional uint64 senderguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderguid_)));
          set_has_senderguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendername;
        break;
      }

      // optional string sendername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderlevel;
        break;
      }

      // optional int32 senderlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderlevel_)));
          set_has_senderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiverguid;
        break;
      }

      // optional uint64 receiverguid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverguid_)));
          set_has_receiverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_receivername;
        break;
      }

      // optional string receivername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CHAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatinfo(), output);
  }

  // optional uint64 senderguid = 3;
  if (has_senderguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->senderguid(), output);
  }

  // optional string sendername = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sendername(), output);
  }

  // optional int32 senderlevel = 5;
  if (has_senderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->senderlevel(), output);
  }

  // optional uint64 receiverguid = 6;
  if (has_receiverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->receiverguid(), output);
  }

  // optional string receivername = 7;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->receivername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CHAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chattype = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }

  // required string chatinfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatinfo(), target);
  }

  // optional uint64 senderguid = 3;
  if (has_senderguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->senderguid(), target);
  }

  // optional string sendername = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendername(), target);
  }

  // optional int32 senderlevel = 5;
  if (has_senderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->senderlevel(), target);
  }

  // optional uint64 receiverguid = 6;
  if (has_receiverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->receiverguid(), target);
  }

  // optional string receivername = 7;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->receivername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CHAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chattype = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // required string chatinfo = 2;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // optional uint64 senderguid = 3;
    if (has_senderguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderguid());
    }

    // optional string sendername = 4;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional int32 senderlevel = 5;
    if (has_senderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderlevel());
    }

    // optional uint64 receiverguid = 6;
    if (has_receiverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverguid());
    }

    // optional string receivername = 7;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CHAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CHAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CHAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CHAT::MergeFrom(const GC_CHAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_senderguid()) {
      set_senderguid(from.senderguid());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_senderlevel()) {
      set_senderlevel(from.senderlevel());
    }
    if (from.has_receiverguid()) {
      set_receiverguid(from.receiverguid());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CHAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CHAT::CopyFrom(const GC_CHAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CHAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_CHAT::Swap(GC_CHAT* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(senderguid_, other->senderguid_);
    std::swap(sendername_, other->sendername_);
    std::swap(senderlevel_, other->senderlevel_);
    std::swap(receiverguid_, other->receiverguid_);
    std::swap(receivername_, other->receivername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CHAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CHAT_descriptor_;
  metadata.reflection = GC_CHAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_NOTICE::kNoticeFieldNumber;
const int GC_NOTICE::kFilterRepeatFieldNumber;
#endif  // !_MSC_VER

GC_NOTICE::GC_NOTICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_NOTICE::InitAsDefaultInstance() {
}

GC_NOTICE::GC_NOTICE(const GC_NOTICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_NOTICE::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filterrepeat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_NOTICE::~GC_NOTICE() {
  SharedDtor();
}

void GC_NOTICE::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GC_NOTICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_NOTICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_NOTICE_descriptor_;
}

const GC_NOTICE& GC_NOTICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_NOTICE* GC_NOTICE::default_instance_ = NULL;

GC_NOTICE* GC_NOTICE::New() const {
  return new GC_NOTICE;
}

void GC_NOTICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    filterrepeat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_NOTICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filterRepeat;
        break;
      }

      // optional int32 filterRepeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterrepeat_)));
          set_has_filterrepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_NOTICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filterrepeat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_NOTICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filterrepeat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_NOTICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 filterRepeat = 2;
    if (has_filterrepeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterrepeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_NOTICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_NOTICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_NOTICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_NOTICE::MergeFrom(const GC_NOTICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_filterrepeat()) {
      set_filterrepeat(from.filterrepeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_NOTICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_NOTICE::CopyFrom(const GC_NOTICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_NOTICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_NOTICE::Swap(GC_NOTICE* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(filterrepeat_, other->filterrepeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_NOTICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_NOTICE_descriptor_;
  metadata.reflection = GC_NOTICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneclassidFieldNumber;
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneinstcountFieldNumber;
const int GC_UPDATE_SCENE_INSTACTIVATION::kSceneactivationFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_SCENE_INSTACTIVATION::GC_UPDATE_SCENE_INSTACTIVATION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_SCENE_INSTACTIVATION::InitAsDefaultInstance() {
}

GC_UPDATE_SCENE_INSTACTIVATION::GC_UPDATE_SCENE_INSTACTIVATION(const GC_UPDATE_SCENE_INSTACTIVATION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_SCENE_INSTACTIVATION::SharedCtor() {
  _cached_size_ = 0;
  sceneclassid_ = 0;
  sceneinstcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_SCENE_INSTACTIVATION::~GC_UPDATE_SCENE_INSTACTIVATION() {
  SharedDtor();
}

void GC_UPDATE_SCENE_INSTACTIVATION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_SCENE_INSTACTIVATION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_SCENE_INSTACTIVATION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_SCENE_INSTACTIVATION_descriptor_;
}

const GC_UPDATE_SCENE_INSTACTIVATION& GC_UPDATE_SCENE_INSTACTIVATION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_SCENE_INSTACTIVATION* GC_UPDATE_SCENE_INSTACTIVATION::default_instance_ = NULL;

GC_UPDATE_SCENE_INSTACTIVATION* GC_UPDATE_SCENE_INSTACTIVATION::New() const {
  return new GC_UPDATE_SCENE_INSTACTIVATION;
}

void GC_UPDATE_SCENE_INSTACTIVATION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneclassid_ = 0;
    sceneinstcount_ = 0;
  }
  sceneactivation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_SCENE_INSTACTIVATION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneclassid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneclassid_)));
          set_has_sceneclassid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneinstcount;
        break;
      }

      // required int32 sceneinstcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneinstcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstcount_)));
          set_has_sceneinstcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneactivation;
        break;
      }

      // repeated int32 sceneactivation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneactivation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_sceneactivation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sceneactivation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneactivation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_SCENE_INSTACTIVATION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneclassid = 1;
  if (has_sceneclassid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneclassid(), output);
  }

  // required int32 sceneinstcount = 2;
  if (has_sceneinstcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneinstcount(), output);
  }

  // repeated int32 sceneactivation = 3;
  for (int i = 0; i < this->sceneactivation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sceneactivation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_SCENE_INSTACTIVATION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneclassid = 1;
  if (has_sceneclassid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneclassid(), target);
  }

  // required int32 sceneinstcount = 2;
  if (has_sceneinstcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneinstcount(), target);
  }

  // repeated int32 sceneactivation = 3;
  for (int i = 0; i < this->sceneactivation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->sceneactivation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_SCENE_INSTACTIVATION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneclassid = 1;
    if (has_sceneclassid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneclassid());
    }

    // required int32 sceneinstcount = 2;
    if (has_sceneinstcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstcount());
    }

  }
  // repeated int32 sceneactivation = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneactivation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sceneactivation(i));
    }
    total_size += 1 * this->sceneactivation_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_SCENE_INSTACTIVATION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_SCENE_INSTACTIVATION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_SCENE_INSTACTIVATION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_SCENE_INSTACTIVATION::MergeFrom(const GC_UPDATE_SCENE_INSTACTIVATION& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneactivation_.MergeFrom(from.sceneactivation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneclassid()) {
      set_sceneclassid(from.sceneclassid());
    }
    if (from.has_sceneinstcount()) {
      set_sceneinstcount(from.sceneinstcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_SCENE_INSTACTIVATION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_SCENE_INSTACTIVATION::CopyFrom(const GC_UPDATE_SCENE_INSTACTIVATION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_SCENE_INSTACTIVATION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_UPDATE_SCENE_INSTACTIVATION::Swap(GC_UPDATE_SCENE_INSTACTIVATION* other) {
  if (other != this) {
    std::swap(sceneclassid_, other->sceneclassid_);
    std::swap(sceneinstcount_, other->sceneinstcount_);
    sceneactivation_.Swap(&other->sceneactivation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_SCENE_INSTACTIVATION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_SCENE_INSTACTIVATION_descriptor_;
  metadata.reflection = GC_UPDATE_SCENE_INSTACTIVATION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS_CONNECTED_HEARTBEAT::kSenderworldidFieldNumber;
const int GS_CONNECTED_HEARTBEAT::kReceiverworldidFieldNumber;
#endif  // !_MSC_VER

GS_CONNECTED_HEARTBEAT::GS_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

GS_CONNECTED_HEARTBEAT::GS_CONNECTED_HEARTBEAT(const GS_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  senderworldid_ = 0;
  receiverworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS_CONNECTED_HEARTBEAT::~GS_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void GS_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS_CONNECTED_HEARTBEAT_descriptor_;
}

const GS_CONNECTED_HEARTBEAT& GS_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GS_CONNECTED_HEARTBEAT* GS_CONNECTED_HEARTBEAT::default_instance_ = NULL;

GS_CONNECTED_HEARTBEAT* GS_CONNECTED_HEARTBEAT::New() const {
  return new GS_CONNECTED_HEARTBEAT;
}

void GS_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderworldid_ = 0;
    receiverworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 senderworldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderworldid_)));
          set_has_senderworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_receiverworldid;
        break;
      }

      // required int32 receiverworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverworldid_)));
          set_has_receiverworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 senderworldid = 1;
  if (has_senderworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senderworldid(), output);
  }

  // required int32 receiverworldid = 2;
  if (has_receiverworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiverworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 senderworldid = 1;
  if (has_senderworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senderworldid(), target);
  }

  // required int32 receiverworldid = 2;
  if (has_receiverworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receiverworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 senderworldid = 1;
    if (has_senderworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderworldid());
    }

    // required int32 receiverworldid = 2;
    if (has_receiverworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS_CONNECTED_HEARTBEAT::MergeFrom(const GS_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderworldid()) {
      set_senderworldid(from.senderworldid());
    }
    if (from.has_receiverworldid()) {
      set_receiverworldid(from.receiverworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS_CONNECTED_HEARTBEAT::CopyFrom(const GS_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS_CONNECTED_HEARTBEAT::Swap(GS_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(senderworldid_, other->senderworldid_);
    std::swap(receiverworldid_, other->receiverworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = GS_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG_CONNECTED_HEARTBEAT::kSenderworldidFieldNumber;
const int SG_CONNECTED_HEARTBEAT::kReceiverworldidFieldNumber;
#endif  // !_MSC_VER

SG_CONNECTED_HEARTBEAT::SG_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

SG_CONNECTED_HEARTBEAT::SG_CONNECTED_HEARTBEAT(const SG_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  senderworldid_ = 0;
  receiverworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG_CONNECTED_HEARTBEAT::~SG_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void SG_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG_CONNECTED_HEARTBEAT_descriptor_;
}

const SG_CONNECTED_HEARTBEAT& SG_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

SG_CONNECTED_HEARTBEAT* SG_CONNECTED_HEARTBEAT::default_instance_ = NULL;

SG_CONNECTED_HEARTBEAT* SG_CONNECTED_HEARTBEAT::New() const {
  return new SG_CONNECTED_HEARTBEAT;
}

void SG_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderworldid_ = 0;
    receiverworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 senderworldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderworldid_)));
          set_has_senderworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_receiverworldid;
        break;
      }

      // required int32 receiverworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverworldid_)));
          set_has_receiverworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 senderworldid = 1;
  if (has_senderworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senderworldid(), output);
  }

  // required int32 receiverworldid = 2;
  if (has_receiverworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiverworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 senderworldid = 1;
  if (has_senderworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senderworldid(), target);
  }

  // required int32 receiverworldid = 2;
  if (has_receiverworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receiverworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 senderworldid = 1;
    if (has_senderworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderworldid());
    }

    // required int32 receiverworldid = 2;
    if (has_receiverworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG_CONNECTED_HEARTBEAT::MergeFrom(const SG_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderworldid()) {
      set_senderworldid(from.senderworldid());
    }
    if (from.has_receiverworldid()) {
      set_receiverworldid(from.receiverworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG_CONNECTED_HEARTBEAT::CopyFrom(const SG_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG_CONNECTED_HEARTBEAT::Swap(SG_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(senderworldid_, other->senderworldid_);
    std::swap(receiverworldid_, other->receiverworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = SG_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_MOVE::kPoscountFieldNumber;
const int CG_MOVE::kPosxFieldNumber;
const int CG_MOVE::kPoszFieldNumber;
const int CG_MOVE::kIsmovingFieldNumber;
const int CG_MOVE::kMarchidFieldNumber;
#endif  // !_MSC_VER

CG_MOVE::CG_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_MOVE::InitAsDefaultInstance() {
}

CG_MOVE::CG_MOVE(const CG_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_MOVE::SharedCtor() {
  _cached_size_ = 0;
  poscount_ = 0;
  ismoving_ = 0;
  marchid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_MOVE::~CG_MOVE() {
  SharedDtor();
}

void CG_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_MOVE_descriptor_;
}

const CG_MOVE& CG_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_MOVE* CG_MOVE::default_instance_ = NULL;

CG_MOVE* CG_MOVE::New() const {
  return new CG_MOVE;
}

void CG_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poscount_ = 0;
    ismoving_ = 0;
    marchid_ = GOOGLE_LONGLONG(0);
  }
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 poscount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        if (input->ExpectTag(24)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posz;
        if (input->ExpectTag(32)) goto parse_ismoving;
        break;
      }

      // required int32 ismoving = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismoving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismoving_)));
          set_has_ismoving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_marchid;
        break;
      }

      // required int64 marchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marchid_)));
          set_has_marchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poscount(), output);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->posx(i), output);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posz(i), output);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismoving(), output);
  }

  // required int64 marchid = 5;
  if (has_marchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->marchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poscount(), target);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->posx(i), target);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posz(i), target);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ismoving(), target);
  }

  // required int64 marchid = 5;
  if (has_marchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->marchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 poscount = 1;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

    // required int32 ismoving = 4;
    if (has_ismoving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismoving());
    }

    // required int64 marchid = 5;
    if (has_marchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marchid());
    }

  }
  // repeated int32 posx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_MOVE::MergeFrom(const CG_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
    if (from.has_ismoving()) {
      set_ismoving(from.ismoving());
    }
    if (from.has_marchid()) {
      set_marchid(from.marchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_MOVE::CopyFrom(const CG_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void CG_MOVE::Swap(CG_MOVE* other) {
  if (other != this) {
    std::swap(poscount_, other->poscount_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(ismoving_, other->ismoving_);
    std::swap(marchid_, other->marchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_MOVE_descriptor_;
  metadata.reflection = CG_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MOVE::kServeridFieldNumber;
const int GC_MOVE::kPoscountFieldNumber;
const int GC_MOVE::kPosserialFieldNumber;
const int GC_MOVE::kPosxFieldNumber;
const int GC_MOVE::kPoszFieldNumber;
#endif  // !_MSC_VER

GC_MOVE::GC_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MOVE::InitAsDefaultInstance() {
}

GC_MOVE::GC_MOVE(const GC_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MOVE::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  poscount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MOVE::~GC_MOVE() {
  SharedDtor();
}

void GC_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MOVE_descriptor_;
}

const GC_MOVE& GC_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MOVE* GC_MOVE::default_instance_ = NULL;

GC_MOVE* GC_MOVE::New() const {
  return new GC_MOVE;
}

void GC_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    poscount_ = 0;
  }
  posserial_.Clear();
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_poscount;
        break;
      }

      // required int32 poscount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        break;
      }

      // repeated int32 posserial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posserial())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posserial())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        if (input->ExpectTag(40)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posz;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->poscount(), output);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posserial(i), output);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->posx(i), output);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->posz(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->poscount(), target);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posserial(i), target);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->posx(i), target);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->posz(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 poscount = 2;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

  }
  // repeated int32 posserial = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posserial_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posserial(i));
    }
    total_size += 1 * this->posserial_size() + data_size;
  }

  // repeated int32 posx = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MOVE::MergeFrom(const GC_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posserial_.MergeFrom(from.posserial_);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MOVE::CopyFrom(const GC_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_MOVE::Swap(GC_MOVE* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(poscount_, other->poscount_);
    posserial_.Swap(&other->posserial_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MOVE_descriptor_;
  metadata.reflection = GC_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_STOP::kServeridFieldNumber;
const int GC_STOP::kPosserialFieldNumber;
const int GC_STOP::kPosxFieldNumber;
const int GC_STOP::kPoszFieldNumber;
#endif  // !_MSC_VER

GC_STOP::GC_STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_STOP::InitAsDefaultInstance() {
}

GC_STOP::GC_STOP(const GC_STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_STOP::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  posserial_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_STOP::~GC_STOP() {
  SharedDtor();
}

void GC_STOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_STOP_descriptor_;
}

const GC_STOP& GC_STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_STOP* GC_STOP::default_instance_ = NULL;

GC_STOP* GC_STOP::New() const {
  return new GC_STOP;
}

void GC_STOP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    posserial_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posserial;
        break;
      }

      // required int32 posserial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posserial_)));
          set_has_posserial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // required int32 posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posz;
        break;
      }

      // required int32 posz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posserial(), output);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posserial(), target);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_STOP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 posserial = 2;
    if (has_posserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posserial());
    }

    // required int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posz = 4;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_STOP::MergeFrom(const GC_STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_posserial()) {
      set_posserial(from.posserial());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_STOP::CopyFrom(const GC_STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_STOP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_STOP::Swap(GC_STOP* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(posserial_, other->posserial_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_STOP_descriptor_;
  metadata.reflection = GC_STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TELEMOVE::kObjIdFieldNumber;
const int GC_TELEMOVE::kTargetPosXFieldNumber;
const int GC_TELEMOVE::kTargetPosZFieldNumber;
const int GC_TELEMOVE::kNeedChangeFacetoFieldNumber;
const int GC_TELEMOVE::kAnimaIdFieldNumber;
#endif  // !_MSC_VER

GC_TELEMOVE::GC_TELEMOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TELEMOVE::InitAsDefaultInstance() {
}

GC_TELEMOVE::GC_TELEMOVE(const GC_TELEMOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TELEMOVE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  targetposx_ = 0;
  targetposz_ = 0;
  needchangefaceto_ = 0;
  animaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TELEMOVE::~GC_TELEMOVE() {
  SharedDtor();
}

void GC_TELEMOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TELEMOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TELEMOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TELEMOVE_descriptor_;
}

const GC_TELEMOVE& GC_TELEMOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_TELEMOVE* GC_TELEMOVE::default_instance_ = NULL;

GC_TELEMOVE* GC_TELEMOVE::New() const {
  return new GC_TELEMOVE;
}

void GC_TELEMOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    targetposx_ = 0;
    targetposz_ = 0;
    needchangefaceto_ = 0;
    animaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TELEMOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetPosX;
        break;
      }

      // required int32 targetPosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposx_)));
          set_has_targetposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetPosZ;
        break;
      }

      // required int32 targetPosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposz_)));
          set_has_targetposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needChangeFaceto;
        break;
      }

      // required int32 needChangeFaceto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needChangeFaceto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needchangefaceto_)));
          set_has_needchangefaceto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_animaId;
        break;
      }

      // optional int32 animaId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animaid_)));
          set_has_animaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TELEMOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 targetPosX = 2;
  if (has_targetposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetposx(), output);
  }

  // required int32 targetPosZ = 3;
  if (has_targetposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetposz(), output);
  }

  // required int32 needChangeFaceto = 4;
  if (has_needchangefaceto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needchangefaceto(), output);
  }

  // optional int32 animaId = 5;
  if (has_animaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->animaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TELEMOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 targetPosX = 2;
  if (has_targetposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetposx(), target);
  }

  // required int32 targetPosZ = 3;
  if (has_targetposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetposz(), target);
  }

  // required int32 needChangeFaceto = 4;
  if (has_needchangefaceto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needchangefaceto(), target);
  }

  // optional int32 animaId = 5;
  if (has_animaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->animaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TELEMOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 targetPosX = 2;
    if (has_targetposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetposx());
    }

    // required int32 targetPosZ = 3;
    if (has_targetposz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetposz());
    }

    // required int32 needChangeFaceto = 4;
    if (has_needchangefaceto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needchangefaceto());
    }

    // optional int32 animaId = 5;
    if (has_animaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TELEMOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TELEMOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TELEMOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TELEMOVE::MergeFrom(const GC_TELEMOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_targetposx()) {
      set_targetposx(from.targetposx());
    }
    if (from.has_targetposz()) {
      set_targetposz(from.targetposz());
    }
    if (from.has_needchangefaceto()) {
      set_needchangefaceto(from.needchangefaceto());
    }
    if (from.has_animaid()) {
      set_animaid(from.animaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TELEMOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TELEMOVE::CopyFrom(const GC_TELEMOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TELEMOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_TELEMOVE::Swap(GC_TELEMOVE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(targetposx_, other->targetposx_);
    std::swap(targetposz_, other->targetposz_);
    std::swap(needchangefaceto_, other->needchangefaceto_);
    std::swap(animaid_, other->animaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TELEMOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TELEMOVE_descriptor_;
  metadata.reflection = GC_TELEMOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RET_USE_SKILL::kSkillIdFieldNumber;
const int GC_RET_USE_SKILL::kSenderIdFieldNumber;
const int GC_RET_USE_SKILL::kTargetIdFieldNumber;
const int GC_RET_USE_SKILL::kSkillfailTypeFieldNumber;
const int GC_RET_USE_SKILL::kSkillnameFieldNumber;
#endif  // !_MSC_VER

GC_RET_USE_SKILL::GC_RET_USE_SKILL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RET_USE_SKILL::InitAsDefaultInstance() {
}

GC_RET_USE_SKILL::GC_RET_USE_SKILL(const GC_RET_USE_SKILL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RET_USE_SKILL::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  senderid_ = 0;
  targetid_ = 0;
  skillfailtype_ = 0;
  skillname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RET_USE_SKILL::~GC_RET_USE_SKILL() {
  SharedDtor();
}

void GC_RET_USE_SKILL::SharedDtor() {
  if (skillname_ != &::google::protobuf::internal::kEmptyString) {
    delete skillname_;
  }
  if (this != default_instance_) {
  }
}

void GC_RET_USE_SKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RET_USE_SKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RET_USE_SKILL_descriptor_;
}

const GC_RET_USE_SKILL& GC_RET_USE_SKILL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_RET_USE_SKILL* GC_RET_USE_SKILL::default_instance_ = NULL;

GC_RET_USE_SKILL* GC_RET_USE_SKILL::New() const {
  return new GC_RET_USE_SKILL;
}

void GC_RET_USE_SKILL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    senderid_ = 0;
    targetid_ = 0;
    skillfailtype_ = 0;
    if (has_skillname()) {
      if (skillname_ != &::google::protobuf::internal::kEmptyString) {
        skillname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RET_USE_SKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderId;
        break;
      }

      // required int32 senderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TargetId;
        break;
      }

      // required int32 TargetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillfailType;
        break;
      }

      // optional int32 skillfailType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillfailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillfailtype_)));
          set_has_skillfailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skillname;
        break;
      }

      // optional string skillname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillname().data(), this->skillname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RET_USE_SKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 senderId = 2;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senderid(), output);
  }

  // required int32 TargetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  // optional int32 skillfailType = 4;
  if (has_skillfailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillfailtype(), output);
  }

  // optional string skillname = 5;
  if (has_skillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillname().data(), this->skillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->skillname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RET_USE_SKILL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 senderId = 2;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->senderid(), target);
  }

  // required int32 TargetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  // optional int32 skillfailType = 4;
  if (has_skillfailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillfailtype(), target);
  }

  // optional string skillname = 5;
  if (has_skillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillname().data(), this->skillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->skillname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RET_USE_SKILL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 senderId = 2;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // required int32 TargetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 skillfailType = 4;
    if (has_skillfailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillfailtype());
    }

    // optional string skillname = 5;
    if (has_skillname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RET_USE_SKILL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RET_USE_SKILL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RET_USE_SKILL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RET_USE_SKILL::MergeFrom(const GC_RET_USE_SKILL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_skillfailtype()) {
      set_skillfailtype(from.skillfailtype());
    }
    if (from.has_skillname()) {
      set_skillname(from.skillname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RET_USE_SKILL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RET_USE_SKILL::CopyFrom(const GC_RET_USE_SKILL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RET_USE_SKILL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_RET_USE_SKILL::Swap(GC_RET_USE_SKILL* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(senderid_, other->senderid_);
    std::swap(targetid_, other->targetid_);
    std::swap(skillfailtype_, other->skillfailtype_);
    std::swap(skillname_, other->skillname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RET_USE_SKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RET_USE_SKILL_descriptor_;
  metadata.reflection = GC_RET_USE_SKILL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_ANIMATION_STATE::kObjIdFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kAnimationStateFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kVerticalOffDisFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHorizontalOffDisFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kStateLastTimeFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kStateResortTimeFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHitTimesFieldNumber;
const int GC_UPDATE_ANIMATION_STATE::kHitIntervalFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_ANIMATION_STATE::GC_UPDATE_ANIMATION_STATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_ANIMATION_STATE::InitAsDefaultInstance() {
}

GC_UPDATE_ANIMATION_STATE::GC_UPDATE_ANIMATION_STATE(const GC_UPDATE_ANIMATION_STATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_ANIMATION_STATE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  animationstate_ = 0;
  verticaloffdis_ = 0;
  horizontaloffdis_ = 0;
  statelasttime_ = 0;
  stateresorttime_ = 0;
  hittimes_ = 0;
  hitinterval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_ANIMATION_STATE::~GC_UPDATE_ANIMATION_STATE() {
  SharedDtor();
}

void GC_UPDATE_ANIMATION_STATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_ANIMATION_STATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_ANIMATION_STATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_ANIMATION_STATE_descriptor_;
}

const GC_UPDATE_ANIMATION_STATE& GC_UPDATE_ANIMATION_STATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_ANIMATION_STATE* GC_UPDATE_ANIMATION_STATE::default_instance_ = NULL;

GC_UPDATE_ANIMATION_STATE* GC_UPDATE_ANIMATION_STATE::New() const {
  return new GC_UPDATE_ANIMATION_STATE;
}

void GC_UPDATE_ANIMATION_STATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    animationstate_ = 0;
    verticaloffdis_ = 0;
    horizontaloffdis_ = 0;
    statelasttime_ = 0;
    stateresorttime_ = 0;
    hittimes_ = 0;
    hitinterval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_ANIMATION_STATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AnimationState;
        break;
      }

      // required int32 AnimationState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimationState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animationstate_)));
          set_has_animationstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_verticalOffDis;
        break;
      }

      // optional int32 verticalOffDis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verticalOffDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verticaloffdis_)));
          set_has_verticaloffdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_horizontalOffDis;
        break;
      }

      // optional int32 horizontalOffDis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horizontalOffDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontaloffdis_)));
          set_has_horizontaloffdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stateLastTime;
        break;
      }

      // optional int32 stateLastTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statelasttime_)));
          set_has_statelasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stateResortTime;
        break;
      }

      // optional int32 stateResortTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateResortTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateresorttime_)));
          set_has_stateresorttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hitTimes;
        break;
      }

      // optional int32 hitTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hittimes_)));
          set_has_hittimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hitInterval;
        break;
      }

      // optional int32 hitInterval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitinterval_)));
          set_has_hitinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_ANIMATION_STATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 AnimationState = 2;
  if (has_animationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->animationstate(), output);
  }

  // optional int32 verticalOffDis = 3;
  if (has_verticaloffdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verticaloffdis(), output);
  }

  // optional int32 horizontalOffDis = 4;
  if (has_horizontaloffdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->horizontaloffdis(), output);
  }

  // optional int32 stateLastTime = 5;
  if (has_statelasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->statelasttime(), output);
  }

  // optional int32 stateResortTime = 6;
  if (has_stateresorttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stateresorttime(), output);
  }

  // optional int32 hitTimes = 7;
  if (has_hittimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hittimes(), output);
  }

  // optional int32 hitInterval = 8;
  if (has_hitinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hitinterval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_ANIMATION_STATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 AnimationState = 2;
  if (has_animationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->animationstate(), target);
  }

  // optional int32 verticalOffDis = 3;
  if (has_verticaloffdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->verticaloffdis(), target);
  }

  // optional int32 horizontalOffDis = 4;
  if (has_horizontaloffdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->horizontaloffdis(), target);
  }

  // optional int32 stateLastTime = 5;
  if (has_statelasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->statelasttime(), target);
  }

  // optional int32 stateResortTime = 6;
  if (has_stateresorttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stateresorttime(), target);
  }

  // optional int32 hitTimes = 7;
  if (has_hittimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hittimes(), target);
  }

  // optional int32 hitInterval = 8;
  if (has_hitinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hitinterval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_ANIMATION_STATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 AnimationState = 2;
    if (has_animationstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animationstate());
    }

    // optional int32 verticalOffDis = 3;
    if (has_verticaloffdis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verticaloffdis());
    }

    // optional int32 horizontalOffDis = 4;
    if (has_horizontaloffdis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontaloffdis());
    }

    // optional int32 stateLastTime = 5;
    if (has_statelasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statelasttime());
    }

    // optional int32 stateResortTime = 6;
    if (has_stateresorttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateresorttime());
    }

    // optional int32 hitTimes = 7;
    if (has_hittimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hittimes());
    }

    // optional int32 hitInterval = 8;
    if (has_hitinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitinterval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_ANIMATION_STATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_ANIMATION_STATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_ANIMATION_STATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_ANIMATION_STATE::MergeFrom(const GC_UPDATE_ANIMATION_STATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_animationstate()) {
      set_animationstate(from.animationstate());
    }
    if (from.has_verticaloffdis()) {
      set_verticaloffdis(from.verticaloffdis());
    }
    if (from.has_horizontaloffdis()) {
      set_horizontaloffdis(from.horizontaloffdis());
    }
    if (from.has_statelasttime()) {
      set_statelasttime(from.statelasttime());
    }
    if (from.has_stateresorttime()) {
      set_stateresorttime(from.stateresorttime());
    }
    if (from.has_hittimes()) {
      set_hittimes(from.hittimes());
    }
    if (from.has_hitinterval()) {
      set_hitinterval(from.hitinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_ANIMATION_STATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_ANIMATION_STATE::CopyFrom(const GC_UPDATE_ANIMATION_STATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_ANIMATION_STATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_UPDATE_ANIMATION_STATE::Swap(GC_UPDATE_ANIMATION_STATE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(animationstate_, other->animationstate_);
    std::swap(verticaloffdis_, other->verticaloffdis_);
    std::swap(horizontaloffdis_, other->horizontaloffdis_);
    std::swap(statelasttime_, other->statelasttime_);
    std::swap(stateresorttime_, other->stateresorttime_);
    std::swap(hittimes_, other->hittimes_);
    std::swap(hitinterval_, other->hitinterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_ANIMATION_STATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_ANIMATION_STATE_descriptor_;
  metadata.reflection = GC_UPDATE_ANIMATION_STATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DELETE_OBJ::kServerIdFieldNumber;
#endif  // !_MSC_VER

GC_DELETE_OBJ::GC_DELETE_OBJ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DELETE_OBJ::InitAsDefaultInstance() {
}

GC_DELETE_OBJ::GC_DELETE_OBJ(const GC_DELETE_OBJ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DELETE_OBJ::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DELETE_OBJ::~GC_DELETE_OBJ() {
  SharedDtor();
}

void GC_DELETE_OBJ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DELETE_OBJ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DELETE_OBJ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DELETE_OBJ_descriptor_;
}

const GC_DELETE_OBJ& GC_DELETE_OBJ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_DELETE_OBJ* GC_DELETE_OBJ::default_instance_ = NULL;

GC_DELETE_OBJ* GC_DELETE_OBJ::New() const {
  return new GC_DELETE_OBJ;
}

void GC_DELETE_OBJ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DELETE_OBJ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DELETE_OBJ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DELETE_OBJ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DELETE_OBJ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DELETE_OBJ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DELETE_OBJ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DELETE_OBJ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DELETE_OBJ::MergeFrom(const GC_DELETE_OBJ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DELETE_OBJ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DELETE_OBJ::CopyFrom(const GC_DELETE_OBJ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DELETE_OBJ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_DELETE_OBJ::Swap(GC_DELETE_OBJ* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DELETE_OBJ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DELETE_OBJ_descriptor_;
  metadata.reflection = GC_DELETE_OBJ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ATTACKFLY::kObjIdFieldNumber;
const int GC_ATTACKFLY::kDisFieldNumber;
const int GC_ATTACKFLY::kHightFieldNumber;
const int GC_ATTACKFLY::kFlyTimeFieldNumber;
#endif  // !_MSC_VER

GC_ATTACKFLY::GC_ATTACKFLY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ATTACKFLY::InitAsDefaultInstance() {
}

GC_ATTACKFLY::GC_ATTACKFLY(const GC_ATTACKFLY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ATTACKFLY::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  dis_ = 0;
  hight_ = 0;
  flytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ATTACKFLY::~GC_ATTACKFLY() {
  SharedDtor();
}

void GC_ATTACKFLY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ATTACKFLY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ATTACKFLY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ATTACKFLY_descriptor_;
}

const GC_ATTACKFLY& GC_ATTACKFLY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ATTACKFLY* GC_ATTACKFLY::default_instance_ = NULL;

GC_ATTACKFLY* GC_ATTACKFLY::New() const {
  return new GC_ATTACKFLY;
}

void GC_ATTACKFLY::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    dis_ = 0;
    hight_ = 0;
    flytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ATTACKFLY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Dis;
        break;
      }

      // required int32 Dis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dis_)));
          set_has_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Hight;
        break;
      }

      // required int32 Hight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
          set_has_hight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FlyTime;
        break;
      }

      // required int32 FlyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flytime_)));
          set_has_flytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ATTACKFLY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 Dis = 2;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dis(), output);
  }

  // required int32 Hight = 3;
  if (has_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hight(), output);
  }

  // required int32 FlyTime = 4;
  if (has_flytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ATTACKFLY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 Dis = 2;
  if (has_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dis(), target);
  }

  // required int32 Hight = 3;
  if (has_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hight(), target);
  }

  // required int32 FlyTime = 4;
  if (has_flytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ATTACKFLY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 Dis = 2;
    if (has_dis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dis());
    }

    // required int32 Hight = 3;
    if (has_hight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hight());
    }

    // required int32 FlyTime = 4;
    if (has_flytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ATTACKFLY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ATTACKFLY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ATTACKFLY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ATTACKFLY::MergeFrom(const GC_ATTACKFLY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_dis()) {
      set_dis(from.dis());
    }
    if (from.has_hight()) {
      set_hight(from.hight());
    }
    if (from.has_flytime()) {
      set_flytime(from.flytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ATTACKFLY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ATTACKFLY::CopyFrom(const GC_ATTACKFLY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ATTACKFLY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_ATTACKFLY::Swap(GC_ATTACKFLY* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(dis_, other->dis_);
    std::swap(hight_, other->hight_);
    std::swap(flytime_, other->flytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ATTACKFLY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ATTACKFLY_descriptor_;
  metadata.reflection = GC_ATTACKFLY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_FORCE_SETPOS::kServerIDFieldNumber;
const int GC_FORCE_SETPOS::kPosXFieldNumber;
const int GC_FORCE_SETPOS::kPosZFieldNumber;
#endif  // !_MSC_VER

GC_FORCE_SETPOS::GC_FORCE_SETPOS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_FORCE_SETPOS::InitAsDefaultInstance() {
}

GC_FORCE_SETPOS::GC_FORCE_SETPOS(const GC_FORCE_SETPOS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_FORCE_SETPOS::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_FORCE_SETPOS::~GC_FORCE_SETPOS() {
  SharedDtor();
}

void GC_FORCE_SETPOS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_FORCE_SETPOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_FORCE_SETPOS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_FORCE_SETPOS_descriptor_;
}

const GC_FORCE_SETPOS& GC_FORCE_SETPOS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_FORCE_SETPOS* GC_FORCE_SETPOS::default_instance_ = NULL;

GC_FORCE_SETPOS* GC_FORCE_SETPOS::New() const {
  return new GC_FORCE_SETPOS;
}

void GC_FORCE_SETPOS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_FORCE_SETPOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // required int32 PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PosZ;
        break;
      }

      // required int32 PosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_FORCE_SETPOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ServerID = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // required int32 PosZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_FORCE_SETPOS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ServerID = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // required int32 PosZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_FORCE_SETPOS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 PosZ = 3;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_FORCE_SETPOS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_FORCE_SETPOS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_FORCE_SETPOS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_FORCE_SETPOS::MergeFrom(const GC_FORCE_SETPOS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_FORCE_SETPOS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_FORCE_SETPOS::CopyFrom(const GC_FORCE_SETPOS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_FORCE_SETPOS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_FORCE_SETPOS::Swap(GC_FORCE_SETPOS* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_FORCE_SETPOS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_FORCE_SETPOS_descriptor_;
  metadata.reflection = GC_FORCE_SETPOS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_UPDATE_NEEDIMPACTINFO::kObjIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kImpactIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kImpactLogicIdFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kIsForeverFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kRemainTimeFieldNumber;
const int GC_UPDATE_NEEDIMPACTINFO::kIsAddFieldNumber;
#endif  // !_MSC_VER

GC_UPDATE_NEEDIMPACTINFO::GC_UPDATE_NEEDIMPACTINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_UPDATE_NEEDIMPACTINFO::InitAsDefaultInstance() {
}

GC_UPDATE_NEEDIMPACTINFO::GC_UPDATE_NEEDIMPACTINFO(const GC_UPDATE_NEEDIMPACTINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_UPDATE_NEEDIMPACTINFO::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_UPDATE_NEEDIMPACTINFO::~GC_UPDATE_NEEDIMPACTINFO() {
  SharedDtor();
}

void GC_UPDATE_NEEDIMPACTINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_UPDATE_NEEDIMPACTINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_UPDATE_NEEDIMPACTINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_UPDATE_NEEDIMPACTINFO_descriptor_;
}

const GC_UPDATE_NEEDIMPACTINFO& GC_UPDATE_NEEDIMPACTINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_UPDATE_NEEDIMPACTINFO* GC_UPDATE_NEEDIMPACTINFO::default_instance_ = NULL;

GC_UPDATE_NEEDIMPACTINFO* GC_UPDATE_NEEDIMPACTINFO::New() const {
  return new GC_UPDATE_NEEDIMPACTINFO;
}

void GC_UPDATE_NEEDIMPACTINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
  }
  impactid_.Clear();
  impactlogicid_.Clear();
  isforever_.Clear();
  remaintime_.Clear();
  isadd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_UPDATE_NEEDIMPACTINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impactId;
        break;
      }

      // repeated int32 impactId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impactId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_impactid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_impactid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impactId;
        if (input->ExpectTag(24)) goto parse_impactLogicId;
        break;
      }

      // repeated int32 impactLogicId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impactLogicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_impactlogicid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_impactlogicid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_impactLogicId;
        if (input->ExpectTag(32)) goto parse_isForever;
        break;
      }

      // repeated int32 isForever = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_isforever())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isforever())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isForever;
        if (input->ExpectTag(40)) goto parse_remainTime;
        break;
      }

      // repeated int32 remainTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_remaintime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remaintime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainTime;
        if (input->ExpectTag(48)) goto parse_isAdd;
        break;
      }

      // repeated int32 isAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_isadd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isadd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAdd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_UPDATE_NEEDIMPACTINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // repeated int32 impactId = 2;
  for (int i = 0; i < this->impactid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->impactid(i), output);
  }

  // repeated int32 impactLogicId = 3;
  for (int i = 0; i < this->impactlogicid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->impactlogicid(i), output);
  }

  // repeated int32 isForever = 4;
  for (int i = 0; i < this->isforever_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->isforever(i), output);
  }

  // repeated int32 remainTime = 5;
  for (int i = 0; i < this->remaintime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->remaintime(i), output);
  }

  // repeated int32 isAdd = 6;
  for (int i = 0; i < this->isadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->isadd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_UPDATE_NEEDIMPACTINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // repeated int32 impactId = 2;
  for (int i = 0; i < this->impactid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->impactid(i), target);
  }

  // repeated int32 impactLogicId = 3;
  for (int i = 0; i < this->impactlogicid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->impactlogicid(i), target);
  }

  // repeated int32 isForever = 4;
  for (int i = 0; i < this->isforever_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->isforever(i), target);
  }

  // repeated int32 remainTime = 5;
  for (int i = 0; i < this->remaintime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->remaintime(i), target);
  }

  // repeated int32 isAdd = 6;
  for (int i = 0; i < this->isadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->isadd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_UPDATE_NEEDIMPACTINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  // repeated int32 impactId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->impactid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->impactid(i));
    }
    total_size += 1 * this->impactid_size() + data_size;
  }

  // repeated int32 impactLogicId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->impactlogicid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->impactlogicid(i));
    }
    total_size += 1 * this->impactlogicid_size() + data_size;
  }

  // repeated int32 isForever = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->isforever_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isforever(i));
    }
    total_size += 1 * this->isforever_size() + data_size;
  }

  // repeated int32 remainTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaintime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remaintime(i));
    }
    total_size += 1 * this->remaintime_size() + data_size;
  }

  // repeated int32 isAdd = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->isadd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isadd(i));
    }
    total_size += 1 * this->isadd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_UPDATE_NEEDIMPACTINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_UPDATE_NEEDIMPACTINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_UPDATE_NEEDIMPACTINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_UPDATE_NEEDIMPACTINFO::MergeFrom(const GC_UPDATE_NEEDIMPACTINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  impactid_.MergeFrom(from.impactid_);
  impactlogicid_.MergeFrom(from.impactlogicid_);
  isforever_.MergeFrom(from.isforever_);
  remaintime_.MergeFrom(from.remaintime_);
  isadd_.MergeFrom(from.isadd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_UPDATE_NEEDIMPACTINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_UPDATE_NEEDIMPACTINFO::CopyFrom(const GC_UPDATE_NEEDIMPACTINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_UPDATE_NEEDIMPACTINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_UPDATE_NEEDIMPACTINFO::Swap(GC_UPDATE_NEEDIMPACTINFO* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    impactid_.Swap(&other->impactid_);
    impactlogicid_.Swap(&other->impactlogicid_);
    isforever_.Swap(&other->isforever_);
    remaintime_.Swap(&other->remaintime_);
    isadd_.Swap(&other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_UPDATE_NEEDIMPACTINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_UPDATE_NEEDIMPACTINFO_descriptor_;
  metadata.reflection = GC_UPDATE_NEEDIMPACTINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PLAY_EFFECT::kObjIDFieldNumber;
const int GC_PLAY_EFFECT::kEffectIDFieldNumber;
#endif  // !_MSC_VER

GC_PLAY_EFFECT::GC_PLAY_EFFECT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PLAY_EFFECT::InitAsDefaultInstance() {
}

GC_PLAY_EFFECT::GC_PLAY_EFFECT(const GC_PLAY_EFFECT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PLAY_EFFECT::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  effectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PLAY_EFFECT::~GC_PLAY_EFFECT() {
  SharedDtor();
}

void GC_PLAY_EFFECT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PLAY_EFFECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PLAY_EFFECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PLAY_EFFECT_descriptor_;
}

const GC_PLAY_EFFECT& GC_PLAY_EFFECT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_PLAY_EFFECT* GC_PLAY_EFFECT::default_instance_ = NULL;

GC_PLAY_EFFECT* GC_PLAY_EFFECT::New() const {
  return new GC_PLAY_EFFECT;
}

void GC_PLAY_EFFECT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    effectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PLAY_EFFECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ObjID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EffectID;
        break;
      }

      // required int32 EffectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PLAY_EFFECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ObjID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 EffectID = 2;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PLAY_EFFECT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ObjID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 EffectID = 2;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PLAY_EFFECT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ObjID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 EffectID = 2;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PLAY_EFFECT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PLAY_EFFECT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PLAY_EFFECT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PLAY_EFFECT::MergeFrom(const GC_PLAY_EFFECT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PLAY_EFFECT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PLAY_EFFECT::CopyFrom(const GC_PLAY_EFFECT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PLAY_EFFECT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_PLAY_EFFECT::Swap(GC_PLAY_EFFECT* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(effectid_, other->effectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PLAY_EFFECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PLAY_EFFECT_descriptor_;
  metadata.reflection = GC_PLAY_EFFECT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_REMOVEEFFECT::kObjIdFieldNumber;
const int GC_REMOVEEFFECT::kEffectIdFieldNumber;
#endif  // !_MSC_VER

GC_REMOVEEFFECT::GC_REMOVEEFFECT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_REMOVEEFFECT::InitAsDefaultInstance() {
}

GC_REMOVEEFFECT::GC_REMOVEEFFECT(const GC_REMOVEEFFECT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_REMOVEEFFECT::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  effectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_REMOVEEFFECT::~GC_REMOVEEFFECT() {
  SharedDtor();
}

void GC_REMOVEEFFECT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_REMOVEEFFECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_REMOVEEFFECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_REMOVEEFFECT_descriptor_;
}

const GC_REMOVEEFFECT& GC_REMOVEEFFECT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_REMOVEEFFECT* GC_REMOVEEFFECT::default_instance_ = NULL;

GC_REMOVEEFFECT* GC_REMOVEEFFECT::New() const {
  return new GC_REMOVEEFFECT;
}

void GC_REMOVEEFFECT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    effectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_REMOVEEFFECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectId;
        break;
      }

      // required int32 effectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_REMOVEEFFECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required int32 effectId = 2;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_REMOVEEFFECT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required int32 effectId = 2;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_REMOVEEFFECT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 effectId = 2;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_REMOVEEFFECT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_REMOVEEFFECT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_REMOVEEFFECT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_REMOVEEFFECT::MergeFrom(const GC_REMOVEEFFECT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_REMOVEEFFECT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_REMOVEEFFECT::CopyFrom(const GC_REMOVEEFFECT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_REMOVEEFFECT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_REMOVEEFFECT::Swap(GC_REMOVEEFFECT* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(effectid_, other->effectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_REMOVEEFFECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_REMOVEEFFECT_descriptor_;
  metadata.reflection = GC_REMOVEEFFECT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_FIGHT::kSceneIDFieldNumber;
const int CG_FIGHT::kTypeFieldNumber;
const int CG_FIGHT::kAttackIdFieldNumber;
const int CG_FIGHT::kDefenceIdFieldNumber;
#endif  // !_MSC_VER

CG_FIGHT::CG_FIGHT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_FIGHT::InitAsDefaultInstance() {
}

CG_FIGHT::CG_FIGHT(const CG_FIGHT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_FIGHT::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  type_ = 0;
  attackid_ = GOOGLE_LONGLONG(0);
  defenceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_FIGHT::~CG_FIGHT() {
  SharedDtor();
}

void CG_FIGHT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_FIGHT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_FIGHT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_FIGHT_descriptor_;
}

const CG_FIGHT& CG_FIGHT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_FIGHT* CG_FIGHT::default_instance_ = NULL;

CG_FIGHT* CG_FIGHT::New() const {
  return new CG_FIGHT;
}

void CG_FIGHT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0;
    type_ = 0;
    attackid_ = GOOGLE_LONGLONG(0);
    defenceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_FIGHT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttackId;
        break;
      }

      // required int64 AttackId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackid_)));
          set_has_attackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DefenceId;
        break;
      }

      // optional int64 DefenceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defenceid_)));
          set_has_defenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_FIGHT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int64 AttackId = 3;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attackid(), output);
  }

  // optional int64 DefenceId = 4;
  if (has_defenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->defenceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_FIGHT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int64 AttackId = 3;
  if (has_attackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attackid(), target);
  }

  // optional int64 DefenceId = 4;
  if (has_defenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->defenceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_FIGHT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 AttackId = 3;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackid());
    }

    // optional int64 DefenceId = 4;
    if (has_defenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defenceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_FIGHT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_FIGHT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_FIGHT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_FIGHT::MergeFrom(const CG_FIGHT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_defenceid()) {
      set_defenceid(from.defenceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_FIGHT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_FIGHT::CopyFrom(const CG_FIGHT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_FIGHT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CG_FIGHT::Swap(CG_FIGHT* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(type_, other->type_);
    std::swap(attackid_, other->attackid_);
    std::swap(defenceid_, other->defenceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_FIGHT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_FIGHT_descriptor_;
  metadata.reflection = CG_FIGHT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_LEAVE_COPYSCENE::kNoParamFieldNumber;
#endif  // !_MSC_VER

CG_LEAVE_COPYSCENE::CG_LEAVE_COPYSCENE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_LEAVE_COPYSCENE::InitAsDefaultInstance() {
}

CG_LEAVE_COPYSCENE::CG_LEAVE_COPYSCENE(const CG_LEAVE_COPYSCENE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_LEAVE_COPYSCENE::SharedCtor() {
  _cached_size_ = 0;
  noparam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LEAVE_COPYSCENE::~CG_LEAVE_COPYSCENE() {
  SharedDtor();
}

void CG_LEAVE_COPYSCENE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_LEAVE_COPYSCENE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_LEAVE_COPYSCENE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LEAVE_COPYSCENE_descriptor_;
}

const CG_LEAVE_COPYSCENE& CG_LEAVE_COPYSCENE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_LEAVE_COPYSCENE* CG_LEAVE_COPYSCENE::default_instance_ = NULL;

CG_LEAVE_COPYSCENE* CG_LEAVE_COPYSCENE::New() const {
  return new CG_LEAVE_COPYSCENE;
}

void CG_LEAVE_COPYSCENE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noparam_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_LEAVE_COPYSCENE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 noParam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noparam_)));
          set_has_noparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_LEAVE_COPYSCENE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 noParam = 1;
  if (has_noparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_LEAVE_COPYSCENE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 noParam = 1;
  if (has_noparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_LEAVE_COPYSCENE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 noParam = 1;
    if (has_noparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LEAVE_COPYSCENE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_LEAVE_COPYSCENE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_LEAVE_COPYSCENE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_LEAVE_COPYSCENE::MergeFrom(const CG_LEAVE_COPYSCENE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noparam()) {
      set_noparam(from.noparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_LEAVE_COPYSCENE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_LEAVE_COPYSCENE::CopyFrom(const CG_LEAVE_COPYSCENE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LEAVE_COPYSCENE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_LEAVE_COPYSCENE::Swap(CG_LEAVE_COPYSCENE* other) {
  if (other != this) {
    std::swap(noparam_, other->noparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_LEAVE_COPYSCENE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_LEAVE_COPYSCENE_descriptor_;
  metadata.reflection = CG_LEAVE_COPYSCENE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
