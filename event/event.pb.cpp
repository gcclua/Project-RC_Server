// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* UserLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendGiftToPlatid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendGiftToPlatid_reflection_ = NULL;
const ::google::protobuf::Descriptor* WG_UserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WG_UserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkingStatus_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkingStatus_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRemoteUser_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRemoteUser_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWG_CheckAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWG_CheckAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Profile_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Profile_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddExp_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddExp_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddExp_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddExp_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_CanAttack_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_CanAttack_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_CanAttack_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_CanAttack_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddCredit_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddCredit_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddCredit_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddCredit_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AdminOpt_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AdminOpt_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AdminOpt_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AdminOpt_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetLevel_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetLevel_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetLevel_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetLevel_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanChat_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanChat_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanChat_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanChat_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Reload_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Reload_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Reload_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Reload_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BandWGUser_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BandWGUser_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BandWGUser_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BandWGUser_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_StarUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_StarUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* callbackFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  callbackFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* callbackFriendToPlatid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  callbackFriendToPlatid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddHonor_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddHonor_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddHonor_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddHonor_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  UserLogin_Req_descriptor_ = file->message_type(0);
  static const int UserLogin_Req_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, siteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, yellow_dmd_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, friends_platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, mydb_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, mydb_oldid_),
  };
  UserLogin_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_Req_descriptor_,
      UserLogin_Req::default_instance_,
      UserLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin_Req));
  UserLogin_Rsp_descriptor_ = file->message_type(1);
  static const int UserLogin_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, port1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, sid_),
  };
  UserLogin_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_Rsp_descriptor_,
      UserLogin_Rsp::default_instance_,
      UserLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin_Rsp));
  SendGift_descriptor_ = file->message_type(2);
  static const int SendGift_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, friends_platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, succ_),
  };
  SendGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendGift_descriptor_,
      SendGift::default_instance_,
      SendGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendGift));
  SendGiftToPlatid_descriptor_ = file->message_type(3);
  static const int SendGiftToPlatid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftToPlatid, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftToPlatid, platid_),
  };
  SendGiftToPlatid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendGiftToPlatid_descriptor_,
      SendGiftToPlatid::default_instance_,
      SendGiftToPlatid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftToPlatid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftToPlatid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendGiftToPlatid));
  WG_UserLeave_descriptor_ = file->message_type(4);
  static const int WG_UserLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, fd_),
  };
  WG_UserLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WG_UserLeave_descriptor_,
      WG_UserLeave::default_instance_,
      WG_UserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WG_UserLeave));
  WorkingStatus_Req_descriptor_ = file->message_type(5);
  static const int WorkingStatus_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, finish_),
  };
  WorkingStatus_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkingStatus_Req_descriptor_,
      WorkingStatus_Req::default_instance_,
      WorkingStatus_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkingStatus_Req));
  UserAuth_Req_descriptor_ = file->message_type(6);
  static const int UserAuth_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, sockfd_),
  };
  UserAuth_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuth_Req_descriptor_,
      UserAuth_Req::default_instance_,
      UserAuth_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuth_Req));
  UserAuth_Rsp_descriptor_ = file->message_type(7);
  static const int UserAuth_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, pass_),
  };
  UserAuth_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuth_Rsp_descriptor_,
      UserAuth_Rsp::default_instance_,
      UserAuth_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuth_Rsp));
  SendRemoteUser_Req_descriptor_ = file->message_type(8);
  static const int SendRemoteUser_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, text_),
  };
  SendRemoteUser_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRemoteUser_Req_descriptor_,
      SendRemoteUser_Req::default_instance_,
      SendRemoteUser_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRemoteUser_Req));
  ForwardInfo_descriptor_ = file->message_type(9);
  static const int ForwardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, platid_),
  };
  ForwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardInfo_descriptor_,
      ForwardInfo::default_instance_,
      ForwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardInfo));
  GWG_CheckAttack_descriptor_ = file->message_type(10);
  static const int GWG_CheckAttack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_CheckAttack, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_CheckAttack, recoveryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_CheckAttack, isattacked_),
  };
  GWG_CheckAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWG_CheckAttack_descriptor_,
      GWG_CheckAttack::default_instance_,
      GWG_CheckAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_CheckAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_CheckAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWG_CheckAttack));
  Admin_Profile_Req_descriptor_ = file->message_type(11);
  static const int Admin_Profile_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Profile_Req, cmd_),
  };
  Admin_Profile_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_Profile_Req_descriptor_,
      Admin_Profile_Req::default_instance_,
      Admin_Profile_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Profile_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Profile_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_Profile_Req));
  Admin_AddExp_Req_descriptor_ = file->message_type(12);
  static const int Admin_AddExp_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, fromweb_),
  };
  Admin_AddExp_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddExp_Req_descriptor_,
      Admin_AddExp_Req::default_instance_,
      Admin_AddExp_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddExp_Req));
  Admin_AddExp_Rsp_descriptor_ = file->message_type(13);
  static const int Admin_AddExp_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, oldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, oldexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, newlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, newexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, fromweb_),
  };
  Admin_AddExp_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddExp_Rsp_descriptor_,
      Admin_AddExp_Rsp::default_instance_,
      Admin_AddExp_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddExp_Rsp));
  Admin_CanAttack_Req_descriptor_ = file->message_type(14);
  static const int Admin_CanAttack_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, fromweb_),
  };
  Admin_CanAttack_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_CanAttack_Req_descriptor_,
      Admin_CanAttack_Req::default_instance_,
      Admin_CanAttack_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_CanAttack_Req));
  Admin_CanAttack_Rsp_descriptor_ = file->message_type(15);
  static const int Admin_CanAttack_Rsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, fromweb_),
  };
  Admin_CanAttack_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_CanAttack_Rsp_descriptor_,
      Admin_CanAttack_Rsp::default_instance_,
      Admin_CanAttack_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_CanAttack_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_CanAttack_Rsp));
  Admin_AddCredit_Req_descriptor_ = file->message_type(16);
  static const int Admin_AddCredit_Req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, fromweb_),
  };
  Admin_AddCredit_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddCredit_Req_descriptor_,
      Admin_AddCredit_Req::default_instance_,
      Admin_AddCredit_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddCredit_Req));
  Admin_AddCredit_Rsp_descriptor_ = file->message_type(17);
  static const int Admin_AddCredit_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, oldcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, newcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, fromweb_),
  };
  Admin_AddCredit_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddCredit_Rsp_descriptor_,
      Admin_AddCredit_Rsp::default_instance_,
      Admin_AddCredit_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddCredit_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddCredit_Rsp));
  Admin_AdminOpt_Req_descriptor_ = file->message_type(18);
  static const int Admin_AdminOpt_Req_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, opttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, res1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, res2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, armytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, bldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, bldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, fromweb_),
  };
  Admin_AdminOpt_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AdminOpt_Req_descriptor_,
      Admin_AdminOpt_Req::default_instance_,
      Admin_AdminOpt_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AdminOpt_Req));
  Admin_AdminOpt_Rsp_descriptor_ = file->message_type(19);
  static const int Admin_AdminOpt_Rsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, opttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, res1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, res2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, fromweb_),
  };
  Admin_AdminOpt_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AdminOpt_Rsp_descriptor_,
      Admin_AdminOpt_Rsp::default_instance_,
      Admin_AdminOpt_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AdminOpt_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AdminOpt_Rsp));
  Admin_SetLevel_Req_descriptor_ = file->message_type(20);
  static const int Admin_SetLevel_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, fromweb_),
  };
  Admin_SetLevel_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_SetLevel_Req_descriptor_,
      Admin_SetLevel_Req::default_instance_,
      Admin_SetLevel_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_SetLevel_Req));
  Admin_SetLevel_Rsp_descriptor_ = file->message_type(21);
  static const int Admin_SetLevel_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, oldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, newlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, fromweb_),
  };
  Admin_SetLevel_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_SetLevel_Rsp_descriptor_,
      Admin_SetLevel_Rsp::default_instance_,
      Admin_SetLevel_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_SetLevel_Rsp));
  Admin_BanChat_Req_descriptor_ = file->message_type(22);
  static const int Admin_BanChat_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, fromweb_),
  };
  Admin_BanChat_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BanChat_Req_descriptor_,
      Admin_BanChat_Req::default_instance_,
      Admin_BanChat_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BanChat_Req));
  Admin_BanChat_Rsp_descriptor_ = file->message_type(23);
  static const int Admin_BanChat_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, fromweb_),
  };
  Admin_BanChat_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BanChat_Rsp_descriptor_,
      Admin_BanChat_Rsp::default_instance_,
      Admin_BanChat_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BanChat_Rsp));
  Admin_BanLogin_Req_descriptor_ = file->message_type(24);
  static const int Admin_BanLogin_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, fromweb_),
  };
  Admin_BanLogin_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BanLogin_Req_descriptor_,
      Admin_BanLogin_Req::default_instance_,
      Admin_BanLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BanLogin_Req));
  Admin_BanLogin_Rsp_descriptor_ = file->message_type(25);
  static const int Admin_BanLogin_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, fromweb_),
  };
  Admin_BanLogin_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BanLogin_Rsp_descriptor_,
      Admin_BanLogin_Rsp::default_instance_,
      Admin_BanLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BanLogin_Rsp));
  Admin_Reload_Req_descriptor_ = file->message_type(26);
  static const int Admin_Reload_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, fromweb_),
  };
  Admin_Reload_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_Reload_Req_descriptor_,
      Admin_Reload_Req::default_instance_,
      Admin_Reload_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_Reload_Req));
  Admin_Reload_Rsp_descriptor_ = file->message_type(27);
  static const int Admin_Reload_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, fromweb_),
  };
  Admin_Reload_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_Reload_Rsp_descriptor_,
      Admin_Reload_Rsp::default_instance_,
      Admin_Reload_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_Reload_Rsp));
  Admin_BandWGUser_Req_descriptor_ = file->message_type(28);
  static const int Admin_BandWGUser_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, banduser_),
  };
  Admin_BandWGUser_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BandWGUser_Req_descriptor_,
      Admin_BandWGUser_Req::default_instance_,
      Admin_BandWGUser_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BandWGUser_Req));
  Admin_BandWGUser_Rsp_descriptor_ = file->message_type(29);
  static const int Admin_BandWGUser_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, banduser_),
  };
  Admin_BandWGUser_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BandWGUser_Rsp_descriptor_,
      Admin_BandWGUser_Rsp::default_instance_,
      Admin_BandWGUser_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BandWGUser_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BandWGUser_Rsp));
  InviteFriend_descriptor_ = file->message_type(30);
  static const int InviteFriend_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, inviteplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, invitedplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, inviteduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, invitedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, fd_),
  };
  InviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFriend_descriptor_,
      InviteFriend::default_instance_,
      InviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFriend));
  PhotoNum_descriptor_ = file->message_type(31);
  static const int PhotoNum_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, value_),
  };
  PhotoNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoNum_descriptor_,
      PhotoNum::default_instance_,
      PhotoNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoNum));
  Msg_StarUser_descriptor_ = file->message_type(32);
  static const int Msg_StarUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StarUser, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StarUser, type_),
  };
  Msg_StarUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_StarUser_descriptor_,
      Msg_StarUser::default_instance_,
      Msg_StarUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StarUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StarUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_StarUser));
  callbackFriend_descriptor_ = file->message_type(33);
  static const int callbackFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, friends_platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, succ_),
  };
  callbackFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      callbackFriend_descriptor_,
      callbackFriend::default_instance_,
      callbackFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(callbackFriend));
  callbackFriendToPlatid_descriptor_ = file->message_type(34);
  static const int callbackFriendToPlatid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriendToPlatid, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriendToPlatid, platid_),
  };
  callbackFriendToPlatid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      callbackFriendToPlatid_descriptor_,
      callbackFriendToPlatid::default_instance_,
      callbackFriendToPlatid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriendToPlatid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callbackFriendToPlatid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(callbackFriendToPlatid));
  Admin_AddHonor_Req_descriptor_ = file->message_type(35);
  static const int Admin_AddHonor_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, fromweb_),
  };
  Admin_AddHonor_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddHonor_Req_descriptor_,
      Admin_AddHonor_Req::default_instance_,
      Admin_AddHonor_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddHonor_Req));
  Admin_AddHonor_Rsp_descriptor_ = file->message_type(36);
  static const int Admin_AddHonor_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, oldhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, newhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, fromweb_),
  };
  Admin_AddHonor_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_AddHonor_Rsp_descriptor_,
      Admin_AddHonor_Rsp::default_instance_,
      Admin_AddHonor_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddHonor_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_AddHonor_Rsp));
  Event_descriptor_ = file->message_type(37);
  static const int Event_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, fromworld_fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, workingstatus_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userlogin_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userlogin_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userauth_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userauth_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sendremoteuser_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, wg_userleave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, forwardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, starsrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, checkattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, transfersrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminprofile_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddexp_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddexp_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddcredit_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddcredit_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetlevel_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetlevel_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanchat_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanchat_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanlogin_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanlogin_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminreload_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminreload_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, invitefriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admincanattack_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admincanattack_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sendgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sendgiftplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbandwguser_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbandwguser_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminopt_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminopt_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webphotonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, callbackfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, callbackfriendtoplatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddhonor_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddhonor_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, staruser_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_Req_descriptor_, &UserLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_Rsp_descriptor_, &UserLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendGift_descriptor_, &SendGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendGiftToPlatid_descriptor_, &SendGiftToPlatid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WG_UserLeave_descriptor_, &WG_UserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkingStatus_Req_descriptor_, &WorkingStatus_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuth_Req_descriptor_, &UserAuth_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuth_Rsp_descriptor_, &UserAuth_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRemoteUser_Req_descriptor_, &SendRemoteUser_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardInfo_descriptor_, &ForwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWG_CheckAttack_descriptor_, &GWG_CheckAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_Profile_Req_descriptor_, &Admin_Profile_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddExp_Req_descriptor_, &Admin_AddExp_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddExp_Rsp_descriptor_, &Admin_AddExp_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_CanAttack_Req_descriptor_, &Admin_CanAttack_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_CanAttack_Rsp_descriptor_, &Admin_CanAttack_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddCredit_Req_descriptor_, &Admin_AddCredit_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddCredit_Rsp_descriptor_, &Admin_AddCredit_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AdminOpt_Req_descriptor_, &Admin_AdminOpt_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AdminOpt_Rsp_descriptor_, &Admin_AdminOpt_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_SetLevel_Req_descriptor_, &Admin_SetLevel_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_SetLevel_Rsp_descriptor_, &Admin_SetLevel_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BanChat_Req_descriptor_, &Admin_BanChat_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BanChat_Rsp_descriptor_, &Admin_BanChat_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BanLogin_Req_descriptor_, &Admin_BanLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BanLogin_Rsp_descriptor_, &Admin_BanLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_Reload_Req_descriptor_, &Admin_Reload_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_Reload_Rsp_descriptor_, &Admin_Reload_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BandWGUser_Req_descriptor_, &Admin_BandWGUser_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BandWGUser_Rsp_descriptor_, &Admin_BandWGUser_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFriend_descriptor_, &InviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoNum_descriptor_, &PhotoNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_StarUser_descriptor_, &Msg_StarUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    callbackFriend_descriptor_, &callbackFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    callbackFriendToPlatid_descriptor_, &callbackFriendToPlatid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddHonor_Req_descriptor_, &Admin_AddHonor_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_AddHonor_Rsp_descriptor_, &Admin_AddHonor_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete UserLogin_Req::default_instance_;
  delete UserLogin_Req_reflection_;
  delete UserLogin_Rsp::default_instance_;
  delete UserLogin_Rsp_reflection_;
  delete SendGift::default_instance_;
  delete SendGift_reflection_;
  delete SendGiftToPlatid::default_instance_;
  delete SendGiftToPlatid_reflection_;
  delete WG_UserLeave::default_instance_;
  delete WG_UserLeave_reflection_;
  delete WorkingStatus_Req::default_instance_;
  delete WorkingStatus_Req_reflection_;
  delete UserAuth_Req::default_instance_;
  delete UserAuth_Req_reflection_;
  delete UserAuth_Rsp::default_instance_;
  delete UserAuth_Rsp_reflection_;
  delete SendRemoteUser_Req::default_instance_;
  delete SendRemoteUser_Req_reflection_;
  delete ForwardInfo::default_instance_;
  delete ForwardInfo_reflection_;
  delete GWG_CheckAttack::default_instance_;
  delete GWG_CheckAttack_reflection_;
  delete Admin_Profile_Req::default_instance_;
  delete Admin_Profile_Req_reflection_;
  delete Admin_AddExp_Req::default_instance_;
  delete Admin_AddExp_Req_reflection_;
  delete Admin_AddExp_Rsp::default_instance_;
  delete Admin_AddExp_Rsp_reflection_;
  delete Admin_CanAttack_Req::default_instance_;
  delete Admin_CanAttack_Req_reflection_;
  delete Admin_CanAttack_Rsp::default_instance_;
  delete Admin_CanAttack_Rsp_reflection_;
  delete Admin_AddCredit_Req::default_instance_;
  delete Admin_AddCredit_Req_reflection_;
  delete Admin_AddCredit_Rsp::default_instance_;
  delete Admin_AddCredit_Rsp_reflection_;
  delete Admin_AdminOpt_Req::default_instance_;
  delete Admin_AdminOpt_Req_reflection_;
  delete Admin_AdminOpt_Rsp::default_instance_;
  delete Admin_AdminOpt_Rsp_reflection_;
  delete Admin_SetLevel_Req::default_instance_;
  delete Admin_SetLevel_Req_reflection_;
  delete Admin_SetLevel_Rsp::default_instance_;
  delete Admin_SetLevel_Rsp_reflection_;
  delete Admin_BanChat_Req::default_instance_;
  delete Admin_BanChat_Req_reflection_;
  delete Admin_BanChat_Rsp::default_instance_;
  delete Admin_BanChat_Rsp_reflection_;
  delete Admin_BanLogin_Req::default_instance_;
  delete Admin_BanLogin_Req_reflection_;
  delete Admin_BanLogin_Rsp::default_instance_;
  delete Admin_BanLogin_Rsp_reflection_;
  delete Admin_Reload_Req::default_instance_;
  delete Admin_Reload_Req_reflection_;
  delete Admin_Reload_Rsp::default_instance_;
  delete Admin_Reload_Rsp_reflection_;
  delete Admin_BandWGUser_Req::default_instance_;
  delete Admin_BandWGUser_Req_reflection_;
  delete Admin_BandWGUser_Rsp::default_instance_;
  delete Admin_BandWGUser_Rsp_reflection_;
  delete InviteFriend::default_instance_;
  delete InviteFriend_reflection_;
  delete PhotoNum::default_instance_;
  delete PhotoNum_reflection_;
  delete Msg_StarUser::default_instance_;
  delete Msg_StarUser_reflection_;
  delete callbackFriend::default_instance_;
  delete callbackFriend_reflection_;
  delete callbackFriendToPlatid::default_instance_;
  delete callbackFriendToPlatid_reflection_;
  delete Admin_AddHonor_Req::default_instance_;
  delete Admin_AddHonor_Req_reflection_;
  delete Admin_AddHonor_Rsp::default_instance_;
  delete Admin_AddHonor_Rsp_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\"\222\002\n\rUserLogin_Req\022\016\n\006sitei"
    "d\030\001 \002(\005\022\023\n\013platform_id\030\002 \002(\t\022\014\n\004name\030\003 \002"
    "(\t\022\024\n\014profile_link\030\004 \002(\t\022\016\n\006gender\030\005 \002(\005"
    "\022\025\n\ris_yellow_dmd\030\006 \002(\010\022\032\n\022is_yellow_dmd"
    "_year\030\007 \002(\010\022\025\n\ryellow_dmd_lv\030\010 \002(\005\022\026\n\016fr"
    "iends_platid\030\t \003(\t\022\r\n\005webfd\030\n \002(\005\022\013\n\003sid"
    "\030\013 \002(\t\022\023\n\010mydb_ret\030\014 \001(\005:\0010\022\025\n\nmydb_oldi"
    "d\030\r \001(\005:\0010\"u\n\rUserLogin_Rsp\022\013\n\003uid\030\001 \002(\003"
    "\022\016\n\006secret\030\002 \002(\t\022\016\n\006server\030\003 \002(\t\022\014\n\004port"
    "\030\004 \002(\005\022\r\n\005port1\030\005 \002(\005\022\r\n\005webfd\030\006 \002(\005\022\013\n\003"
    "sid\030\007 \002(\t\"V\n\010SendGift\022\013\n\003uid\030\001 \002(\003\022\026\n\016fr"
    "iends_platid\030\002 \003(\t\022\013\n\003sid\030\003 \002(\t\022\n\n\002fd\030\004 "
    "\002(\005\022\014\n\004succ\030\005 \001(\010\"/\n\020SendGiftToPlatid\022\013\n"
    "\003uid\030\001 \002(\003\022\016\n\006platid\030\002 \002(\t\"\032\n\014WG_UserLea"
    "ve\022\n\n\002fd\030\001 \002(\005\"0\n\021WorkingStatus_Req\022\013\n\003g"
    "id\030\001 \002(\005\022\016\n\006finish\030\002 \002(\010\";\n\014UserAuth_Req"
    "\022\013\n\003uid\030\001 \002(\003\022\016\n\006secret\030\002 \002(\003\022\016\n\006sockfd\030"
    "\003 \002(\005\"\034\n\014UserAuth_Rsp\022\014\n\004pass\030\001 \002(\010\"<\n\022S"
    "endRemoteUser_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003cmd\030\002 "
    "\002(\005\022\014\n\004text\030\003 \002(\t\"1\n\013ForwardInfo\022\017\n\003uid\030"
    "\001 \001(\003:\002-1\022\021\n\006platid\030\002 \001(\t:\0010\"Y\n\017GWG_Chec"
    "kAttack\022\024\n\010attackID\030\001 \001(\003:\002-1\022\026\n\nrecover"
    "yID\030\002 \001(\003:\002-1\022\030\n\nisattacked\030\003 \001(\010:\004true\""
    " \n\021Admin_Profile_Req\022\013\n\003cmd\030\001 \002(\005\"r\n\020Adm"
    "in_AddExp_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003exp\030\002 \002(\005\022"
    "\016\n\003gid\030\003 \002(\005:\0010\022\017\n\007adminfd\030\004 \002(\005\022\013\n\003sid\030"
    "\005 \001(\t\022\026\n\007fromweb\030\006 \001(\010:\005false\"\246\001\n\020Admin_"
    "AddExp_Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010oldlevel\030\002 \002("
    "\005\022\016\n\006oldexp\030\003 \002(\005\022\020\n\010newlevel\030\004 \002(\005\022\016\n\006n"
    "ewexp\030\005 \002(\005\022\013\n\003gid\030\006 \002(\005\022\017\n\007adminfd\030\007 \002("
    "\005\022\013\n\003sid\030\010 \001(\t\022\026\n\007fromweb\030\t \001(\010:\005false\"x"
    "\n\023Admin_CanAttack_Req\022\013\n\003uid\030\001 \002(\003\022\016\n\006pl"
    "atid\030\002 \001(\t\022\016\n\003gid\030\004 \002(\005:\0010\022\017\n\007adminfd\030\005 "
    "\002(\005\022\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false"
    "\"u\n\023Admin_CanAttack_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006"
    "platid\030\002 \001(\t\022\013\n\003gid\030\005 \002(\005\022\017\n\007adminfd\030\006 \002"
    "(\005\022\013\n\003sid\030\007 \001(\t\022\026\n\007fromweb\030\010 \001(\010:\005false\""
    "\231\001\n\023Admin_AddCredit_Req\022\013\n\003uid\030\001 \002(\003\022\016\n\006"
    "platid\030\002 \001(\t\022\016\n\006credit\030\003 \002(\005\022\016\n\003gid\030\004 \002("
    "\005:\0010\022\017\n\007adminfd\030\005 \002(\005\022\017\n\004type\030\006 \002(\005:\0010\022\013"
    "\n\003sid\030\007 \001(\t\022\026\n\007fromweb\030\t \001(\010:\005false\"\254\001\n\023"
    "Admin_AddCredit_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006plat"
    "id\030\002 \001(\t\022\021\n\toldcredit\030\003 \002(\003\022\021\n\tnewcredit"
    "\030\004 \002(\003\022\013\n\003gid\030\005 \002(\005\022\017\n\007adminfd\030\006 \002(\005\022\017\n\004"
    "type\030\007 \002(\005:\0010\022\013\n\003sid\030\010 \001(\t\022\026\n\007fromweb\030\t "
    "\001(\010:\005false\"\221\002\n\022Admin_AdminOpt_Req\022\013\n\003uid"
    "\030\001 \002(\003\022\017\n\007optType\030\002 \001(\005\022\r\n\005admin\030\003 \001(\t\022\014"
    "\n\004res1\030\004 \001(\003\022\014\n\004res2\030\005 \001(\003\022\020\n\005count\030\006 \001("
    "\005:\0010\022\023\n\010armytype\030\007 \001(\005:\0010\022\022\n\007bldtype\030\010 \001"
    "(\005:\0010\022\020\n\005bldid\030\t \001(\005:\0010\022\020\n\005level\030\n \001(\005:\001"
    "0\022\r\n\005npcid\030\013 \001(\005\022\016\n\003gid\030\014 \001(\005:\0010\022\017\n\007admi"
    "nfd\030\r \001(\005\022\013\n\003sid\030\016 \001(\t\022\026\n\007fromweb\030\017 \001(\010:"
    "\005false\"\320\001\n\022Admin_AdminOpt_Rsp\022\013\n\003uid\030\001 \002"
    "(\003\022\017\n\007optType\030\002 \001(\005\022\r\n\005admin\030\003 \001(\t\022\r\n\005le"
    "vel\030\004 \001(\005\022\014\n\004res1\030\005 \001(\003\022\014\n\004res2\030\006 \001(\003\022\016\n"
    "\006credit\030\007 \001(\003\022\014\n\004succ\030\010 \001(\010\022\016\n\003gid\030\t \001(\005"
    ":\0010\022\017\n\007adminfd\030\n \001(\005\022\013\n\003sid\030\013 \001(\t\022\026\n\007fro"
    "mweb\030\014 \001(\010:\005false\"v\n\022Admin_SetLevel_Req\022"
    "\013\n\003uid\030\001 \002(\003\022\r\n\005level\030\002 \002(\005\022\016\n\003gid\030\003 \002(\005"
    ":\0010\022\017\n\007adminfd\030\004 \002(\005\022\013\n\003sid\030\005 \001(\t\022\026\n\007fro"
    "mweb\030\006 \001(\010:\005false\"\210\001\n\022Admin_SetLevel_Rsp"
    "\022\013\n\003uid\030\001 \002(\003\022\020\n\010oldlevel\030\002 \002(\005\022\020\n\010newle"
    "vel\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022"
    "\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false\"\203\001\n"
    "\021Admin_BanChat_Req\022\013\n\003uid\030\001 \002(\003\022\r\n\005isban"
    "\030\002 \002(\010\022\014\n\004time\030\003 \002(\005\022\016\n\003gid\030\004 \002(\005:\0010\022\017\n\007"
    "adminfd\030\005 \002(\005\022\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 "
    "\001(\010:\005false\"\200\001\n\021Admin_BanChat_Rsp\022\013\n\003uid\030"
    "\001 \002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004time\030\003 \002(\005\022\013\n\003gi"
    "d\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\013\n\003sid\030\006 \001(\t\022\026\n"
    "\007fromweb\030\007 \001(\010:\005false\"\204\001\n\022Admin_BanLogin"
    "_Req\022\013\n\003uid\030\001 \002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004time"
    "\030\003 \002(\005\022\016\n\003gid\030\004 \002(\005:\0010\022\017\n\007adminfd\030\005 \002(\005\022"
    "\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false\"\201\001\n"
    "\022Admin_BanLogin_Rsp\022\013\n\003uid\030\001 \002(\003\022\r\n\005isba"
    "n\030\002 \002(\010\022\014\n\004time\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007ad"
    "minfd\030\005 \002(\005\022\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001("
    "\010:\005false\"X\n\020Admin_Reload_Req\022\016\n\003gid\030\001 \002("
    "\005:\0010\022\017\n\007adminfd\030\002 \002(\005\022\013\n\003sid\030\003 \001(\t\022\026\n\007fr"
    "omweb\030\004 \001(\010:\005false\"U\n\020Admin_Reload_Rsp\022\013"
    "\n\003gid\030\001 \002(\005\022\017\n\007adminfd\030\002 \002(\005\022\013\n\003sid\030\003 \001("
    "\t\022\026\n\007fromweb\030\004 \001(\010:\005false\"r\n\024Admin_BandW"
    "GUser_Req\022\016\n\003gid\030\001 \002(\005:\0010\022\017\n\007adminfd\030\002 \002"
    "(\005\022\013\n\003sid\030\003 \001(\t\022\026\n\007fromweb\030\004 \001(\010:\005false\022"
    "\024\n\010banduser\030\005 \001(\005:\00220\"o\n\024Admin_BandWGUse"
    "r_Rsp\022\013\n\003gid\030\001 \002(\005\022\017\n\007adminfd\030\002 \002(\005\022\013\n\003s"
    "id\030\003 \001(\t\022\026\n\007fromweb\030\004 \001(\010:\005false\022\024\n\010band"
    "user\030\005 \001(\005:\00220\"}\n\014InviteFriend\022\024\n\014invite"
    "PlatID\030\001 \001(\t\022\025\n\rinvitedPlatID\030\002 \001(\t\022\022\n\ni"
    "nvitedUid\030\003 \001(\003\022\023\n\013invitedName\030\004 \001(\t\022\013\n\003"
    "sid\030\005 \001(\t\022\n\n\002fd\030\006 \001(\005\"M\n\010PhotoNum\022\013\n\003uid"
    "\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\013\n\003sid\030\003 \002(\t\022\n\n\002fd\030"
    "\004 \002(\005\022\r\n\005value\030\005 \001(\005\"1\n\014Msg_StarUser\022\020\n\005"
    "level\030\001 \002(\005:\0010\022\017\n\004type\030\002 \001(\005:\0010\"\\\n\016callb"
    "ackFriend\022\013\n\003uid\030\001 \002(\003\022\026\n\016friends_platid"
    "\030\002 \003(\t\022\013\n\003sid\030\003 \002(\t\022\n\n\002fd\030\004 \002(\005\022\014\n\004succ\030"
    "\005 \001(\010\"5\n\026callbackFriendToPlatid\022\013\n\003uid\030\001"
    " \002(\003\022\016\n\006platid\030\002 \002(\t\"v\n\022Admin_AddHonor_R"
    "eq\022\013\n\003uid\030\001 \002(\003\022\r\n\005honor\030\002 \002(\003\022\016\n\003gid\030\003 "
    "\002(\005:\0010\022\017\n\007adminfd\030\004 \002(\005\022\013\n\003sid\030\005 \001(\t\022\026\n\007"
    "fromweb\030\006 \001(\010:\005false\"\210\001\n\022Admin_AddHonor_"
    "Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010oldhonor\030\002 \002(\003\022\020\n\010ne"
    "whonor\030\003 \002(\003\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002"
    "(\005\022\013\n\003sid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false\""
    "\325\r\n\005Event\022\013\n\003cmd\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022\014\n"
    "\004time\030\003 \002(\003\022\013\n\003uid\030\004 \001(\003\022\024\n\014fromworld_fd"
    "\030\005 \001(\005\022-\n\021workingStatus_req\030\006 \001(\0132\022.Work"
    "ingStatus_Req\022%\n\ruserLogin_req\030\007 \001(\0132\016.U"
    "serLogin_Req\022%\n\ruserLogin_rsp\030\010 \001(\0132\016.Us"
    "erLogin_Rsp\022#\n\014userAuth_req\030\t \001(\0132\r.User"
    "Auth_Req\022#\n\014userAuth_rsp\030\n \001(\0132\r.UserAut"
    "h_Rsp\022/\n\022sendRemoteUser_req\030\013 \001(\0132\023.Send"
    "RemoteUser_Req\022#\n\014wg_UserLeave\030\014 \001(\0132\r.W"
    "G_UserLeave\022!\n\013forwardinfo\030\016 \001(\0132\014.Forwa"
    "rdInfo\022\021\n\tstarSrvID\030\017 \001(\005\022%\n\013checkAttack"
    "\030\021 \001(\0132\020.GWG_CheckAttack\022\025\n\rtransferSrvI"
    "D\030\022 \001(\005\022,\n\020adminProfile_req\030  \001(\0132\022.Admi"
    "n_Profile_Req\022*\n\017adminAddExp_req\030! \001(\0132\021"
    ".Admin_AddExp_Req\022*\n\017adminAddExp_rsp\030\" \001"
    "(\0132\021.Admin_AddExp_Rsp\0220\n\022adminAddCredit_"
    "req\030# \001(\0132\024.Admin_AddCredit_Req\0220\n\022admin"
    "AddCredit_rsp\030$ \001(\0132\024.Admin_AddCredit_Rs"
    "p\022.\n\021adminSetLevel_req\030% \001(\0132\023.Admin_Set"
    "Level_Req\022.\n\021adminSetLevel_rsp\030& \001(\0132\023.A"
    "dmin_SetLevel_Rsp\022,\n\020adminBanChat_req\030\' "
    "\001(\0132\022.Admin_BanChat_Req\022,\n\020adminBanChat_"
    "rsp\030( \001(\0132\022.Admin_BanChat_Rsp\022.\n\021adminBa"
    "nLogin_req\030) \001(\0132\023.Admin_BanLogin_Req\022.\n"
    "\021adminBanLogin_rsp\030* \001(\0132\023.Admin_BanLogi"
    "n_Rsp\022*\n\017adminReload_req\030+ \001(\0132\021.Admin_R"
    "eload_Req\022*\n\017adminReload_rsp\030, \001(\0132\021.Adm"
    "in_Reload_Rsp\022#\n\014inviteFriend\030- \001(\0132\r.In"
    "viteFriend\0220\n\022adminCanAttack_req\030. \001(\0132\024"
    ".Admin_CanAttack_Req\0220\n\022adminCanAttack_r"
    "sp\030/ \001(\0132\024.Admin_CanAttack_Rsp\022\033\n\010sendgi"
    "ft\0300 \001(\0132\t.SendGift\022)\n\016sendgiftplatid\0301 "
    "\001(\0132\021.SendGiftToPlatid\0222\n\023adminbandwguse"
    "r_req\0302 \001(\0132\025.Admin_BandWGUser_Req\0222\n\023ad"
    "minbandwguser_rsp\0303 \001(\0132\025.Admin_BandWGUs"
    "er_Rsp\022)\n\014adminOpt_req\0304 \001(\0132\023.Admin_Adm"
    "inOpt_Req\022)\n\014adminOpt_rsp\0305 \001(\0132\023.Admin_"
    "AdminOpt_Rsp\022\036\n\013webphotonum\0306 \001(\0132\t.Phot"
    "oNum\022\'\n\016callbackfriend\0307 \001(\0132\017.callbackF"
    "riend\0227\n\026callbackfriendtoplatid\0308 \001(\0132\027."
    "callbackFriendToPlatid\022.\n\021adminaddhonor_"
    "req\0309 \001(\0132\023.Admin_AddHonor_Req\022.\n\021admina"
    "ddhonor_rsp\030: \001(\0132\023.Admin_AddHonor_Rsp\022\037"
    "\n\010starUser\030d \001(\0132\r.Msg_StarUser", 5911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  UserLogin_Req::default_instance_ = new UserLogin_Req();
  UserLogin_Rsp::default_instance_ = new UserLogin_Rsp();
  SendGift::default_instance_ = new SendGift();
  SendGiftToPlatid::default_instance_ = new SendGiftToPlatid();
  WG_UserLeave::default_instance_ = new WG_UserLeave();
  WorkingStatus_Req::default_instance_ = new WorkingStatus_Req();
  UserAuth_Req::default_instance_ = new UserAuth_Req();
  UserAuth_Rsp::default_instance_ = new UserAuth_Rsp();
  SendRemoteUser_Req::default_instance_ = new SendRemoteUser_Req();
  ForwardInfo::default_instance_ = new ForwardInfo();
  GWG_CheckAttack::default_instance_ = new GWG_CheckAttack();
  Admin_Profile_Req::default_instance_ = new Admin_Profile_Req();
  Admin_AddExp_Req::default_instance_ = new Admin_AddExp_Req();
  Admin_AddExp_Rsp::default_instance_ = new Admin_AddExp_Rsp();
  Admin_CanAttack_Req::default_instance_ = new Admin_CanAttack_Req();
  Admin_CanAttack_Rsp::default_instance_ = new Admin_CanAttack_Rsp();
  Admin_AddCredit_Req::default_instance_ = new Admin_AddCredit_Req();
  Admin_AddCredit_Rsp::default_instance_ = new Admin_AddCredit_Rsp();
  Admin_AdminOpt_Req::default_instance_ = new Admin_AdminOpt_Req();
  Admin_AdminOpt_Rsp::default_instance_ = new Admin_AdminOpt_Rsp();
  Admin_SetLevel_Req::default_instance_ = new Admin_SetLevel_Req();
  Admin_SetLevel_Rsp::default_instance_ = new Admin_SetLevel_Rsp();
  Admin_BanChat_Req::default_instance_ = new Admin_BanChat_Req();
  Admin_BanChat_Rsp::default_instance_ = new Admin_BanChat_Rsp();
  Admin_BanLogin_Req::default_instance_ = new Admin_BanLogin_Req();
  Admin_BanLogin_Rsp::default_instance_ = new Admin_BanLogin_Rsp();
  Admin_Reload_Req::default_instance_ = new Admin_Reload_Req();
  Admin_Reload_Rsp::default_instance_ = new Admin_Reload_Rsp();
  Admin_BandWGUser_Req::default_instance_ = new Admin_BandWGUser_Req();
  Admin_BandWGUser_Rsp::default_instance_ = new Admin_BandWGUser_Rsp();
  InviteFriend::default_instance_ = new InviteFriend();
  PhotoNum::default_instance_ = new PhotoNum();
  Msg_StarUser::default_instance_ = new Msg_StarUser();
  callbackFriend::default_instance_ = new callbackFriend();
  callbackFriendToPlatid::default_instance_ = new callbackFriendToPlatid();
  Admin_AddHonor_Req::default_instance_ = new Admin_AddHonor_Req();
  Admin_AddHonor_Rsp::default_instance_ = new Admin_AddHonor_Rsp();
  Event::default_instance_ = new Event();
  UserLogin_Req::default_instance_->InitAsDefaultInstance();
  UserLogin_Rsp::default_instance_->InitAsDefaultInstance();
  SendGift::default_instance_->InitAsDefaultInstance();
  SendGiftToPlatid::default_instance_->InitAsDefaultInstance();
  WG_UserLeave::default_instance_->InitAsDefaultInstance();
  WorkingStatus_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Rsp::default_instance_->InitAsDefaultInstance();
  SendRemoteUser_Req::default_instance_->InitAsDefaultInstance();
  ForwardInfo::default_instance_->InitAsDefaultInstance();
  GWG_CheckAttack::default_instance_->InitAsDefaultInstance();
  Admin_Profile_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddExp_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddExp_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_CanAttack_Req::default_instance_->InitAsDefaultInstance();
  Admin_CanAttack_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddCredit_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddCredit_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AdminOpt_Req::default_instance_->InitAsDefaultInstance();
  Admin_AdminOpt_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_SetLevel_Req::default_instance_->InitAsDefaultInstance();
  Admin_SetLevel_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_BanChat_Req::default_instance_->InitAsDefaultInstance();
  Admin_BanChat_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_BanLogin_Req::default_instance_->InitAsDefaultInstance();
  Admin_BanLogin_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_Reload_Req::default_instance_->InitAsDefaultInstance();
  Admin_Reload_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_BandWGUser_Req::default_instance_->InitAsDefaultInstance();
  Admin_BandWGUser_Rsp::default_instance_->InitAsDefaultInstance();
  InviteFriend::default_instance_->InitAsDefaultInstance();
  PhotoNum::default_instance_->InitAsDefaultInstance();
  Msg_StarUser::default_instance_->InitAsDefaultInstance();
  callbackFriend::default_instance_->InitAsDefaultInstance();
  callbackFriendToPlatid::default_instance_->InitAsDefaultInstance();
  Admin_AddHonor_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddHonor_Rsp::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;


// ===================================================================

const ::std::string UserLogin_Req::_default_platform_id_;
const ::std::string UserLogin_Req::_default_name_;
const ::std::string UserLogin_Req::_default_profile_link_;
const ::std::string UserLogin_Req::_default_sid_;
#ifndef _MSC_VER
const int UserLogin_Req::kSiteidFieldNumber;
const int UserLogin_Req::kPlatformIdFieldNumber;
const int UserLogin_Req::kNameFieldNumber;
const int UserLogin_Req::kProfileLinkFieldNumber;
const int UserLogin_Req::kGenderFieldNumber;
const int UserLogin_Req::kIsYellowDmdFieldNumber;
const int UserLogin_Req::kIsYellowDmdYearFieldNumber;
const int UserLogin_Req::kYellowDmdLvFieldNumber;
const int UserLogin_Req::kFriendsPlatidFieldNumber;
const int UserLogin_Req::kWebfdFieldNumber;
const int UserLogin_Req::kSidFieldNumber;
const int UserLogin_Req::kMydbRetFieldNumber;
const int UserLogin_Req::kMydbOldidFieldNumber;
#endif  // !_MSC_VER

UserLogin_Req::UserLogin_Req() {
  SharedCtor();
}

void UserLogin_Req::InitAsDefaultInstance() {
}

UserLogin_Req::UserLogin_Req(const UserLogin_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin_Req::SharedCtor() {
  _cached_size_ = 0;
  siteid_ = 0;
  platform_id_ = const_cast< ::std::string*>(&_default_platform_id_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  profile_link_ = const_cast< ::std::string*>(&_default_profile_link_);
  gender_ = 0;
  is_yellow_dmd_ = false;
  is_yellow_dmd_year_ = false;
  yellow_dmd_lv_ = 0;
  webfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  mydb_ret_ = 0;
  mydb_oldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Req::~UserLogin_Req() {
  SharedDtor();
}

void UserLogin_Req::SharedDtor() {
  if (platform_id_ != &_default_platform_id_) {
    delete platform_id_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (profile_link_ != &_default_profile_link_) {
    delete profile_link_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Req_descriptor_;
}

const UserLogin_Req& UserLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserLogin_Req* UserLogin_Req::default_instance_ = NULL;

UserLogin_Req* UserLogin_Req::New() const {
  return new UserLogin_Req;
}

void UserLogin_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    siteid_ = 0;
    if (_has_bit(1)) {
      if (platform_id_ != &_default_platform_id_) {
        platform_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (profile_link_ != &_default_profile_link_) {
        profile_link_->clear();
      }
    }
    gender_ = 0;
    is_yellow_dmd_ = false;
    is_yellow_dmd_year_ = false;
    yellow_dmd_lv_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    webfd_ = 0;
    if (_has_bit(10)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    mydb_ret_ = 0;
    mydb_oldid_ = 0;
  }
  friends_platid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 siteid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &siteid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }
      
      // required string platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platform_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platform_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platform_id().data(), this->platform_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_profile_link;
        break;
      }
      
      // required string profile_link = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_profile_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_profile_link()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile_link().data(), this->profile_link().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }
      
      // required int32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gender_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_is_yellow_dmd;
        break;
      }
      
      // required bool is_yellow_dmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_dmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_dmd_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_is_yellow_dmd_year;
        break;
      }
      
      // required bool is_yellow_dmd_year = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_yellow_dmd_year:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &is_yellow_dmd_year_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_yellow_dmd_lv;
        break;
      }
      
      // required int32 yellow_dmd_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yellow_dmd_lv:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &yellow_dmd_lv_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_friends_platid;
        break;
      }
      
      // repeated string friends_platid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_friends_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_friends_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->friends_platid(0).data(), this->friends_platid(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_friends_platid;
        if (input->ExpectTag(80)) goto parse_webfd;
        break;
      }
      
      // required int32 webfd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_webfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &webfd_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_sid;
        break;
      }
      
      // required string sid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(96)) goto parse_mydb_ret;
        break;
      }
      
      // optional int32 mydb_ret = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mydb_ret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mydb_ret_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_mydb_oldid;
        break;
      }
      
      // optional int32 mydb_oldid = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mydb_oldid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &mydb_oldid_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserLogin_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 siteid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->siteid(), output);
  }
  
  // required string platform_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform_id(), output);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string profile_link = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profile_link(), output);
  }
  
  // required int32 gender = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }
  
  // required bool is_yellow_dmd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_dmd(), output);
  }
  
  // required bool is_yellow_dmd_year = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yellow_dmd_year(), output);
  }
  
  // required int32 yellow_dmd_lv = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->yellow_dmd_lv(), output);
  }
  
  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends_platid(i).data(), this->friends_platid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->friends_platid(i), output);
  }
  
  // required int32 webfd = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->webfd(), output);
  }
  
  // required string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sid(), output);
  }
  
  // optional int32 mydb_ret = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mydb_ret(), output);
  }
  
  // optional int32 mydb_oldid = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mydb_oldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 siteid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->siteid(), target);
  }
  
  // required string platform_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string profile_link = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->profile_link(), target);
  }
  
  // required int32 gender = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }
  
  // required bool is_yellow_dmd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_dmd(), target);
  }
  
  // required bool is_yellow_dmd_year = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yellow_dmd_year(), target);
  }
  
  // required int32 yellow_dmd_lv = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->yellow_dmd_lv(), target);
  }
  
  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends_platid(i).data(), this->friends_platid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->friends_platid(i), target);
  }
  
  // required int32 webfd = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->webfd(), target);
  }
  
  // required string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sid(), target);
  }
  
  // optional int32 mydb_ret = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mydb_ret(), target);
  }
  
  // optional int32 mydb_oldid = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mydb_oldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 siteid = 1;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->siteid());
    }
    
    // required string platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string profile_link = 4;
    if (has_profile_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_link());
    }
    
    // required int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // required bool is_yellow_dmd = 6;
    if (has_is_yellow_dmd()) {
      total_size += 1 + 1;
    }
    
    // required bool is_yellow_dmd_year = 7;
    if (has_is_yellow_dmd_year()) {
      total_size += 1 + 1;
    }
    
    // required int32 yellow_dmd_lv = 8;
    if (has_yellow_dmd_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_dmd_lv());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 webfd = 10;
    if (has_webfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webfd());
    }
    
    // required string sid = 11;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional int32 mydb_ret = 12 [default = 0];
    if (has_mydb_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mydb_ret());
    }
    
    // optional int32 mydb_oldid = 13 [default = 0];
    if (has_mydb_oldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mydb_oldid());
    }
    
  }
  // repeated string friends_platid = 9;
  total_size += 1 * this->friends_platid_size();
  for (int i = 0; i < this->friends_platid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_platid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Req::MergeFrom(const UserLogin_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_platid_.MergeFrom(from.friends_platid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_siteid(from.siteid());
    }
    if (from._has_bit(1)) {
      set_platform_id(from.platform_id());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_profile_link(from.profile_link());
    }
    if (from._has_bit(4)) {
      set_gender(from.gender());
    }
    if (from._has_bit(5)) {
      set_is_yellow_dmd(from.is_yellow_dmd());
    }
    if (from._has_bit(6)) {
      set_is_yellow_dmd_year(from.is_yellow_dmd_year());
    }
    if (from._has_bit(7)) {
      set_yellow_dmd_lv(from.yellow_dmd_lv());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_webfd(from.webfd());
    }
    if (from._has_bit(10)) {
      set_sid(from.sid());
    }
    if (from._has_bit(11)) {
      set_mydb_ret(from.mydb_ret());
    }
    if (from._has_bit(12)) {
      set_mydb_oldid(from.mydb_oldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Req::CopyFrom(const UserLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006ff) != 0x000006ff) return false;
  
  return true;
}

void UserLogin_Req::Swap(UserLogin_Req* other) {
  if (other != this) {
    std::swap(siteid_, other->siteid_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(name_, other->name_);
    std::swap(profile_link_, other->profile_link_);
    std::swap(gender_, other->gender_);
    std::swap(is_yellow_dmd_, other->is_yellow_dmd_);
    std::swap(is_yellow_dmd_year_, other->is_yellow_dmd_year_);
    std::swap(yellow_dmd_lv_, other->yellow_dmd_lv_);
    friends_platid_.Swap(&other->friends_platid_);
    std::swap(webfd_, other->webfd_);
    std::swap(sid_, other->sid_);
    std::swap(mydb_ret_, other->mydb_ret_);
    std::swap(mydb_oldid_, other->mydb_oldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Req_descriptor_;
  metadata.reflection = UserLogin_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UserLogin_Rsp::_default_secret_;
const ::std::string UserLogin_Rsp::_default_server_;
const ::std::string UserLogin_Rsp::_default_sid_;
#ifndef _MSC_VER
const int UserLogin_Rsp::kUidFieldNumber;
const int UserLogin_Rsp::kSecretFieldNumber;
const int UserLogin_Rsp::kServerFieldNumber;
const int UserLogin_Rsp::kPortFieldNumber;
const int UserLogin_Rsp::kPort1FieldNumber;
const int UserLogin_Rsp::kWebfdFieldNumber;
const int UserLogin_Rsp::kSidFieldNumber;
#endif  // !_MSC_VER

UserLogin_Rsp::UserLogin_Rsp() {
  SharedCtor();
}

void UserLogin_Rsp::InitAsDefaultInstance() {
}

UserLogin_Rsp::UserLogin_Rsp(const UserLogin_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = const_cast< ::std::string*>(&_default_secret_);
  server_ = const_cast< ::std::string*>(&_default_server_);
  port_ = 0;
  port1_ = 0;
  webfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Rsp::~UserLogin_Rsp() {
  SharedDtor();
}

void UserLogin_Rsp::SharedDtor() {
  if (secret_ != &_default_secret_) {
    delete secret_;
  }
  if (server_ != &_default_server_) {
    delete server_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Rsp_descriptor_;
}

const UserLogin_Rsp& UserLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserLogin_Rsp* UserLogin_Rsp::default_instance_ = NULL;

UserLogin_Rsp* UserLogin_Rsp::New() const {
  return new UserLogin_Rsp;
}

void UserLogin_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (secret_ != &_default_secret_) {
        secret_->clear();
      }
    }
    if (_has_bit(2)) {
      if (server_ != &_default_server_) {
        server_->clear();
      }
    }
    port_ = 0;
    port1_ = 0;
    webfd_ = 0;
    if (_has_bit(6)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_secret;
        break;
      }
      
      // required string secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_secret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_secret()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->secret().data(), this->secret().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // required string server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_server:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_server()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->server().data(), this->server().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // required int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_port1;
        break;
      }
      
      // required int32 port1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_webfd;
        break;
      }
      
      // required int32 webfd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_webfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &webfd_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_sid;
        break;
      }
      
      // required string sid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserLogin_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required string secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secret(), output);
  }
  
  // required string server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server(), output);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }
  
  // required int32 port1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port1(), output);
  }
  
  // required int32 webfd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->webfd(), output);
  }
  
  // required string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required string secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }
  
  // required string server = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }
  
  // required int32 port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }
  
  // required int32 port1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port1(), target);
  }
  
  // required int32 webfd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->webfd(), target);
  }
  
  // required string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret());
    }
    
    // required string server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }
    
    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required int32 port1 = 5;
    if (has_port1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port1());
    }
    
    // required int32 webfd = 6;
    if (has_webfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webfd());
    }
    
    // required string sid = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Rsp::MergeFrom(const UserLogin_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_secret(from.secret());
    }
    if (from._has_bit(2)) {
      set_server(from.server());
    }
    if (from._has_bit(3)) {
      set_port(from.port());
    }
    if (from._has_bit(4)) {
      set_port1(from.port1());
    }
    if (from._has_bit(5)) {
      set_webfd(from.webfd());
    }
    if (from._has_bit(6)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Rsp::CopyFrom(const UserLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void UserLogin_Rsp::Swap(UserLogin_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(secret_, other->secret_);
    std::swap(server_, other->server_);
    std::swap(port_, other->port_);
    std::swap(port1_, other->port1_);
    std::swap(webfd_, other->webfd_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Rsp_descriptor_;
  metadata.reflection = UserLogin_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendGift::_default_sid_;
#ifndef _MSC_VER
const int SendGift::kUidFieldNumber;
const int SendGift::kFriendsPlatidFieldNumber;
const int SendGift::kSidFieldNumber;
const int SendGift::kFdFieldNumber;
const int SendGift::kSuccFieldNumber;
#endif  // !_MSC_VER

SendGift::SendGift() {
  SharedCtor();
}

void SendGift::InitAsDefaultInstance() {
}

SendGift::SendGift(const SendGift& from) {
  SharedCtor();
  MergeFrom(from);
}

void SendGift::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fd_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGift::~SendGift() {
  SharedDtor();
}

void SendGift::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SendGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendGift_descriptor_;
}

const SendGift& SendGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

SendGift* SendGift::default_instance_ = NULL;

SendGift* SendGift::New() const {
  return new SendGift;
}

void SendGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fd_ = 0;
    succ_ = false;
  }
  friends_platid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_friends_platid;
        break;
      }
      
      // repeated string friends_platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_friends_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_friends_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->friends_platid(0).data(), this->friends_platid(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_friends_platid;
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // required string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }
      
      // required int32 fd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }
      
      // optional bool succ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_succ:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &succ_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SendGift::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // repeated string friends_platid = 2;
  for (int i = 0; i < this->friends_platid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends_platid(i).data(), this->friends_platid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friends_platid(i), output);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }
  
  // optional bool succ = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->succ(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // repeated string friends_platid = 2;
  for (int i = 0; i < this->friends_platid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends_platid(i).data(), this->friends_platid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->friends_platid(i), target);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fd(), target);
  }
  
  // optional bool succ = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->succ(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // required int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
    // optional bool succ = 5;
    if (has_succ()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string friends_platid = 2;
  total_size += 1 * this->friends_platid_size();
  for (int i = 0; i < this->friends_platid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_platid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SendGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendGift::MergeFrom(const SendGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_platid_.MergeFrom(from.friends_platid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fd(from.fd());
    }
    if (from._has_bit(4)) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendGift::CopyFrom(const SendGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void SendGift::Swap(SendGift* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    friends_platid_.Swap(&other->friends_platid_);
    std::swap(sid_, other->sid_);
    std::swap(fd_, other->fd_);
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendGift_descriptor_;
  metadata.reflection = SendGift_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendGiftToPlatid::_default_platid_;
#ifndef _MSC_VER
const int SendGiftToPlatid::kUidFieldNumber;
const int SendGiftToPlatid::kPlatidFieldNumber;
#endif  // !_MSC_VER

SendGiftToPlatid::SendGiftToPlatid() {
  SharedCtor();
}

void SendGiftToPlatid::InitAsDefaultInstance() {
}

SendGiftToPlatid::SendGiftToPlatid(const SendGiftToPlatid& from) {
  SharedCtor();
  MergeFrom(from);
}

void SendGiftToPlatid::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGiftToPlatid::~SendGiftToPlatid() {
  SharedDtor();
}

void SendGiftToPlatid::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SendGiftToPlatid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendGiftToPlatid_descriptor_;
}

const SendGiftToPlatid& SendGiftToPlatid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

SendGiftToPlatid* SendGiftToPlatid::default_instance_ = NULL;

SendGiftToPlatid* SendGiftToPlatid::New() const {
  return new SendGiftToPlatid;
}

void SendGiftToPlatid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendGiftToPlatid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // required string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendGiftToPlatid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SendGiftToPlatid::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendGiftToPlatid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendGiftToPlatid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SendGiftToPlatid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendGiftToPlatid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendGiftToPlatid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendGiftToPlatid::MergeFrom(const SendGiftToPlatid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendGiftToPlatid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendGiftToPlatid::CopyFrom(const SendGiftToPlatid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGiftToPlatid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SendGiftToPlatid::Swap(SendGiftToPlatid* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendGiftToPlatid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendGiftToPlatid_descriptor_;
  metadata.reflection = SendGiftToPlatid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WG_UserLeave::kFdFieldNumber;
#endif  // !_MSC_VER

WG_UserLeave::WG_UserLeave() {
  SharedCtor();
}

void WG_UserLeave::InitAsDefaultInstance() {
}

WG_UserLeave::WG_UserLeave(const WG_UserLeave& from) {
  SharedCtor();
  MergeFrom(from);
}

void WG_UserLeave::SharedCtor() {
  _cached_size_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WG_UserLeave::~WG_UserLeave() {
  SharedDtor();
}

void WG_UserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WG_UserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WG_UserLeave_descriptor_;
}

const WG_UserLeave& WG_UserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

WG_UserLeave* WG_UserLeave::default_instance_ = NULL;

WG_UserLeave* WG_UserLeave::New() const {
  return new WG_UserLeave;
}

void WG_UserLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WG_UserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WG_UserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WG_UserLeave::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WG_UserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WG_UserLeave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WG_UserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WG_UserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WG_UserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WG_UserLeave::MergeFrom(const WG_UserLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WG_UserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WG_UserLeave::CopyFrom(const WG_UserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WG_UserLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WG_UserLeave::Swap(WG_UserLeave* other) {
  if (other != this) {
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WG_UserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WG_UserLeave_descriptor_;
  metadata.reflection = WG_UserLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkingStatus_Req::kGidFieldNumber;
const int WorkingStatus_Req::kFinishFieldNumber;
#endif  // !_MSC_VER

WorkingStatus_Req::WorkingStatus_Req() {
  SharedCtor();
}

void WorkingStatus_Req::InitAsDefaultInstance() {
}

WorkingStatus_Req::WorkingStatus_Req(const WorkingStatus_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void WorkingStatus_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkingStatus_Req::~WorkingStatus_Req() {
  SharedDtor();
}

void WorkingStatus_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WorkingStatus_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkingStatus_Req_descriptor_;
}

const WorkingStatus_Req& WorkingStatus_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

WorkingStatus_Req* WorkingStatus_Req::default_instance_ = NULL;

WorkingStatus_Req* WorkingStatus_Req::New() const {
  return new WorkingStatus_Req;
}

void WorkingStatus_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkingStatus_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }
      
      // required bool finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finish:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &finish_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkingStatus_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WorkingStatus_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkingStatus_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkingStatus_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required bool finish = 2;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WorkingStatus_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkingStatus_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkingStatus_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkingStatus_Req::MergeFrom(const WorkingStatus_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkingStatus_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingStatus_Req::CopyFrom(const WorkingStatus_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingStatus_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WorkingStatus_Req::Swap(WorkingStatus_Req* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkingStatus_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkingStatus_Req_descriptor_;
  metadata.reflection = WorkingStatus_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Req::kUidFieldNumber;
const int UserAuth_Req::kSecretFieldNumber;
const int UserAuth_Req::kSockfdFieldNumber;
#endif  // !_MSC_VER

UserAuth_Req::UserAuth_Req() {
  SharedCtor();
}

void UserAuth_Req::InitAsDefaultInstance() {
}

UserAuth_Req::UserAuth_Req(const UserAuth_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserAuth_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  sockfd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Req::~UserAuth_Req() {
  SharedDtor();
}

void UserAuth_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserAuth_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Req_descriptor_;
}

const UserAuth_Req& UserAuth_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserAuth_Req* UserAuth_Req::default_instance_ = NULL;

UserAuth_Req* UserAuth_Req::New() const {
  return new UserAuth_Req;
}

void UserAuth_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    secret_ = GOOGLE_LONGLONG(0);
    sockfd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuth_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_secret;
        break;
      }
      
      // required int64 secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secret:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &secret_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sockfd;
        break;
      }
      
      // required int32 sockfd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sockfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sockfd_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuth_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserAuth_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->secret(), output);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sockfd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuth_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int64 secret = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->secret(), target);
  }
  
  // required int32 sockfd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sockfd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuth_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int64 secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }
    
    // required int32 sockfd = 3;
    if (has_sockfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sockfd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserAuth_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuth_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Req::MergeFrom(const UserAuth_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_secret(from.secret());
    }
    if (from._has_bit(2)) {
      set_sockfd(from.sockfd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuth_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Req::CopyFrom(const UserAuth_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UserAuth_Req::Swap(UserAuth_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(secret_, other->secret_);
    std::swap(sockfd_, other->sockfd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuth_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Req_descriptor_;
  metadata.reflection = UserAuth_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Rsp::kPassFieldNumber;
#endif  // !_MSC_VER

UserAuth_Rsp::UserAuth_Rsp() {
  SharedCtor();
}

void UserAuth_Rsp::InitAsDefaultInstance() {
}

UserAuth_Rsp::UserAuth_Rsp(const UserAuth_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserAuth_Rsp::SharedCtor() {
  _cached_size_ = 0;
  pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Rsp::~UserAuth_Rsp() {
  SharedDtor();
}

void UserAuth_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserAuth_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Rsp_descriptor_;
}

const UserAuth_Rsp& UserAuth_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

UserAuth_Rsp* UserAuth_Rsp::default_instance_ = NULL;

UserAuth_Rsp* UserAuth_Rsp::New() const {
  return new UserAuth_Rsp;
}

void UserAuth_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuth_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &pass_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuth_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserAuth_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool pass = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuth_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool pass = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuth_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool pass = 1;
    if (has_pass()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserAuth_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuth_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Rsp::MergeFrom(const UserAuth_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuth_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Rsp::CopyFrom(const UserAuth_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserAuth_Rsp::Swap(UserAuth_Rsp* other) {
  if (other != this) {
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuth_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Rsp_descriptor_;
  metadata.reflection = UserAuth_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendRemoteUser_Req::_default_text_;
#ifndef _MSC_VER
const int SendRemoteUser_Req::kUidFieldNumber;
const int SendRemoteUser_Req::kCmdFieldNumber;
const int SendRemoteUser_Req::kTextFieldNumber;
#endif  // !_MSC_VER

SendRemoteUser_Req::SendRemoteUser_Req() {
  SharedCtor();
}

void SendRemoteUser_Req::InitAsDefaultInstance() {
}

SendRemoteUser_Req::SendRemoteUser_Req(const SendRemoteUser_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void SendRemoteUser_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  cmd_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRemoteUser_Req::~SendRemoteUser_Req() {
  SharedDtor();
}

void SendRemoteUser_Req::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SendRemoteUser_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRemoteUser_Req_descriptor_;
}

const SendRemoteUser_Req& SendRemoteUser_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

SendRemoteUser_Req* SendRemoteUser_Req::default_instance_ = NULL;

SendRemoteUser_Req* SendRemoteUser_Req::New() const {
  return new SendRemoteUser_Req;
}

void SendRemoteUser_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    cmd_ = 0;
    if (_has_bit(2)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRemoteUser_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required int32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cmd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // required string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_text:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_text()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->text().data(), this->text().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendRemoteUser_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SendRemoteUser_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 cmd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }
  
  // required string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendRemoteUser_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 cmd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }
  
  // required string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendRemoteUser_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SendRemoteUser_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRemoteUser_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRemoteUser_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRemoteUser_Req::MergeFrom(const SendRemoteUser_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(2)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRemoteUser_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRemoteUser_Req::CopyFrom(const SendRemoteUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRemoteUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SendRemoteUser_Req::Swap(SendRemoteUser_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cmd_, other->cmd_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRemoteUser_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRemoteUser_Req_descriptor_;
  metadata.reflection = SendRemoteUser_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ForwardInfo::_default_platid_("0");
#ifndef _MSC_VER
const int ForwardInfo::kUidFieldNumber;
const int ForwardInfo::kPlatidFieldNumber;
#endif  // !_MSC_VER

ForwardInfo::ForwardInfo() {
  SharedCtor();
}

void ForwardInfo::InitAsDefaultInstance() {
}

ForwardInfo::ForwardInfo(const ForwardInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ForwardInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardInfo::~ForwardInfo() {
  SharedDtor();
}

void ForwardInfo::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ForwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInfo_descriptor_;
}

const ForwardInfo& ForwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

ForwardInfo* ForwardInfo::default_instance_ = NULL;

ForwardInfo* ForwardInfo::New() const {
  return new ForwardInfo;
}

void ForwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->assign(_default_platid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2 [default = "0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ForwardInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 uid = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2 [default = "0"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2 [default = "0"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2 [default = "0"];
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ForwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardInfo::MergeFrom(const ForwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardInfo::CopyFrom(const ForwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardInfo::IsInitialized() const {
  
  return true;
}

void ForwardInfo::Swap(ForwardInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardInfo_descriptor_;
  metadata.reflection = ForwardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWG_CheckAttack::kAttackIDFieldNumber;
const int GWG_CheckAttack::kRecoveryIDFieldNumber;
const int GWG_CheckAttack::kIsattackedFieldNumber;
#endif  // !_MSC_VER

GWG_CheckAttack::GWG_CheckAttack() {
  SharedCtor();
}

void GWG_CheckAttack::InitAsDefaultInstance() {
}

GWG_CheckAttack::GWG_CheckAttack(const GWG_CheckAttack& from) {
  SharedCtor();
  MergeFrom(from);
}

void GWG_CheckAttack::SharedCtor() {
  _cached_size_ = 0;
  attackid_ = GOOGLE_LONGLONG(-1);
  recoveryid_ = GOOGLE_LONGLONG(-1);
  isattacked_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWG_CheckAttack::~GWG_CheckAttack() {
  SharedDtor();
}

void GWG_CheckAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GWG_CheckAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWG_CheckAttack_descriptor_;
}

const GWG_CheckAttack& GWG_CheckAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

GWG_CheckAttack* GWG_CheckAttack::default_instance_ = NULL;

GWG_CheckAttack* GWG_CheckAttack::New() const {
  return new GWG_CheckAttack;
}

void GWG_CheckAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attackid_ = GOOGLE_LONGLONG(-1);
    recoveryid_ = GOOGLE_LONGLONG(-1);
    isattacked_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWG_CheckAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attackID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &attackid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_recoveryID;
        break;
      }
      
      // optional int64 recoveryID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_recoveryID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &recoveryid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_isattacked;
        break;
      }
      
      // optional bool isattacked = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isattacked:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isattacked_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWG_CheckAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GWG_CheckAttack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 attackID = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attackid(), output);
  }
  
  // optional int64 recoveryID = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recoveryid(), output);
  }
  
  // optional bool isattacked = 3 [default = true];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isattacked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWG_CheckAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 attackID = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attackid(), target);
  }
  
  // optional int64 recoveryID = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recoveryid(), target);
  }
  
  // optional bool isattacked = 3 [default = true];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isattacked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWG_CheckAttack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attackID = 1 [default = -1];
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackid());
    }
    
    // optional int64 recoveryID = 2 [default = -1];
    if (has_recoveryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recoveryid());
    }
    
    // optional bool isattacked = 3 [default = true];
    if (has_isattacked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GWG_CheckAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWG_CheckAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWG_CheckAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWG_CheckAttack::MergeFrom(const GWG_CheckAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attackid(from.attackid());
    }
    if (from._has_bit(1)) {
      set_recoveryid(from.recoveryid());
    }
    if (from._has_bit(2)) {
      set_isattacked(from.isattacked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWG_CheckAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWG_CheckAttack::CopyFrom(const GWG_CheckAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWG_CheckAttack::IsInitialized() const {
  
  return true;
}

void GWG_CheckAttack::Swap(GWG_CheckAttack* other) {
  if (other != this) {
    std::swap(attackid_, other->attackid_);
    std::swap(recoveryid_, other->recoveryid_);
    std::swap(isattacked_, other->isattacked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWG_CheckAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWG_CheckAttack_descriptor_;
  metadata.reflection = GWG_CheckAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_Profile_Req::kCmdFieldNumber;
#endif  // !_MSC_VER

Admin_Profile_Req::Admin_Profile_Req() {
  SharedCtor();
}

void Admin_Profile_Req::InitAsDefaultInstance() {
}

Admin_Profile_Req::Admin_Profile_Req(const Admin_Profile_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_Profile_Req::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Profile_Req::~Admin_Profile_Req() {
  SharedDtor();
}

void Admin_Profile_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_Profile_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Profile_Req_descriptor_;
}

const Admin_Profile_Req& Admin_Profile_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_Profile_Req* Admin_Profile_Req::default_instance_ = NULL;

Admin_Profile_Req* Admin_Profile_Req::New() const {
  return new Admin_Profile_Req;
}

void Admin_Profile_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_Profile_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cmd_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_Profile_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_Profile_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_Profile_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_Profile_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_Profile_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_Profile_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Profile_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Profile_Req::MergeFrom(const Admin_Profile_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_Profile_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Profile_Req::CopyFrom(const Admin_Profile_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Profile_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Admin_Profile_Req::Swap(Admin_Profile_Req* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_Profile_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Profile_Req_descriptor_;
  metadata.reflection = Admin_Profile_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddExp_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddExp_Req::kUidFieldNumber;
const int Admin_AddExp_Req::kExpFieldNumber;
const int Admin_AddExp_Req::kGidFieldNumber;
const int Admin_AddExp_Req::kAdminfdFieldNumber;
const int Admin_AddExp_Req::kSidFieldNumber;
const int Admin_AddExp_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddExp_Req::Admin_AddExp_Req() {
  SharedCtor();
}

void Admin_AddExp_Req::InitAsDefaultInstance() {
}

Admin_AddExp_Req::Admin_AddExp_Req(const Admin_AddExp_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddExp_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  exp_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddExp_Req::~Admin_AddExp_Req() {
  SharedDtor();
}

void Admin_AddExp_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddExp_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddExp_Req_descriptor_;
}

const Admin_AddExp_Req& Admin_AddExp_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddExp_Req* Admin_AddExp_Req::default_instance_ = NULL;

Admin_AddExp_Req* Admin_AddExp_Req::New() const {
  return new Admin_AddExp_Req;
}

void Admin_AddExp_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    exp_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddExp_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }
      
      // optional string sid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddExp_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddExp_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sid(), output);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddExp_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddExp_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required int32 gid = 3 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 4;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 6 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddExp_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddExp_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddExp_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddExp_Req::MergeFrom(const Admin_AddExp_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddExp_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddExp_Req::CopyFrom(const Admin_AddExp_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddExp_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Admin_AddExp_Req::Swap(Admin_AddExp_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(exp_, other->exp_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddExp_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddExp_Req_descriptor_;
  metadata.reflection = Admin_AddExp_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddExp_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddExp_Rsp::kUidFieldNumber;
const int Admin_AddExp_Rsp::kOldlevelFieldNumber;
const int Admin_AddExp_Rsp::kOldexpFieldNumber;
const int Admin_AddExp_Rsp::kNewlevelFieldNumber;
const int Admin_AddExp_Rsp::kNewexpFieldNumber;
const int Admin_AddExp_Rsp::kGidFieldNumber;
const int Admin_AddExp_Rsp::kAdminfdFieldNumber;
const int Admin_AddExp_Rsp::kSidFieldNumber;
const int Admin_AddExp_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddExp_Rsp::Admin_AddExp_Rsp() {
  SharedCtor();
}

void Admin_AddExp_Rsp::InitAsDefaultInstance() {
}

Admin_AddExp_Rsp::Admin_AddExp_Rsp(const Admin_AddExp_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddExp_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldlevel_ = 0;
  oldexp_ = 0;
  newlevel_ = 0;
  newexp_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddExp_Rsp::~Admin_AddExp_Rsp() {
  SharedDtor();
}

void Admin_AddExp_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddExp_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddExp_Rsp_descriptor_;
}

const Admin_AddExp_Rsp& Admin_AddExp_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddExp_Rsp* Admin_AddExp_Rsp::default_instance_ = NULL;

Admin_AddExp_Rsp* Admin_AddExp_Rsp::New() const {
  return new Admin_AddExp_Rsp;
}

void Admin_AddExp_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    oldlevel_ = 0;
    oldexp_ = 0;
    newlevel_ = 0;
    newexp_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(7)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddExp_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oldlevel;
        break;
      }
      
      // required int32 oldlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oldlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oldexp;
        break;
      }
      
      // required int32 oldexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldexp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oldexp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_newlevel;
        break;
      }
      
      // required int32 newlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &newlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_newexp;
        break;
      }
      
      // required int32 newexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newexp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &newexp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_sid;
        break;
      }
      
      // optional string sid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddExp_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddExp_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 oldlevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldlevel(), output);
  }
  
  // required int32 oldexp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldexp(), output);
  }
  
  // required int32 newlevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->newlevel(), output);
  }
  
  // required int32 newexp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->newexp(), output);
  }
  
  // required int32 gid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gid(), output);
  }
  
  // required int32 adminfd = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adminfd(), output);
  }
  
  // optional string sid = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sid(), output);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddExp_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 oldlevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldlevel(), target);
  }
  
  // required int32 oldexp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oldexp(), target);
  }
  
  // required int32 newlevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->newlevel(), target);
  }
  
  // required int32 newexp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->newexp(), target);
  }
  
  // required int32 gid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gid(), target);
  }
  
  // required int32 adminfd = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adminfd(), target);
  }
  
  // optional string sid = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sid(), target);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddExp_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 oldlevel = 2;
    if (has_oldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldlevel());
    }
    
    // required int32 oldexp = 3;
    if (has_oldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldexp());
    }
    
    // required int32 newlevel = 4;
    if (has_newlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlevel());
    }
    
    // required int32 newexp = 5;
    if (has_newexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newexp());
    }
    
    // required int32 gid = 6;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 7;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 8;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool fromweb = 9 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddExp_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddExp_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddExp_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddExp_Rsp::MergeFrom(const Admin_AddExp_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_oldlevel(from.oldlevel());
    }
    if (from._has_bit(2)) {
      set_oldexp(from.oldexp());
    }
    if (from._has_bit(3)) {
      set_newlevel(from.newlevel());
    }
    if (from._has_bit(4)) {
      set_newexp(from.newexp());
    }
    if (from._has_bit(5)) {
      set_gid(from.gid());
    }
    if (from._has_bit(6)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(7)) {
      set_sid(from.sid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddExp_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddExp_Rsp::CopyFrom(const Admin_AddExp_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddExp_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void Admin_AddExp_Rsp::Swap(Admin_AddExp_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(oldlevel_, other->oldlevel_);
    std::swap(oldexp_, other->oldexp_);
    std::swap(newlevel_, other->newlevel_);
    std::swap(newexp_, other->newexp_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddExp_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddExp_Rsp_descriptor_;
  metadata.reflection = Admin_AddExp_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_CanAttack_Req::_default_platid_;
const ::std::string Admin_CanAttack_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_CanAttack_Req::kUidFieldNumber;
const int Admin_CanAttack_Req::kPlatidFieldNumber;
const int Admin_CanAttack_Req::kGidFieldNumber;
const int Admin_CanAttack_Req::kAdminfdFieldNumber;
const int Admin_CanAttack_Req::kSidFieldNumber;
const int Admin_CanAttack_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_CanAttack_Req::Admin_CanAttack_Req() {
  SharedCtor();
}

void Admin_CanAttack_Req::InitAsDefaultInstance() {
}

Admin_CanAttack_Req::Admin_CanAttack_Req(const Admin_CanAttack_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_CanAttack_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_CanAttack_Req::~Admin_CanAttack_Req() {
  SharedDtor();
}

void Admin_CanAttack_Req::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_CanAttack_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_CanAttack_Req_descriptor_;
}

const Admin_CanAttack_Req& Admin_CanAttack_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_CanAttack_Req* Admin_CanAttack_Req::default_instance_ = NULL;

Admin_CanAttack_Req* Admin_CanAttack_Req::New() const {
  return new Admin_CanAttack_Req;
}

void Admin_CanAttack_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_CanAttack_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(3);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_CanAttack_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_CanAttack_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_CanAttack_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_CanAttack_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // required int32 gid = 4 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_CanAttack_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_CanAttack_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_CanAttack_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_CanAttack_Req::MergeFrom(const Admin_CanAttack_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_CanAttack_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_CanAttack_Req::CopyFrom(const Admin_CanAttack_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_CanAttack_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void Admin_CanAttack_Req::Swap(Admin_CanAttack_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_CanAttack_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_CanAttack_Req_descriptor_;
  metadata.reflection = Admin_CanAttack_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_CanAttack_Rsp::_default_platid_;
const ::std::string Admin_CanAttack_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_CanAttack_Rsp::kUidFieldNumber;
const int Admin_CanAttack_Rsp::kPlatidFieldNumber;
const int Admin_CanAttack_Rsp::kGidFieldNumber;
const int Admin_CanAttack_Rsp::kAdminfdFieldNumber;
const int Admin_CanAttack_Rsp::kSidFieldNumber;
const int Admin_CanAttack_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_CanAttack_Rsp::Admin_CanAttack_Rsp() {
  SharedCtor();
}

void Admin_CanAttack_Rsp::InitAsDefaultInstance() {
}

Admin_CanAttack_Rsp::Admin_CanAttack_Rsp(const Admin_CanAttack_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_CanAttack_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_CanAttack_Rsp::~Admin_CanAttack_Rsp() {
  SharedDtor();
}

void Admin_CanAttack_Rsp::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_CanAttack_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_CanAttack_Rsp_descriptor_;
}

const Admin_CanAttack_Rsp& Admin_CanAttack_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_CanAttack_Rsp* Admin_CanAttack_Rsp::default_instance_ = NULL;

Admin_CanAttack_Rsp* Admin_CanAttack_Rsp::New() const {
  return new Admin_CanAttack_Rsp;
}

void Admin_CanAttack_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_CanAttack_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(2);
        if (input->ExpectTag(48)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(3);
        if (input->ExpectTag(58)) goto parse_sid;
        break;
      }
      
      // optional string sid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(64)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_CanAttack_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_CanAttack_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  // required int32 gid = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }
  
  // required int32 adminfd = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adminfd(), output);
  }
  
  // optional string sid = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sid(), output);
  }
  
  // optional bool fromweb = 8 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_CanAttack_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  // required int32 gid = 5;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }
  
  // required int32 adminfd = 6;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adminfd(), target);
  }
  
  // optional string sid = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sid(), target);
  }
  
  // optional bool fromweb = 8 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_CanAttack_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // required int32 gid = 5;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 6;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 8 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_CanAttack_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_CanAttack_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_CanAttack_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_CanAttack_Rsp::MergeFrom(const Admin_CanAttack_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_CanAttack_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_CanAttack_Rsp::CopyFrom(const Admin_CanAttack_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_CanAttack_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void Admin_CanAttack_Rsp::Swap(Admin_CanAttack_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_CanAttack_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_CanAttack_Rsp_descriptor_;
  metadata.reflection = Admin_CanAttack_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddCredit_Req::_default_platid_;
const ::std::string Admin_AddCredit_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddCredit_Req::kUidFieldNumber;
const int Admin_AddCredit_Req::kPlatidFieldNumber;
const int Admin_AddCredit_Req::kCreditFieldNumber;
const int Admin_AddCredit_Req::kGidFieldNumber;
const int Admin_AddCredit_Req::kAdminfdFieldNumber;
const int Admin_AddCredit_Req::kTypeFieldNumber;
const int Admin_AddCredit_Req::kSidFieldNumber;
const int Admin_AddCredit_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddCredit_Req::Admin_AddCredit_Req() {
  SharedCtor();
}

void Admin_AddCredit_Req::InitAsDefaultInstance() {
}

Admin_AddCredit_Req::Admin_AddCredit_Req(const Admin_AddCredit_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddCredit_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  credit_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  type_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddCredit_Req::~Admin_AddCredit_Req() {
  SharedDtor();
}

void Admin_AddCredit_Req::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddCredit_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddCredit_Req_descriptor_;
}

const Admin_AddCredit_Req& Admin_AddCredit_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddCredit_Req* Admin_AddCredit_Req::default_instance_ = NULL;

Admin_AddCredit_Req* Admin_AddCredit_Req::New() const {
  return new Admin_AddCredit_Req;
}

void Admin_AddCredit_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    credit_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    type_ = 0;
    if (_has_bit(6)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddCredit_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_credit;
        break;
      }
      
      // required int32 credit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_credit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &credit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // required int32 type = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_sid;
        break;
      }
      
      // optional string sid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddCredit_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddCredit_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  // required int32 credit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->credit(), output);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // required int32 type = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  // optional string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sid(), output);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddCredit_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  // required int32 credit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->credit(), target);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // required int32 type = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  // optional string sid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sid(), target);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddCredit_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // required int32 credit = 3;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }
    
    // required int32 gid = 4 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // required int32 type = 6 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string sid = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 9 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddCredit_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddCredit_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddCredit_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddCredit_Req::MergeFrom(const Admin_AddCredit_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
    if (from._has_bit(2)) {
      set_credit(from.credit());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_type(from.type());
    }
    if (from._has_bit(6)) {
      set_sid(from.sid());
    }
    if (from._has_bit(7)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddCredit_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddCredit_Req::CopyFrom(const Admin_AddCredit_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddCredit_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  
  return true;
}

void Admin_AddCredit_Req::Swap(Admin_AddCredit_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(credit_, other->credit_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(type_, other->type_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddCredit_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddCredit_Req_descriptor_;
  metadata.reflection = Admin_AddCredit_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddCredit_Rsp::_default_platid_;
const ::std::string Admin_AddCredit_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddCredit_Rsp::kUidFieldNumber;
const int Admin_AddCredit_Rsp::kPlatidFieldNumber;
const int Admin_AddCredit_Rsp::kOldcreditFieldNumber;
const int Admin_AddCredit_Rsp::kNewcreditFieldNumber;
const int Admin_AddCredit_Rsp::kGidFieldNumber;
const int Admin_AddCredit_Rsp::kAdminfdFieldNumber;
const int Admin_AddCredit_Rsp::kTypeFieldNumber;
const int Admin_AddCredit_Rsp::kSidFieldNumber;
const int Admin_AddCredit_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddCredit_Rsp::Admin_AddCredit_Rsp() {
  SharedCtor();
}

void Admin_AddCredit_Rsp::InitAsDefaultInstance() {
}

Admin_AddCredit_Rsp::Admin_AddCredit_Rsp(const Admin_AddCredit_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddCredit_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  oldcredit_ = GOOGLE_LONGLONG(0);
  newcredit_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  type_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddCredit_Rsp::~Admin_AddCredit_Rsp() {
  SharedDtor();
}

void Admin_AddCredit_Rsp::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddCredit_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddCredit_Rsp_descriptor_;
}

const Admin_AddCredit_Rsp& Admin_AddCredit_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddCredit_Rsp* Admin_AddCredit_Rsp::default_instance_ = NULL;

Admin_AddCredit_Rsp* Admin_AddCredit_Rsp::New() const {
  return new Admin_AddCredit_Rsp;
}

void Admin_AddCredit_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
    oldcredit_ = GOOGLE_LONGLONG(0);
    newcredit_ = GOOGLE_LONGLONG(0);
    gid_ = 0;
    adminfd_ = 0;
    type_ = 0;
    if (_has_bit(7)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddCredit_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // optional string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_oldcredit;
        break;
      }
      
      // required int64 oldcredit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldcredit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &oldcredit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_newcredit;
        break;
      }
      
      // required int64 newcredit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newcredit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &newcredit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // required int32 type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_sid;
        break;
      }
      
      // optional string sid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(72)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddCredit_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddCredit_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  // required int64 oldcredit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->oldcredit(), output);
  }
  
  // required int64 newcredit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->newcredit(), output);
  }
  
  // required int32 gid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }
  
  // required int32 adminfd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adminfd(), output);
  }
  
  // required int32 type = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // optional string sid = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sid(), output);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddCredit_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  // required int64 oldcredit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->oldcredit(), target);
  }
  
  // required int64 newcredit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->newcredit(), target);
  }
  
  // required int32 gid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }
  
  // required int32 adminfd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adminfd(), target);
  }
  
  // required int32 type = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // optional string sid = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sid(), target);
  }
  
  // optional bool fromweb = 9 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddCredit_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
    // required int64 oldcredit = 3;
    if (has_oldcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oldcredit());
    }
    
    // required int64 newcredit = 4;
    if (has_newcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newcredit());
    }
    
    // required int32 gid = 5;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 6;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // required int32 type = 7 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string sid = 8;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool fromweb = 9 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddCredit_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddCredit_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddCredit_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddCredit_Rsp::MergeFrom(const Admin_AddCredit_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
    if (from._has_bit(2)) {
      set_oldcredit(from.oldcredit());
    }
    if (from._has_bit(3)) {
      set_newcredit(from.newcredit());
    }
    if (from._has_bit(4)) {
      set_gid(from.gid());
    }
    if (from._has_bit(5)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(6)) {
      set_type(from.type());
    }
    if (from._has_bit(7)) {
      set_sid(from.sid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddCredit_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddCredit_Rsp::CopyFrom(const Admin_AddCredit_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddCredit_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  
  return true;
}

void Admin_AddCredit_Rsp::Swap(Admin_AddCredit_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(oldcredit_, other->oldcredit_);
    std::swap(newcredit_, other->newcredit_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(type_, other->type_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddCredit_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddCredit_Rsp_descriptor_;
  metadata.reflection = Admin_AddCredit_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AdminOpt_Req::_default_admin_;
const ::std::string Admin_AdminOpt_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_AdminOpt_Req::kUidFieldNumber;
const int Admin_AdminOpt_Req::kOptTypeFieldNumber;
const int Admin_AdminOpt_Req::kAdminFieldNumber;
const int Admin_AdminOpt_Req::kRes1FieldNumber;
const int Admin_AdminOpt_Req::kRes2FieldNumber;
const int Admin_AdminOpt_Req::kCountFieldNumber;
const int Admin_AdminOpt_Req::kArmytypeFieldNumber;
const int Admin_AdminOpt_Req::kBldtypeFieldNumber;
const int Admin_AdminOpt_Req::kBldidFieldNumber;
const int Admin_AdminOpt_Req::kLevelFieldNumber;
const int Admin_AdminOpt_Req::kNpcidFieldNumber;
const int Admin_AdminOpt_Req::kGidFieldNumber;
const int Admin_AdminOpt_Req::kAdminfdFieldNumber;
const int Admin_AdminOpt_Req::kSidFieldNumber;
const int Admin_AdminOpt_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AdminOpt_Req::Admin_AdminOpt_Req() {
  SharedCtor();
}

void Admin_AdminOpt_Req::InitAsDefaultInstance() {
}

Admin_AdminOpt_Req::Admin_AdminOpt_Req(const Admin_AdminOpt_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AdminOpt_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  opttype_ = 0;
  admin_ = const_cast< ::std::string*>(&_default_admin_);
  res1_ = GOOGLE_LONGLONG(0);
  res2_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  armytype_ = 0;
  bldtype_ = 0;
  bldid_ = 0;
  level_ = 0;
  npcid_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AdminOpt_Req::~Admin_AdminOpt_Req() {
  SharedDtor();
}

void Admin_AdminOpt_Req::SharedDtor() {
  if (admin_ != &_default_admin_) {
    delete admin_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AdminOpt_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AdminOpt_Req_descriptor_;
}

const Admin_AdminOpt_Req& Admin_AdminOpt_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AdminOpt_Req* Admin_AdminOpt_Req::default_instance_ = NULL;

Admin_AdminOpt_Req* Admin_AdminOpt_Req::New() const {
  return new Admin_AdminOpt_Req;
}

void Admin_AdminOpt_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    opttype_ = 0;
    if (_has_bit(2)) {
      if (admin_ != &_default_admin_) {
        admin_->clear();
      }
    }
    res1_ = GOOGLE_LONGLONG(0);
    res2_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    armytype_ = 0;
    bldtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bldid_ = 0;
    level_ = 0;
    npcid_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(13)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AdminOpt_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_optType;
        break;
      }
      
      // optional int32 optType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &opttype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_admin;
        break;
      }
      
      // optional string admin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_admin()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->admin().data(), this->admin().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_res1;
        break;
      }
      
      // optional int64 res1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_res1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &res1_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_res2;
        break;
      }
      
      // optional int64 res2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_res2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &res2_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }
      
      // optional int32 count = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &count_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_armytype;
        break;
      }
      
      // optional int32 armytype = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_armytype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &armytype_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_bldtype;
        break;
      }
      
      // optional int32 bldtype = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldtype:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldtype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_bldid;
        break;
      }
      
      // optional int32 bldid = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bldid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bldid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }
      
      // optional int32 level = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_npcid;
        break;
      }
      
      // optional int32 npcid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &npcid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_gid;
        break;
      }
      
      // optional int32 gid = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_adminfd;
        break;
      }
      
      // optional int32 adminfd = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_sid;
        break;
      }
      
      // optional string sid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(120)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AdminOpt_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AdminOpt_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 optType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opttype(), output);
  }
  
  // optional string admin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin().data(), this->admin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->admin(), output);
  }
  
  // optional int64 res1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->res1(), output);
  }
  
  // optional int64 res2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->res2(), output);
  }
  
  // optional int32 count = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }
  
  // optional int32 armytype = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->armytype(), output);
  }
  
  // optional int32 bldtype = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bldtype(), output);
  }
  
  // optional int32 bldid = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bldid(), output);
  }
  
  // optional int32 level = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }
  
  // optional int32 npcid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->npcid(), output);
  }
  
  // optional int32 gid = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gid(), output);
  }
  
  // optional int32 adminfd = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->adminfd(), output);
  }
  
  // optional string sid = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sid(), output);
  }
  
  // optional bool fromweb = 15 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AdminOpt_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 optType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opttype(), target);
  }
  
  // optional string admin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin().data(), this->admin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->admin(), target);
  }
  
  // optional int64 res1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->res1(), target);
  }
  
  // optional int64 res2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->res2(), target);
  }
  
  // optional int32 count = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }
  
  // optional int32 armytype = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->armytype(), target);
  }
  
  // optional int32 bldtype = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bldtype(), target);
  }
  
  // optional int32 bldid = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bldid(), target);
  }
  
  // optional int32 level = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }
  
  // optional int32 npcid = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->npcid(), target);
  }
  
  // optional int32 gid = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gid(), target);
  }
  
  // optional int32 adminfd = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->adminfd(), target);
  }
  
  // optional string sid = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sid(), target);
  }
  
  // optional bool fromweb = 15 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AdminOpt_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 optType = 2;
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }
    
    // optional string admin = 3;
    if (has_admin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin());
    }
    
    // optional int64 res1 = 4;
    if (has_res1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->res1());
    }
    
    // optional int64 res2 = 5;
    if (has_res2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->res2());
    }
    
    // optional int32 count = 6 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 armytype = 7 [default = 0];
    if (has_armytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armytype());
    }
    
    // optional int32 bldtype = 8 [default = 0];
    if (has_bldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldtype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bldid = 9 [default = 0];
    if (has_bldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bldid());
    }
    
    // optional int32 level = 10 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 npcid = 11;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }
    
    // optional int32 gid = 12 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // optional int32 adminfd = 13;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 14;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 15 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AdminOpt_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AdminOpt_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AdminOpt_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AdminOpt_Req::MergeFrom(const Admin_AdminOpt_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_opttype(from.opttype());
    }
    if (from._has_bit(2)) {
      set_admin(from.admin());
    }
    if (from._has_bit(3)) {
      set_res1(from.res1());
    }
    if (from._has_bit(4)) {
      set_res2(from.res2());
    }
    if (from._has_bit(5)) {
      set_count(from.count());
    }
    if (from._has_bit(6)) {
      set_armytype(from.armytype());
    }
    if (from._has_bit(7)) {
      set_bldtype(from.bldtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_bldid(from.bldid());
    }
    if (from._has_bit(9)) {
      set_level(from.level());
    }
    if (from._has_bit(10)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(11)) {
      set_gid(from.gid());
    }
    if (from._has_bit(12)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(13)) {
      set_sid(from.sid());
    }
    if (from._has_bit(14)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AdminOpt_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AdminOpt_Req::CopyFrom(const Admin_AdminOpt_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AdminOpt_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Admin_AdminOpt_Req::Swap(Admin_AdminOpt_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(opttype_, other->opttype_);
    std::swap(admin_, other->admin_);
    std::swap(res1_, other->res1_);
    std::swap(res2_, other->res2_);
    std::swap(count_, other->count_);
    std::swap(armytype_, other->armytype_);
    std::swap(bldtype_, other->bldtype_);
    std::swap(bldid_, other->bldid_);
    std::swap(level_, other->level_);
    std::swap(npcid_, other->npcid_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AdminOpt_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AdminOpt_Req_descriptor_;
  metadata.reflection = Admin_AdminOpt_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AdminOpt_Rsp::_default_admin_;
const ::std::string Admin_AdminOpt_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_AdminOpt_Rsp::kUidFieldNumber;
const int Admin_AdminOpt_Rsp::kOptTypeFieldNumber;
const int Admin_AdminOpt_Rsp::kAdminFieldNumber;
const int Admin_AdminOpt_Rsp::kLevelFieldNumber;
const int Admin_AdminOpt_Rsp::kRes1FieldNumber;
const int Admin_AdminOpt_Rsp::kRes2FieldNumber;
const int Admin_AdminOpt_Rsp::kCreditFieldNumber;
const int Admin_AdminOpt_Rsp::kSuccFieldNumber;
const int Admin_AdminOpt_Rsp::kGidFieldNumber;
const int Admin_AdminOpt_Rsp::kAdminfdFieldNumber;
const int Admin_AdminOpt_Rsp::kSidFieldNumber;
const int Admin_AdminOpt_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AdminOpt_Rsp::Admin_AdminOpt_Rsp() {
  SharedCtor();
}

void Admin_AdminOpt_Rsp::InitAsDefaultInstance() {
}

Admin_AdminOpt_Rsp::Admin_AdminOpt_Rsp(const Admin_AdminOpt_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AdminOpt_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  opttype_ = 0;
  admin_ = const_cast< ::std::string*>(&_default_admin_);
  level_ = 0;
  res1_ = GOOGLE_LONGLONG(0);
  res2_ = GOOGLE_LONGLONG(0);
  credit_ = GOOGLE_LONGLONG(0);
  succ_ = false;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AdminOpt_Rsp::~Admin_AdminOpt_Rsp() {
  SharedDtor();
}

void Admin_AdminOpt_Rsp::SharedDtor() {
  if (admin_ != &_default_admin_) {
    delete admin_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AdminOpt_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AdminOpt_Rsp_descriptor_;
}

const Admin_AdminOpt_Rsp& Admin_AdminOpt_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AdminOpt_Rsp* Admin_AdminOpt_Rsp::default_instance_ = NULL;

Admin_AdminOpt_Rsp* Admin_AdminOpt_Rsp::New() const {
  return new Admin_AdminOpt_Rsp;
}

void Admin_AdminOpt_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    opttype_ = 0;
    if (_has_bit(2)) {
      if (admin_ != &_default_admin_) {
        admin_->clear();
      }
    }
    level_ = 0;
    res1_ = GOOGLE_LONGLONG(0);
    res2_ = GOOGLE_LONGLONG(0);
    credit_ = GOOGLE_LONGLONG(0);
    succ_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(10)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AdminOpt_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_optType;
        break;
      }
      
      // optional int32 optType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &opttype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_admin;
        break;
      }
      
      // optional string admin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_admin()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->admin().data(), this->admin().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_res1;
        break;
      }
      
      // optional int64 res1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_res1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &res1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_res2;
        break;
      }
      
      // optional int64 res2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_res2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &res2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_credit;
        break;
      }
      
      // optional int64 credit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_credit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &credit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_succ;
        break;
      }
      
      // optional bool succ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_succ:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &succ_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_gid;
        break;
      }
      
      // optional int32 gid = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_adminfd;
        break;
      }
      
      // optional int32 adminfd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_sid;
        break;
      }
      
      // optional string sid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(96)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AdminOpt_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AdminOpt_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 optType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opttype(), output);
  }
  
  // optional string admin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin().data(), this->admin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->admin(), output);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int64 res1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->res1(), output);
  }
  
  // optional int64 res2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->res2(), output);
  }
  
  // optional int64 credit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->credit(), output);
  }
  
  // optional bool succ = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->succ(), output);
  }
  
  // optional int32 gid = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gid(), output);
  }
  
  // optional int32 adminfd = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->adminfd(), output);
  }
  
  // optional string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sid(), output);
  }
  
  // optional bool fromweb = 12 [default = false];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AdminOpt_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 optType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opttype(), target);
  }
  
  // optional string admin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin().data(), this->admin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->admin(), target);
  }
  
  // optional int32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int64 res1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->res1(), target);
  }
  
  // optional int64 res2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->res2(), target);
  }
  
  // optional int64 credit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->credit(), target);
  }
  
  // optional bool succ = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->succ(), target);
  }
  
  // optional int32 gid = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gid(), target);
  }
  
  // optional int32 adminfd = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->adminfd(), target);
  }
  
  // optional string sid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sid(), target);
  }
  
  // optional bool fromweb = 12 [default = false];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AdminOpt_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 optType = 2;
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }
    
    // optional string admin = 3;
    if (has_admin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 res1 = 5;
    if (has_res1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->res1());
    }
    
    // optional int64 res2 = 6;
    if (has_res2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->res2());
    }
    
    // optional int64 credit = 7;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credit());
    }
    
    // optional bool succ = 8;
    if (has_succ()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gid = 9 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // optional int32 adminfd = 10;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 11;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 12 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AdminOpt_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AdminOpt_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AdminOpt_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AdminOpt_Rsp::MergeFrom(const Admin_AdminOpt_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_opttype(from.opttype());
    }
    if (from._has_bit(2)) {
      set_admin(from.admin());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_res1(from.res1());
    }
    if (from._has_bit(5)) {
      set_res2(from.res2());
    }
    if (from._has_bit(6)) {
      set_credit(from.credit());
    }
    if (from._has_bit(7)) {
      set_succ(from.succ());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_gid(from.gid());
    }
    if (from._has_bit(9)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(10)) {
      set_sid(from.sid());
    }
    if (from._has_bit(11)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AdminOpt_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AdminOpt_Rsp::CopyFrom(const Admin_AdminOpt_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AdminOpt_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Admin_AdminOpt_Rsp::Swap(Admin_AdminOpt_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(opttype_, other->opttype_);
    std::swap(admin_, other->admin_);
    std::swap(level_, other->level_);
    std::swap(res1_, other->res1_);
    std::swap(res2_, other->res2_);
    std::swap(credit_, other->credit_);
    std::swap(succ_, other->succ_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AdminOpt_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AdminOpt_Rsp_descriptor_;
  metadata.reflection = Admin_AdminOpt_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_SetLevel_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_SetLevel_Req::kUidFieldNumber;
const int Admin_SetLevel_Req::kLevelFieldNumber;
const int Admin_SetLevel_Req::kGidFieldNumber;
const int Admin_SetLevel_Req::kAdminfdFieldNumber;
const int Admin_SetLevel_Req::kSidFieldNumber;
const int Admin_SetLevel_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_SetLevel_Req::Admin_SetLevel_Req() {
  SharedCtor();
}

void Admin_SetLevel_Req::InitAsDefaultInstance() {
}

Admin_SetLevel_Req::Admin_SetLevel_Req(const Admin_SetLevel_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_SetLevel_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetLevel_Req::~Admin_SetLevel_Req() {
  SharedDtor();
}

void Admin_SetLevel_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_SetLevel_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetLevel_Req_descriptor_;
}

const Admin_SetLevel_Req& Admin_SetLevel_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_SetLevel_Req* Admin_SetLevel_Req::default_instance_ = NULL;

Admin_SetLevel_Req* Admin_SetLevel_Req::New() const {
  return new Admin_SetLevel_Req;
}

void Admin_SetLevel_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_SetLevel_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }
      
      // optional string sid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_SetLevel_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_SetLevel_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sid(), output);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_SetLevel_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_SetLevel_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 gid = 3 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 4;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 6 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_SetLevel_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_SetLevel_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetLevel_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetLevel_Req::MergeFrom(const Admin_SetLevel_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_SetLevel_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetLevel_Req::CopyFrom(const Admin_SetLevel_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetLevel_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Admin_SetLevel_Req::Swap(Admin_SetLevel_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_SetLevel_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetLevel_Req_descriptor_;
  metadata.reflection = Admin_SetLevel_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_SetLevel_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_SetLevel_Rsp::kUidFieldNumber;
const int Admin_SetLevel_Rsp::kOldlevelFieldNumber;
const int Admin_SetLevel_Rsp::kNewlevelFieldNumber;
const int Admin_SetLevel_Rsp::kGidFieldNumber;
const int Admin_SetLevel_Rsp::kAdminfdFieldNumber;
const int Admin_SetLevel_Rsp::kSidFieldNumber;
const int Admin_SetLevel_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_SetLevel_Rsp::Admin_SetLevel_Rsp() {
  SharedCtor();
}

void Admin_SetLevel_Rsp::InitAsDefaultInstance() {
}

Admin_SetLevel_Rsp::Admin_SetLevel_Rsp(const Admin_SetLevel_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_SetLevel_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldlevel_ = 0;
  newlevel_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetLevel_Rsp::~Admin_SetLevel_Rsp() {
  SharedDtor();
}

void Admin_SetLevel_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_SetLevel_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetLevel_Rsp_descriptor_;
}

const Admin_SetLevel_Rsp& Admin_SetLevel_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_SetLevel_Rsp* Admin_SetLevel_Rsp::default_instance_ = NULL;

Admin_SetLevel_Rsp* Admin_SetLevel_Rsp::New() const {
  return new Admin_SetLevel_Rsp;
}

void Admin_SetLevel_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    oldlevel_ = 0;
    newlevel_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_SetLevel_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oldlevel;
        break;
      }
      
      // required int32 oldlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oldlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_newlevel;
        break;
      }
      
      // required int32 newlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newlevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &newlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_SetLevel_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_SetLevel_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 oldlevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldlevel(), output);
  }
  
  // required int32 newlevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newlevel(), output);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_SetLevel_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 oldlevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldlevel(), target);
  }
  
  // required int32 newlevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newlevel(), target);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_SetLevel_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 oldlevel = 2;
    if (has_oldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldlevel());
    }
    
    // required int32 newlevel = 3;
    if (has_newlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlevel());
    }
    
    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_SetLevel_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_SetLevel_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetLevel_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetLevel_Rsp::MergeFrom(const Admin_SetLevel_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_oldlevel(from.oldlevel());
    }
    if (from._has_bit(2)) {
      set_newlevel(from.newlevel());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_SetLevel_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetLevel_Rsp::CopyFrom(const Admin_SetLevel_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetLevel_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_SetLevel_Rsp::Swap(Admin_SetLevel_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(oldlevel_, other->oldlevel_);
    std::swap(newlevel_, other->newlevel_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_SetLevel_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetLevel_Rsp_descriptor_;
  metadata.reflection = Admin_SetLevel_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BanChat_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_BanChat_Req::kUidFieldNumber;
const int Admin_BanChat_Req::kIsbanFieldNumber;
const int Admin_BanChat_Req::kTimeFieldNumber;
const int Admin_BanChat_Req::kGidFieldNumber;
const int Admin_BanChat_Req::kAdminfdFieldNumber;
const int Admin_BanChat_Req::kSidFieldNumber;
const int Admin_BanChat_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanChat_Req::Admin_BanChat_Req() {
  SharedCtor();
}

void Admin_BanChat_Req::InitAsDefaultInstance() {
}

Admin_BanChat_Req::Admin_BanChat_Req(const Admin_BanChat_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BanChat_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanChat_Req::~Admin_BanChat_Req() {
  SharedDtor();
}

void Admin_BanChat_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BanChat_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanChat_Req_descriptor_;
}

const Admin_BanChat_Req& Admin_BanChat_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BanChat_Req* Admin_BanChat_Req::default_instance_ = NULL;

Admin_BanChat_Req* Admin_BanChat_Req::New() const {
  return new Admin_BanChat_Req;
}

void Admin_BanChat_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    isban_ = false;
    time_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BanChat_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }
      
      // required bool isban = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isban_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BanChat_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BanChat_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BanChat_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BanChat_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required bool isban = 2;
    if (has_isban()) {
      total_size += 1 + 1;
    }
    
    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 gid = 4 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BanChat_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BanChat_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanChat_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanChat_Req::MergeFrom(const Admin_BanChat_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_isban(from.isban());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BanChat_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanChat_Req::CopyFrom(const Admin_BanChat_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanChat_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_BanChat_Req::Swap(Admin_BanChat_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isban_, other->isban_);
    std::swap(time_, other->time_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BanChat_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanChat_Req_descriptor_;
  metadata.reflection = Admin_BanChat_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BanChat_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_BanChat_Rsp::kUidFieldNumber;
const int Admin_BanChat_Rsp::kIsbanFieldNumber;
const int Admin_BanChat_Rsp::kTimeFieldNumber;
const int Admin_BanChat_Rsp::kGidFieldNumber;
const int Admin_BanChat_Rsp::kAdminfdFieldNumber;
const int Admin_BanChat_Rsp::kSidFieldNumber;
const int Admin_BanChat_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanChat_Rsp::Admin_BanChat_Rsp() {
  SharedCtor();
}

void Admin_BanChat_Rsp::InitAsDefaultInstance() {
}

Admin_BanChat_Rsp::Admin_BanChat_Rsp(const Admin_BanChat_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BanChat_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanChat_Rsp::~Admin_BanChat_Rsp() {
  SharedDtor();
}

void Admin_BanChat_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BanChat_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanChat_Rsp_descriptor_;
}

const Admin_BanChat_Rsp& Admin_BanChat_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BanChat_Rsp* Admin_BanChat_Rsp::default_instance_ = NULL;

Admin_BanChat_Rsp* Admin_BanChat_Rsp::New() const {
  return new Admin_BanChat_Rsp;
}

void Admin_BanChat_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    isban_ = false;
    time_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BanChat_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }
      
      // required bool isban = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isban_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BanChat_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BanChat_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BanChat_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BanChat_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required bool isban = 2;
    if (has_isban()) {
      total_size += 1 + 1;
    }
    
    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BanChat_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BanChat_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanChat_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanChat_Rsp::MergeFrom(const Admin_BanChat_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_isban(from.isban());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BanChat_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanChat_Rsp::CopyFrom(const Admin_BanChat_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanChat_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_BanChat_Rsp::Swap(Admin_BanChat_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isban_, other->isban_);
    std::swap(time_, other->time_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BanChat_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanChat_Rsp_descriptor_;
  metadata.reflection = Admin_BanChat_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BanLogin_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_BanLogin_Req::kUidFieldNumber;
const int Admin_BanLogin_Req::kIsbanFieldNumber;
const int Admin_BanLogin_Req::kTimeFieldNumber;
const int Admin_BanLogin_Req::kGidFieldNumber;
const int Admin_BanLogin_Req::kAdminfdFieldNumber;
const int Admin_BanLogin_Req::kSidFieldNumber;
const int Admin_BanLogin_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanLogin_Req::Admin_BanLogin_Req() {
  SharedCtor();
}

void Admin_BanLogin_Req::InitAsDefaultInstance() {
}

Admin_BanLogin_Req::Admin_BanLogin_Req(const Admin_BanLogin_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BanLogin_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanLogin_Req::~Admin_BanLogin_Req() {
  SharedDtor();
}

void Admin_BanLogin_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BanLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanLogin_Req_descriptor_;
}

const Admin_BanLogin_Req& Admin_BanLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BanLogin_Req* Admin_BanLogin_Req::default_instance_ = NULL;

Admin_BanLogin_Req* Admin_BanLogin_Req::New() const {
  return new Admin_BanLogin_Req;
}

void Admin_BanLogin_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    isban_ = false;
    time_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BanLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }
      
      // required bool isban = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isban_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BanLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BanLogin_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BanLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // required int32 gid = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BanLogin_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required bool isban = 2;
    if (has_isban()) {
      total_size += 1 + 1;
    }
    
    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 gid = 4 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BanLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BanLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanLogin_Req::MergeFrom(const Admin_BanLogin_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_isban(from.isban());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BanLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanLogin_Req::CopyFrom(const Admin_BanLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_BanLogin_Req::Swap(Admin_BanLogin_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isban_, other->isban_);
    std::swap(time_, other->time_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BanLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanLogin_Req_descriptor_;
  metadata.reflection = Admin_BanLogin_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BanLogin_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_BanLogin_Rsp::kUidFieldNumber;
const int Admin_BanLogin_Rsp::kIsbanFieldNumber;
const int Admin_BanLogin_Rsp::kTimeFieldNumber;
const int Admin_BanLogin_Rsp::kGidFieldNumber;
const int Admin_BanLogin_Rsp::kAdminfdFieldNumber;
const int Admin_BanLogin_Rsp::kSidFieldNumber;
const int Admin_BanLogin_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanLogin_Rsp::Admin_BanLogin_Rsp() {
  SharedCtor();
}

void Admin_BanLogin_Rsp::InitAsDefaultInstance() {
}

Admin_BanLogin_Rsp::Admin_BanLogin_Rsp(const Admin_BanLogin_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BanLogin_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanLogin_Rsp::~Admin_BanLogin_Rsp() {
  SharedDtor();
}

void Admin_BanLogin_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BanLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanLogin_Rsp_descriptor_;
}

const Admin_BanLogin_Rsp& Admin_BanLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BanLogin_Rsp* Admin_BanLogin_Rsp::default_instance_ = NULL;

Admin_BanLogin_Rsp* Admin_BanLogin_Rsp::New() const {
  return new Admin_BanLogin_Rsp;
}

void Admin_BanLogin_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    isban_ = false;
    time_ = 0;
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BanLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }
      
      // required bool isban = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &isban_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BanLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BanLogin_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BanLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required bool isban = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }
  
  // required int32 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BanLogin_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required bool isban = 2;
    if (has_isban()) {
      total_size += 1 + 1;
    }
    
    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BanLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BanLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanLogin_Rsp::MergeFrom(const Admin_BanLogin_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_isban(from.isban());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BanLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanLogin_Rsp::CopyFrom(const Admin_BanLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_BanLogin_Rsp::Swap(Admin_BanLogin_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isban_, other->isban_);
    std::swap(time_, other->time_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BanLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanLogin_Rsp_descriptor_;
  metadata.reflection = Admin_BanLogin_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_Reload_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_Reload_Req::kGidFieldNumber;
const int Admin_Reload_Req::kAdminfdFieldNumber;
const int Admin_Reload_Req::kSidFieldNumber;
const int Admin_Reload_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_Reload_Req::Admin_Reload_Req() {
  SharedCtor();
}

void Admin_Reload_Req::InitAsDefaultInstance() {
}

Admin_Reload_Req::Admin_Reload_Req(const Admin_Reload_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_Reload_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Reload_Req::~Admin_Reload_Req() {
  SharedDtor();
}

void Admin_Reload_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_Reload_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Reload_Req_descriptor_;
}

const Admin_Reload_Req& Admin_Reload_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_Reload_Req* Admin_Reload_Req::default_instance_ = NULL;

Admin_Reload_Req* Admin_Reload_Req::New() const {
  return new Admin_Reload_Req;
}

void Admin_Reload_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_Reload_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // optional string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_Reload_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_Reload_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_Reload_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_Reload_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 2;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_Reload_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_Reload_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Reload_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Reload_Req::MergeFrom(const Admin_Reload_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_Reload_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Reload_Req::CopyFrom(const Admin_Reload_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Reload_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Admin_Reload_Req::Swap(Admin_Reload_Req* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_Reload_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Reload_Req_descriptor_;
  metadata.reflection = Admin_Reload_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_Reload_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_Reload_Rsp::kGidFieldNumber;
const int Admin_Reload_Rsp::kAdminfdFieldNumber;
const int Admin_Reload_Rsp::kSidFieldNumber;
const int Admin_Reload_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_Reload_Rsp::Admin_Reload_Rsp() {
  SharedCtor();
}

void Admin_Reload_Rsp::InitAsDefaultInstance() {
}

Admin_Reload_Rsp::Admin_Reload_Rsp(const Admin_Reload_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_Reload_Rsp::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Reload_Rsp::~Admin_Reload_Rsp() {
  SharedDtor();
}

void Admin_Reload_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_Reload_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Reload_Rsp_descriptor_;
}

const Admin_Reload_Rsp& Admin_Reload_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_Reload_Rsp* Admin_Reload_Rsp::default_instance_ = NULL;

Admin_Reload_Rsp* Admin_Reload_Rsp::New() const {
  return new Admin_Reload_Rsp;
}

void Admin_Reload_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_Reload_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // optional string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_Reload_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_Reload_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_Reload_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_Reload_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 2;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_Reload_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_Reload_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Reload_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Reload_Rsp::MergeFrom(const Admin_Reload_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_Reload_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Reload_Rsp::CopyFrom(const Admin_Reload_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Reload_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Admin_Reload_Rsp::Swap(Admin_Reload_Rsp* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_Reload_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Reload_Rsp_descriptor_;
  metadata.reflection = Admin_Reload_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BandWGUser_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_BandWGUser_Req::kGidFieldNumber;
const int Admin_BandWGUser_Req::kAdminfdFieldNumber;
const int Admin_BandWGUser_Req::kSidFieldNumber;
const int Admin_BandWGUser_Req::kFromwebFieldNumber;
const int Admin_BandWGUser_Req::kBanduserFieldNumber;
#endif  // !_MSC_VER

Admin_BandWGUser_Req::Admin_BandWGUser_Req() {
  SharedCtor();
}

void Admin_BandWGUser_Req::InitAsDefaultInstance() {
}

Admin_BandWGUser_Req::Admin_BandWGUser_Req(const Admin_BandWGUser_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BandWGUser_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  banduser_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BandWGUser_Req::~Admin_BandWGUser_Req() {
  SharedDtor();
}

void Admin_BandWGUser_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BandWGUser_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BandWGUser_Req_descriptor_;
}

const Admin_BandWGUser_Req& Admin_BandWGUser_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BandWGUser_Req* Admin_BandWGUser_Req::default_instance_ = NULL;

Admin_BandWGUser_Req* Admin_BandWGUser_Req::New() const {
  return new Admin_BandWGUser_Req;
}

void Admin_BandWGUser_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
    banduser_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BandWGUser_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // optional string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_banduser;
        break;
      }
      
      // optional int32 banduser = 5 [default = 20];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_banduser:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &banduser_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BandWGUser_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BandWGUser_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }
  
  // optional int32 banduser = 5 [default = 20];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->banduser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BandWGUser_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }
  
  // optional int32 banduser = 5 [default = 20];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->banduser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BandWGUser_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 2;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
    // optional int32 banduser = 5 [default = 20];
    if (has_banduser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banduser());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BandWGUser_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BandWGUser_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BandWGUser_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BandWGUser_Req::MergeFrom(const Admin_BandWGUser_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fromweb(from.fromweb());
    }
    if (from._has_bit(4)) {
      set_banduser(from.banduser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BandWGUser_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BandWGUser_Req::CopyFrom(const Admin_BandWGUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BandWGUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Admin_BandWGUser_Req::Swap(Admin_BandWGUser_Req* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(banduser_, other->banduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BandWGUser_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BandWGUser_Req_descriptor_;
  metadata.reflection = Admin_BandWGUser_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_BandWGUser_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_BandWGUser_Rsp::kGidFieldNumber;
const int Admin_BandWGUser_Rsp::kAdminfdFieldNumber;
const int Admin_BandWGUser_Rsp::kSidFieldNumber;
const int Admin_BandWGUser_Rsp::kFromwebFieldNumber;
const int Admin_BandWGUser_Rsp::kBanduserFieldNumber;
#endif  // !_MSC_VER

Admin_BandWGUser_Rsp::Admin_BandWGUser_Rsp() {
  SharedCtor();
}

void Admin_BandWGUser_Rsp::InitAsDefaultInstance() {
}

Admin_BandWGUser_Rsp::Admin_BandWGUser_Rsp(const Admin_BandWGUser_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BandWGUser_Rsp::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  banduser_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BandWGUser_Rsp::~Admin_BandWGUser_Rsp() {
  SharedDtor();
}

void Admin_BandWGUser_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_BandWGUser_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BandWGUser_Rsp_descriptor_;
}

const Admin_BandWGUser_Rsp& Admin_BandWGUser_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_BandWGUser_Rsp* Admin_BandWGUser_Rsp::default_instance_ = NULL;

Admin_BandWGUser_Rsp* Admin_BandWGUser_Rsp::New() const {
  return new Admin_BandWGUser_Rsp;
}

void Admin_BandWGUser_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
    banduser_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BandWGUser_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // optional string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_banduser;
        break;
      }
      
      // optional int32 banduser = 5 [default = 20];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_banduser:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &banduser_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BandWGUser_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_BandWGUser_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 gid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }
  
  // optional int32 banduser = 5 [default = 20];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->banduser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BandWGUser_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required int32 adminfd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }
  
  // optional string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // optional bool fromweb = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }
  
  // optional int32 banduser = 5 [default = 20];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->banduser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BandWGUser_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 2;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
    // optional int32 banduser = 5 [default = 20];
    if (has_banduser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banduser());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_BandWGUser_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BandWGUser_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BandWGUser_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BandWGUser_Rsp::MergeFrom(const Admin_BandWGUser_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gid(from.gid());
    }
    if (from._has_bit(1)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fromweb(from.fromweb());
    }
    if (from._has_bit(4)) {
      set_banduser(from.banduser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BandWGUser_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BandWGUser_Rsp::CopyFrom(const Admin_BandWGUser_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BandWGUser_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Admin_BandWGUser_Rsp::Swap(Admin_BandWGUser_Rsp* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(banduser_, other->banduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BandWGUser_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BandWGUser_Rsp_descriptor_;
  metadata.reflection = Admin_BandWGUser_Rsp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string InviteFriend::_default_inviteplatid_;
const ::std::string InviteFriend::_default_invitedplatid_;
const ::std::string InviteFriend::_default_invitedname_;
const ::std::string InviteFriend::_default_sid_;
#ifndef _MSC_VER
const int InviteFriend::kInvitePlatIDFieldNumber;
const int InviteFriend::kInvitedPlatIDFieldNumber;
const int InviteFriend::kInvitedUidFieldNumber;
const int InviteFriend::kInvitedNameFieldNumber;
const int InviteFriend::kSidFieldNumber;
const int InviteFriend::kFdFieldNumber;
#endif  // !_MSC_VER

InviteFriend::InviteFriend() {
  SharedCtor();
}

void InviteFriend::InitAsDefaultInstance() {
}

InviteFriend::InviteFriend(const InviteFriend& from) {
  SharedCtor();
  MergeFrom(from);
}

void InviteFriend::SharedCtor() {
  _cached_size_ = 0;
  inviteplatid_ = const_cast< ::std::string*>(&_default_inviteplatid_);
  invitedplatid_ = const_cast< ::std::string*>(&_default_invitedplatid_);
  inviteduid_ = GOOGLE_LONGLONG(0);
  invitedname_ = const_cast< ::std::string*>(&_default_invitedname_);
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFriend::~InviteFriend() {
  SharedDtor();
}

void InviteFriend::SharedDtor() {
  if (inviteplatid_ != &_default_inviteplatid_) {
    delete inviteplatid_;
  }
  if (invitedplatid_ != &_default_invitedplatid_) {
    delete invitedplatid_;
  }
  if (invitedname_ != &_default_invitedname_) {
    delete invitedname_;
  }
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* InviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFriend_descriptor_;
}

const InviteFriend& InviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

InviteFriend* InviteFriend::default_instance_ = NULL;

InviteFriend* InviteFriend::New() const {
  return new InviteFriend;
}

void InviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (inviteplatid_ != &_default_inviteplatid_) {
        inviteplatid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (invitedplatid_ != &_default_invitedplatid_) {
        invitedplatid_->clear();
      }
    }
    inviteduid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (invitedname_ != &_default_invitedname_) {
        invitedname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invitePlatID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_inviteplatid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->inviteplatid().data(), this->inviteplatid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_invitedPlatID;
        break;
      }
      
      // optional string invitedPlatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_invitedPlatID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_invitedplatid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->invitedplatid().data(), this->invitedplatid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_invitedUid;
        break;
      }
      
      // optional int64 invitedUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_invitedUid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &inviteduid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_invitedName;
        break;
      }
      
      // optional string invitedName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_invitedName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_invitedname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->invitedname().data(), this->invitedname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }
      
      // optional string sid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fd;
        break;
      }
      
      // optional int32 fd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    InviteFriend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string invitePlatID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviteplatid().data(), this->inviteplatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inviteplatid(), output);
  }
  
  // optional string invitedPlatID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitedplatid().data(), this->invitedplatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->invitedplatid(), output);
  }
  
  // optional int64 invitedUid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->inviteduid(), output);
  }
  
  // optional string invitedName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitedname().data(), this->invitedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->invitedname(), output);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sid(), output);
  }
  
  // optional int32 fd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string invitePlatID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviteplatid().data(), this->inviteplatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviteplatid(), target);
  }
  
  // optional string invitedPlatID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitedplatid().data(), this->invitedplatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitedplatid(), target);
  }
  
  // optional int64 invitedUid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->inviteduid(), target);
  }
  
  // optional string invitedName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitedname().data(), this->invitedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invitedname(), target);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }
  
  // optional int32 fd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string invitePlatID = 1;
    if (has_inviteplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviteplatid());
    }
    
    // optional string invitedPlatID = 2;
    if (has_invitedplatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitedplatid());
    }
    
    // optional int64 invitedUid = 3;
    if (has_inviteduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviteduid());
    }
    
    // optional string invitedName = 4;
    if (has_invitedname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitedname());
    }
    
    // optional string sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional int32 fd = 6;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void InviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFriend::MergeFrom(const InviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_inviteplatid(from.inviteplatid());
    }
    if (from._has_bit(1)) {
      set_invitedplatid(from.invitedplatid());
    }
    if (from._has_bit(2)) {
      set_inviteduid(from.inviteduid());
    }
    if (from._has_bit(3)) {
      set_invitedname(from.invitedname());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriend::CopyFrom(const InviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriend::IsInitialized() const {
  
  return true;
}

void InviteFriend::Swap(InviteFriend* other) {
  if (other != this) {
    std::swap(inviteplatid_, other->inviteplatid_);
    std::swap(invitedplatid_, other->invitedplatid_);
    std::swap(inviteduid_, other->inviteduid_);
    std::swap(invitedname_, other->invitedname_);
    std::swap(sid_, other->sid_);
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFriend_descriptor_;
  metadata.reflection = InviteFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PhotoNum::_default_sid_;
#ifndef _MSC_VER
const int PhotoNum::kUidFieldNumber;
const int PhotoNum::kTypeFieldNumber;
const int PhotoNum::kSidFieldNumber;
const int PhotoNum::kFdFieldNumber;
const int PhotoNum::kValueFieldNumber;
#endif  // !_MSC_VER

PhotoNum::PhotoNum() {
  SharedCtor();
}

void PhotoNum::InitAsDefaultInstance() {
}

PhotoNum::PhotoNum(const PhotoNum& from) {
  SharedCtor();
  MergeFrom(from);
}

void PhotoNum::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fd_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoNum::~PhotoNum() {
  SharedDtor();
}

void PhotoNum::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PhotoNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoNum_descriptor_;
}

const PhotoNum& PhotoNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

PhotoNum* PhotoNum::default_instance_ = NULL;

PhotoNum* PhotoNum::New() const {
  return new PhotoNum;
}

void PhotoNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fd_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // required string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }
      
      // required int32 fd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }
      
      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhotoNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PhotoNum::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }
  
  // optional int32 value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhotoNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int32 type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fd(), target);
  }
  
  // optional int32 value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhotoNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // required int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PhotoNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoNum::MergeFrom(const PhotoNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fd(from.fd());
    }
    if (from._has_bit(4)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoNum::CopyFrom(const PhotoNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PhotoNum::Swap(PhotoNum* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(sid_, other->sid_);
    std::swap(fd_, other->fd_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoNum_descriptor_;
  metadata.reflection = PhotoNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_StarUser::kLevelFieldNumber;
const int Msg_StarUser::kTypeFieldNumber;
#endif  // !_MSC_VER

Msg_StarUser::Msg_StarUser() {
  SharedCtor();
}

void Msg_StarUser::InitAsDefaultInstance() {
}

Msg_StarUser::Msg_StarUser(const Msg_StarUser& from) {
  SharedCtor();
  MergeFrom(from);
}

void Msg_StarUser::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_StarUser::~Msg_StarUser() {
  SharedDtor();
}

void Msg_StarUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Msg_StarUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_StarUser_descriptor_;
}

const Msg_StarUser& Msg_StarUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Msg_StarUser* Msg_StarUser::default_instance_ = NULL;

Msg_StarUser* Msg_StarUser::New() const {
  return new Msg_StarUser;
}

void Msg_StarUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_StarUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_StarUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Msg_StarUser::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 level = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 type = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_StarUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 type = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_StarUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Msg_StarUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_StarUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_StarUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_StarUser::MergeFrom(const Msg_StarUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_StarUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StarUser::CopyFrom(const Msg_StarUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StarUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Msg_StarUser::Swap(Msg_StarUser* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_StarUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_StarUser_descriptor_;
  metadata.reflection = Msg_StarUser_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string callbackFriend::_default_sid_;
#ifndef _MSC_VER
const int callbackFriend::kUidFieldNumber;
const int callbackFriend::kFriendsPlatidFieldNumber;
const int callbackFriend::kSidFieldNumber;
const int callbackFriend::kFdFieldNumber;
const int callbackFriend::kSuccFieldNumber;
#endif  // !_MSC_VER

callbackFriend::callbackFriend() {
  SharedCtor();
}

void callbackFriend::InitAsDefaultInstance() {
}

callbackFriend::callbackFriend(const callbackFriend& from) {
  SharedCtor();
  MergeFrom(from);
}

void callbackFriend::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fd_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

callbackFriend::~callbackFriend() {
  SharedDtor();
}

void callbackFriend::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* callbackFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return callbackFriend_descriptor_;
}

const callbackFriend& callbackFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

callbackFriend* callbackFriend::default_instance_ = NULL;

callbackFriend* callbackFriend::New() const {
  return new callbackFriend;
}

void callbackFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fd_ = 0;
    succ_ = false;
  }
  friends_platid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool callbackFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_friends_platid;
        break;
      }
      
      // repeated string friends_platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_friends_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_friends_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->friends_platid(0).data(), this->friends_platid(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_friends_platid;
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }
      
      // required string sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }
      
      // required int32 fd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fd_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }
      
      // optional bool succ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_succ:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &succ_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void callbackFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    callbackFriend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // repeated string friends_platid = 2;
  for (int i = 0; i < this->friends_platid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends_platid(i).data(), this->friends_platid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friends_platid(i), output);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sid(), output);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }
  
  // optional bool succ = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->succ(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* callbackFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // repeated string friends_platid = 2;
  for (int i = 0; i < this->friends_platid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends_platid(i).data(), this->friends_platid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->friends_platid(i), target);
  }
  
  // required string sid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }
  
  // required int32 fd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fd(), target);
  }
  
  // optional bool succ = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->succ(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int callbackFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // required int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
    // optional bool succ = 5;
    if (has_succ()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string friends_platid = 2;
  total_size += 1 * this->friends_platid_size();
  for (int i = 0; i < this->friends_platid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_platid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void callbackFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const callbackFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const callbackFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void callbackFriend::MergeFrom(const callbackFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_platid_.MergeFrom(from.friends_platid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(2)) {
      set_sid(from.sid());
    }
    if (from._has_bit(3)) {
      set_fd(from.fd());
    }
    if (from._has_bit(4)) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void callbackFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callbackFriend::CopyFrom(const callbackFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callbackFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void callbackFriend::Swap(callbackFriend* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    friends_platid_.Swap(&other->friends_platid_);
    std::swap(sid_, other->sid_);
    std::swap(fd_, other->fd_);
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata callbackFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = callbackFriend_descriptor_;
  metadata.reflection = callbackFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string callbackFriendToPlatid::_default_platid_;
#ifndef _MSC_VER
const int callbackFriendToPlatid::kUidFieldNumber;
const int callbackFriendToPlatid::kPlatidFieldNumber;
#endif  // !_MSC_VER

callbackFriendToPlatid::callbackFriendToPlatid() {
  SharedCtor();
}

void callbackFriendToPlatid::InitAsDefaultInstance() {
}

callbackFriendToPlatid::callbackFriendToPlatid(const callbackFriendToPlatid& from) {
  SharedCtor();
  MergeFrom(from);
}

void callbackFriendToPlatid::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platid_ = const_cast< ::std::string*>(&_default_platid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

callbackFriendToPlatid::~callbackFriendToPlatid() {
  SharedDtor();
}

void callbackFriendToPlatid::SharedDtor() {
  if (platid_ != &_default_platid_) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* callbackFriendToPlatid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return callbackFriendToPlatid_descriptor_;
}

const callbackFriendToPlatid& callbackFriendToPlatid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

callbackFriendToPlatid* callbackFriendToPlatid::default_instance_ = NULL;

callbackFriendToPlatid* callbackFriendToPlatid::New() const {
  return new callbackFriendToPlatid;
}

void callbackFriendToPlatid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (platid_ != &_default_platid_) {
        platid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool callbackFriendToPlatid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }
      
      // required string platid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_platid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->platid().data(), this->platid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void callbackFriendToPlatid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    callbackFriendToPlatid::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* callbackFriendToPlatid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required string platid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int callbackFriendToPlatid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void callbackFriendToPlatid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const callbackFriendToPlatid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const callbackFriendToPlatid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void callbackFriendToPlatid::MergeFrom(const callbackFriendToPlatid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_platid(from.platid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void callbackFriendToPlatid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callbackFriendToPlatid::CopyFrom(const callbackFriendToPlatid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callbackFriendToPlatid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void callbackFriendToPlatid::Swap(callbackFriendToPlatid* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platid_, other->platid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata callbackFriendToPlatid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = callbackFriendToPlatid_descriptor_;
  metadata.reflection = callbackFriendToPlatid_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddHonor_Req::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddHonor_Req::kUidFieldNumber;
const int Admin_AddHonor_Req::kHonorFieldNumber;
const int Admin_AddHonor_Req::kGidFieldNumber;
const int Admin_AddHonor_Req::kAdminfdFieldNumber;
const int Admin_AddHonor_Req::kSidFieldNumber;
const int Admin_AddHonor_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddHonor_Req::Admin_AddHonor_Req() {
  SharedCtor();
}

void Admin_AddHonor_Req::InitAsDefaultInstance() {
}

Admin_AddHonor_Req::Admin_AddHonor_Req(const Admin_AddHonor_Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddHonor_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  honor_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddHonor_Req::~Admin_AddHonor_Req() {
  SharedDtor();
}

void Admin_AddHonor_Req::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddHonor_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddHonor_Req_descriptor_;
}

const Admin_AddHonor_Req& Admin_AddHonor_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddHonor_Req* Admin_AddHonor_Req::default_instance_ = NULL;

Admin_AddHonor_Req* Admin_AddHonor_Req::New() const {
  return new Admin_AddHonor_Req;
}

void Admin_AddHonor_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    honor_ = GOOGLE_LONGLONG(0);
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(4)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddHonor_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_honor;
        break;
      }
      
      // required int64 honor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &honor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }
      
      // optional string sid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddHonor_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddHonor_Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int64 honor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->honor(), output);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sid(), output);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddHonor_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int64 honor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->honor(), target);
  }
  
  // required int32 gid = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }
  
  // required int32 adminfd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }
  
  // optional string sid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }
  
  // optional bool fromweb = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddHonor_Req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int64 honor = 2;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->honor());
    }
    
    // required int32 gid = 3 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 4;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 6 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddHonor_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddHonor_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddHonor_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddHonor_Req::MergeFrom(const Admin_AddHonor_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_honor(from.honor());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(4)) {
      set_sid(from.sid());
    }
    if (from._has_bit(5)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddHonor_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddHonor_Req::CopyFrom(const Admin_AddHonor_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddHonor_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Admin_AddHonor_Req::Swap(Admin_AddHonor_Req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(honor_, other->honor_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddHonor_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddHonor_Req_descriptor_;
  metadata.reflection = Admin_AddHonor_Req_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Admin_AddHonor_Rsp::_default_sid_;
#ifndef _MSC_VER
const int Admin_AddHonor_Rsp::kUidFieldNumber;
const int Admin_AddHonor_Rsp::kOldhonorFieldNumber;
const int Admin_AddHonor_Rsp::kNewhonorFieldNumber;
const int Admin_AddHonor_Rsp::kGidFieldNumber;
const int Admin_AddHonor_Rsp::kAdminfdFieldNumber;
const int Admin_AddHonor_Rsp::kSidFieldNumber;
const int Admin_AddHonor_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddHonor_Rsp::Admin_AddHonor_Rsp() {
  SharedCtor();
}

void Admin_AddHonor_Rsp::InitAsDefaultInstance() {
}

Admin_AddHonor_Rsp::Admin_AddHonor_Rsp(const Admin_AddHonor_Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void Admin_AddHonor_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldhonor_ = GOOGLE_LONGLONG(0);
  newhonor_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  sid_ = const_cast< ::std::string*>(&_default_sid_);
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddHonor_Rsp::~Admin_AddHonor_Rsp() {
  SharedDtor();
}

void Admin_AddHonor_Rsp::SharedDtor() {
  if (sid_ != &_default_sid_) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Admin_AddHonor_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddHonor_Rsp_descriptor_;
}

const Admin_AddHonor_Rsp& Admin_AddHonor_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Admin_AddHonor_Rsp* Admin_AddHonor_Rsp::default_instance_ = NULL;

Admin_AddHonor_Rsp* Admin_AddHonor_Rsp::New() const {
  return new Admin_AddHonor_Rsp;
}

void Admin_AddHonor_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    oldhonor_ = GOOGLE_LONGLONG(0);
    newhonor_ = GOOGLE_LONGLONG(0);
    gid_ = 0;
    adminfd_ = 0;
    if (_has_bit(5)) {
      if (sid_ != &_default_sid_) {
        sid_->clear();
      }
    }
    fromweb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_AddHonor_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oldhonor;
        break;
      }
      
      // required int64 oldhonor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldhonor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &oldhonor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_newhonor;
        break;
      }
      
      // required int64 newhonor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_newhonor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &newhonor_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }
      
      // required int32 adminfd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adminfd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adminfd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }
      
      // optional string sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sid()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sid().data(), this->sid().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }
      
      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromweb:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &fromweb_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_AddHonor_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Admin_AddHonor_Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int64 oldhonor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->oldhonor(), output);
  }
  
  // required int64 newhonor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newhonor(), output);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sid(), output);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_AddHonor_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required int64 oldhonor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->oldhonor(), target);
  }
  
  // required int64 newhonor = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newhonor(), target);
  }
  
  // required int32 gid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int32 adminfd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }
  
  // optional string sid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }
  
  // optional bool fromweb = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_AddHonor_Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int64 oldhonor = 2;
    if (has_oldhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oldhonor());
    }
    
    // required int64 newhonor = 3;
    if (has_newhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newhonor());
    }
    
    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 adminfd = 5;
    if (has_adminfd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adminfd());
    }
    
    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Admin_AddHonor_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_AddHonor_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddHonor_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddHonor_Rsp::MergeFrom(const Admin_AddHonor_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uid(from.uid());
    }
    if (from._has_bit(1)) {
      set_oldhonor(from.oldhonor());
    }
    if (from._has_bit(2)) {
      set_newhonor(from.newhonor());
    }
    if (from._has_bit(3)) {
      set_gid(from.gid());
    }
    if (from._has_bit(4)) {
      set_adminfd(from.adminfd());
    }
    if (from._has_bit(5)) {
      set_sid(from.sid());
    }
    if (from._has_bit(6)) {
      set_fromweb(from.fromweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_AddHonor_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddHonor_Rsp::CopyFrom(const Admin_AddHonor_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddHonor_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Admin_AddHonor_Rsp::Swap(Admin_AddHonor_Rsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(oldhonor_, other->oldhonor_);
    std::swap(newhonor_, other->newhonor_);
    std::swap(gid_, other->gid_);
    std::swap(adminfd_, other->adminfd_);
    std::swap(sid_, other->sid_);
    std::swap(fromweb_, other->fromweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_AddHonor_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddHonor_Rsp_descriptor_;
  metadata.reflection = Admin_AddHonor_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kCmdFieldNumber;
const int Event::kStateFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kUidFieldNumber;
const int Event::kFromworldFdFieldNumber;
const int Event::kWorkingStatusReqFieldNumber;
const int Event::kUserLoginReqFieldNumber;
const int Event::kUserLoginRspFieldNumber;
const int Event::kUserAuthReqFieldNumber;
const int Event::kUserAuthRspFieldNumber;
const int Event::kSendRemoteUserReqFieldNumber;
const int Event::kWgUserLeaveFieldNumber;
const int Event::kForwardinfoFieldNumber;
const int Event::kStarSrvIDFieldNumber;
const int Event::kCheckAttackFieldNumber;
const int Event::kTransferSrvIDFieldNumber;
const int Event::kAdminProfileReqFieldNumber;
const int Event::kAdminAddExpReqFieldNumber;
const int Event::kAdminAddExpRspFieldNumber;
const int Event::kAdminAddCreditReqFieldNumber;
const int Event::kAdminAddCreditRspFieldNumber;
const int Event::kAdminSetLevelReqFieldNumber;
const int Event::kAdminSetLevelRspFieldNumber;
const int Event::kAdminBanChatReqFieldNumber;
const int Event::kAdminBanChatRspFieldNumber;
const int Event::kAdminBanLoginReqFieldNumber;
const int Event::kAdminBanLoginRspFieldNumber;
const int Event::kAdminReloadReqFieldNumber;
const int Event::kAdminReloadRspFieldNumber;
const int Event::kInviteFriendFieldNumber;
const int Event::kAdminCanAttackReqFieldNumber;
const int Event::kAdminCanAttackRspFieldNumber;
const int Event::kSendgiftFieldNumber;
const int Event::kSendgiftplatidFieldNumber;
const int Event::kAdminbandwguserReqFieldNumber;
const int Event::kAdminbandwguserRspFieldNumber;
const int Event::kAdminOptReqFieldNumber;
const int Event::kAdminOptRspFieldNumber;
const int Event::kWebphotonumFieldNumber;
const int Event::kCallbackfriendFieldNumber;
const int Event::kCallbackfriendtoplatidFieldNumber;
const int Event::kAdminaddhonorReqFieldNumber;
const int Event::kAdminaddhonorRspFieldNumber;
const int Event::kStarUserFieldNumber;
#endif  // !_MSC_VER

Event::Event() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  workingstatus_req_ = const_cast< ::WorkingStatus_Req*>(&::WorkingStatus_Req::default_instance());
  userlogin_req_ = const_cast< ::UserLogin_Req*>(&::UserLogin_Req::default_instance());
  userlogin_rsp_ = const_cast< ::UserLogin_Rsp*>(&::UserLogin_Rsp::default_instance());
  userauth_req_ = const_cast< ::UserAuth_Req*>(&::UserAuth_Req::default_instance());
  userauth_rsp_ = const_cast< ::UserAuth_Rsp*>(&::UserAuth_Rsp::default_instance());
  sendremoteuser_req_ = const_cast< ::SendRemoteUser_Req*>(&::SendRemoteUser_Req::default_instance());
  wg_userleave_ = const_cast< ::WG_UserLeave*>(&::WG_UserLeave::default_instance());
  forwardinfo_ = const_cast< ::ForwardInfo*>(&::ForwardInfo::default_instance());
  checkattack_ = const_cast< ::GWG_CheckAttack*>(&::GWG_CheckAttack::default_instance());
  adminprofile_req_ = const_cast< ::Admin_Profile_Req*>(&::Admin_Profile_Req::default_instance());
  adminaddexp_req_ = const_cast< ::Admin_AddExp_Req*>(&::Admin_AddExp_Req::default_instance());
  adminaddexp_rsp_ = const_cast< ::Admin_AddExp_Rsp*>(&::Admin_AddExp_Rsp::default_instance());
  adminaddcredit_req_ = const_cast< ::Admin_AddCredit_Req*>(&::Admin_AddCredit_Req::default_instance());
  adminaddcredit_rsp_ = const_cast< ::Admin_AddCredit_Rsp*>(&::Admin_AddCredit_Rsp::default_instance());
  adminsetlevel_req_ = const_cast< ::Admin_SetLevel_Req*>(&::Admin_SetLevel_Req::default_instance());
  adminsetlevel_rsp_ = const_cast< ::Admin_SetLevel_Rsp*>(&::Admin_SetLevel_Rsp::default_instance());
  adminbanchat_req_ = const_cast< ::Admin_BanChat_Req*>(&::Admin_BanChat_Req::default_instance());
  adminbanchat_rsp_ = const_cast< ::Admin_BanChat_Rsp*>(&::Admin_BanChat_Rsp::default_instance());
  adminbanlogin_req_ = const_cast< ::Admin_BanLogin_Req*>(&::Admin_BanLogin_Req::default_instance());
  adminbanlogin_rsp_ = const_cast< ::Admin_BanLogin_Rsp*>(&::Admin_BanLogin_Rsp::default_instance());
  adminreload_req_ = const_cast< ::Admin_Reload_Req*>(&::Admin_Reload_Req::default_instance());
  adminreload_rsp_ = const_cast< ::Admin_Reload_Rsp*>(&::Admin_Reload_Rsp::default_instance());
  invitefriend_ = const_cast< ::InviteFriend*>(&::InviteFriend::default_instance());
  admincanattack_req_ = const_cast< ::Admin_CanAttack_Req*>(&::Admin_CanAttack_Req::default_instance());
  admincanattack_rsp_ = const_cast< ::Admin_CanAttack_Rsp*>(&::Admin_CanAttack_Rsp::default_instance());
  sendgift_ = const_cast< ::SendGift*>(&::SendGift::default_instance());
  sendgiftplatid_ = const_cast< ::SendGiftToPlatid*>(&::SendGiftToPlatid::default_instance());
  adminbandwguser_req_ = const_cast< ::Admin_BandWGUser_Req*>(&::Admin_BandWGUser_Req::default_instance());
  adminbandwguser_rsp_ = const_cast< ::Admin_BandWGUser_Rsp*>(&::Admin_BandWGUser_Rsp::default_instance());
  adminopt_req_ = const_cast< ::Admin_AdminOpt_Req*>(&::Admin_AdminOpt_Req::default_instance());
  adminopt_rsp_ = const_cast< ::Admin_AdminOpt_Rsp*>(&::Admin_AdminOpt_Rsp::default_instance());
  webphotonum_ = const_cast< ::PhotoNum*>(&::PhotoNum::default_instance());
  callbackfriend_ = const_cast< ::callbackFriend*>(&::callbackFriend::default_instance());
  callbackfriendtoplatid_ = const_cast< ::callbackFriendToPlatid*>(&::callbackFriendToPlatid::default_instance());
  adminaddhonor_req_ = const_cast< ::Admin_AddHonor_Req*>(&::Admin_AddHonor_Req::default_instance());
  adminaddhonor_rsp_ = const_cast< ::Admin_AddHonor_Rsp*>(&::Admin_AddHonor_Rsp::default_instance());
  staruser_ = const_cast< ::Msg_StarUser*>(&::Msg_StarUser::default_instance());
}

Event::Event(const Event& from) {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_LONGLONG(0);
  fromworld_fd_ = 0;
  workingstatus_req_ = NULL;
  userlogin_req_ = NULL;
  userlogin_rsp_ = NULL;
  userauth_req_ = NULL;
  userauth_rsp_ = NULL;
  sendremoteuser_req_ = NULL;
  wg_userleave_ = NULL;
  forwardinfo_ = NULL;
  starsrvid_ = 0;
  checkattack_ = NULL;
  transfersrvid_ = 0;
  adminprofile_req_ = NULL;
  adminaddexp_req_ = NULL;
  adminaddexp_rsp_ = NULL;
  adminaddcredit_req_ = NULL;
  adminaddcredit_rsp_ = NULL;
  adminsetlevel_req_ = NULL;
  adminsetlevel_rsp_ = NULL;
  adminbanchat_req_ = NULL;
  adminbanchat_rsp_ = NULL;
  adminbanlogin_req_ = NULL;
  adminbanlogin_rsp_ = NULL;
  adminreload_req_ = NULL;
  adminreload_rsp_ = NULL;
  invitefriend_ = NULL;
  admincanattack_req_ = NULL;
  admincanattack_rsp_ = NULL;
  sendgift_ = NULL;
  sendgiftplatid_ = NULL;
  adminbandwguser_req_ = NULL;
  adminbandwguser_rsp_ = NULL;
  adminopt_req_ = NULL;
  adminopt_rsp_ = NULL;
  webphotonum_ = NULL;
  callbackfriend_ = NULL;
  callbackfriendtoplatid_ = NULL;
  adminaddhonor_req_ = NULL;
  adminaddhonor_rsp_ = NULL;
  staruser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete workingstatus_req_;
    delete userlogin_req_;
    delete userlogin_rsp_;
    delete userauth_req_;
    delete userauth_rsp_;
    delete sendremoteuser_req_;
    delete wg_userleave_;
    delete forwardinfo_;
    delete checkattack_;
    delete adminprofile_req_;
    delete adminaddexp_req_;
    delete adminaddexp_rsp_;
    delete adminaddcredit_req_;
    delete adminaddcredit_rsp_;
    delete adminsetlevel_req_;
    delete adminsetlevel_rsp_;
    delete adminbanchat_req_;
    delete adminbanchat_rsp_;
    delete adminbanlogin_req_;
    delete adminbanlogin_rsp_;
    delete adminreload_req_;
    delete adminreload_rsp_;
    delete invitefriend_;
    delete admincanattack_req_;
    delete admincanattack_rsp_;
    delete sendgift_;
    delete sendgiftplatid_;
    delete adminbandwguser_req_;
    delete adminbandwguser_rsp_;
    delete adminopt_req_;
    delete adminopt_rsp_;
    delete webphotonum_;
    delete callbackfriend_;
    delete callbackfriendtoplatid_;
    delete adminaddhonor_req_;
    delete adminaddhonor_rsp_;
    delete staruser_;
  }
}

const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    state_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    uid_ = GOOGLE_LONGLONG(0);
    fromworld_fd_ = 0;
    if (_has_bit(5)) {
      if (workingstatus_req_ != NULL) workingstatus_req_->::WorkingStatus_Req::Clear();
    }
    if (_has_bit(6)) {
      if (userlogin_req_ != NULL) userlogin_req_->::UserLogin_Req::Clear();
    }
    if (_has_bit(7)) {
      if (userlogin_rsp_ != NULL) userlogin_rsp_->::UserLogin_Rsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (userauth_req_ != NULL) userauth_req_->::UserAuth_Req::Clear();
    }
    if (_has_bit(9)) {
      if (userauth_rsp_ != NULL) userauth_rsp_->::UserAuth_Rsp::Clear();
    }
    if (_has_bit(10)) {
      if (sendremoteuser_req_ != NULL) sendremoteuser_req_->::SendRemoteUser_Req::Clear();
    }
    if (_has_bit(11)) {
      if (wg_userleave_ != NULL) wg_userleave_->::WG_UserLeave::Clear();
    }
    if (_has_bit(12)) {
      if (forwardinfo_ != NULL) forwardinfo_->::ForwardInfo::Clear();
    }
    starsrvid_ = 0;
    if (_has_bit(14)) {
      if (checkattack_ != NULL) checkattack_->::GWG_CheckAttack::Clear();
    }
    transfersrvid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (adminprofile_req_ != NULL) adminprofile_req_->::Admin_Profile_Req::Clear();
    }
    if (_has_bit(17)) {
      if (adminaddexp_req_ != NULL) adminaddexp_req_->::Admin_AddExp_Req::Clear();
    }
    if (_has_bit(18)) {
      if (adminaddexp_rsp_ != NULL) adminaddexp_rsp_->::Admin_AddExp_Rsp::Clear();
    }
    if (_has_bit(19)) {
      if (adminaddcredit_req_ != NULL) adminaddcredit_req_->::Admin_AddCredit_Req::Clear();
    }
    if (_has_bit(20)) {
      if (adminaddcredit_rsp_ != NULL) adminaddcredit_rsp_->::Admin_AddCredit_Rsp::Clear();
    }
    if (_has_bit(21)) {
      if (adminsetlevel_req_ != NULL) adminsetlevel_req_->::Admin_SetLevel_Req::Clear();
    }
    if (_has_bit(22)) {
      if (adminsetlevel_rsp_ != NULL) adminsetlevel_rsp_->::Admin_SetLevel_Rsp::Clear();
    }
    if (_has_bit(23)) {
      if (adminbanchat_req_ != NULL) adminbanchat_req_->::Admin_BanChat_Req::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (adminbanchat_rsp_ != NULL) adminbanchat_rsp_->::Admin_BanChat_Rsp::Clear();
    }
    if (_has_bit(25)) {
      if (adminbanlogin_req_ != NULL) adminbanlogin_req_->::Admin_BanLogin_Req::Clear();
    }
    if (_has_bit(26)) {
      if (adminbanlogin_rsp_ != NULL) adminbanlogin_rsp_->::Admin_BanLogin_Rsp::Clear();
    }
    if (_has_bit(27)) {
      if (adminreload_req_ != NULL) adminreload_req_->::Admin_Reload_Req::Clear();
    }
    if (_has_bit(28)) {
      if (adminreload_rsp_ != NULL) adminreload_rsp_->::Admin_Reload_Rsp::Clear();
    }
    if (_has_bit(29)) {
      if (invitefriend_ != NULL) invitefriend_->::InviteFriend::Clear();
    }
    if (_has_bit(30)) {
      if (admincanattack_req_ != NULL) admincanattack_req_->::Admin_CanAttack_Req::Clear();
    }
    if (_has_bit(31)) {
      if (admincanattack_rsp_ != NULL) admincanattack_rsp_->::Admin_CanAttack_Rsp::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (sendgift_ != NULL) sendgift_->::SendGift::Clear();
    }
    if (_has_bit(33)) {
      if (sendgiftplatid_ != NULL) sendgiftplatid_->::SendGiftToPlatid::Clear();
    }
    if (_has_bit(34)) {
      if (adminbandwguser_req_ != NULL) adminbandwguser_req_->::Admin_BandWGUser_Req::Clear();
    }
    if (_has_bit(35)) {
      if (adminbandwguser_rsp_ != NULL) adminbandwguser_rsp_->::Admin_BandWGUser_Rsp::Clear();
    }
    if (_has_bit(36)) {
      if (adminopt_req_ != NULL) adminopt_req_->::Admin_AdminOpt_Req::Clear();
    }
    if (_has_bit(37)) {
      if (adminopt_rsp_ != NULL) adminopt_rsp_->::Admin_AdminOpt_Rsp::Clear();
    }
    if (_has_bit(38)) {
      if (webphotonum_ != NULL) webphotonum_->::PhotoNum::Clear();
    }
    if (_has_bit(39)) {
      if (callbackfriend_ != NULL) callbackfriend_->::callbackFriend::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (_has_bit(40)) {
      if (callbackfriendtoplatid_ != NULL) callbackfriendtoplatid_->::callbackFriendToPlatid::Clear();
    }
    if (_has_bit(41)) {
      if (adminaddhonor_req_ != NULL) adminaddhonor_req_->::Admin_AddHonor_Req::Clear();
    }
    if (_has_bit(42)) {
      if (adminaddhonor_rsp_ != NULL) adminaddhonor_rsp_->::Admin_AddHonor_Rsp::Clear();
    }
    if (_has_bit(43)) {
      if (staruser_ != NULL) staruser_->::Msg_StarUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cmd_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &state_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &time_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &uid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_fromworld_fd;
        break;
      }
      
      // optional int32 fromworld_fd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fromworld_fd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fromworld_fd_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_workingStatus_req;
        break;
      }
      
      // optional .WorkingStatus_Req workingStatus_req = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_workingStatus_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_workingstatus_req()));
        if (input->ExpectTag(58)) goto parse_userLogin_req;
        break;
      }
      
      // optional .UserLogin_Req userLogin_req = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLogin_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userlogin_req()));
        if (input->ExpectTag(66)) goto parse_userLogin_rsp;
        break;
      }
      
      // optional .UserLogin_Rsp userLogin_rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userLogin_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userlogin_rsp()));
        if (input->ExpectTag(74)) goto parse_userAuth_req;
        break;
      }
      
      // optional .UserAuth_Req userAuth_req = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userAuth_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userauth_req()));
        if (input->ExpectTag(82)) goto parse_userAuth_rsp;
        break;
      }
      
      // optional .UserAuth_Rsp userAuth_rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_userAuth_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_userauth_rsp()));
        if (input->ExpectTag(90)) goto parse_sendRemoteUser_req;
        break;
      }
      
      // optional .SendRemoteUser_Req sendRemoteUser_req = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sendRemoteUser_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_sendremoteuser_req()));
        if (input->ExpectTag(98)) goto parse_wg_UserLeave;
        break;
      }
      
      // optional .WG_UserLeave wg_UserLeave = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wg_UserLeave:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_wg_userleave()));
        if (input->ExpectTag(114)) goto parse_forwardinfo;
        break;
      }
      
      // optional .ForwardInfo forwardinfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_forwardinfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_forwardinfo()));
        if (input->ExpectTag(120)) goto parse_starSrvID;
        break;
      }
      
      // optional int32 starSrvID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &starsrvid_));
        _set_bit(13);
        if (input->ExpectTag(138)) goto parse_checkAttack;
        break;
      }
      
      // optional .GWG_CheckAttack checkAttack = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_checkAttack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_checkattack()));
        if (input->ExpectTag(144)) goto parse_transferSrvID;
        break;
      }
      
      // optional int32 transferSrvID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transferSrvID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &transfersrvid_));
        _set_bit(15);
        if (input->ExpectTag(258)) goto parse_adminProfile_req;
        break;
      }
      
      // optional .Admin_Profile_Req adminProfile_req = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminProfile_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminprofile_req()));
        if (input->ExpectTag(266)) goto parse_adminAddExp_req;
        break;
      }
      
      // optional .Admin_AddExp_Req adminAddExp_req = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminAddExp_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddexp_req()));
        if (input->ExpectTag(274)) goto parse_adminAddExp_rsp;
        break;
      }
      
      // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminAddExp_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddexp_rsp()));
        if (input->ExpectTag(282)) goto parse_adminAddCredit_req;
        break;
      }
      
      // optional .Admin_AddCredit_Req adminAddCredit_req = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminAddCredit_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddcredit_req()));
        if (input->ExpectTag(290)) goto parse_adminAddCredit_rsp;
        break;
      }
      
      // optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminAddCredit_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddcredit_rsp()));
        if (input->ExpectTag(298)) goto parse_adminSetLevel_req;
        break;
      }
      
      // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminSetLevel_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminsetlevel_req()));
        if (input->ExpectTag(306)) goto parse_adminSetLevel_rsp;
        break;
      }
      
      // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminSetLevel_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminsetlevel_rsp()));
        if (input->ExpectTag(314)) goto parse_adminBanChat_req;
        break;
      }
      
      // optional .Admin_BanChat_Req adminBanChat_req = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminBanChat_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbanchat_req()));
        if (input->ExpectTag(322)) goto parse_adminBanChat_rsp;
        break;
      }
      
      // optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminBanChat_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbanchat_rsp()));
        if (input->ExpectTag(330)) goto parse_adminBanLogin_req;
        break;
      }
      
      // optional .Admin_BanLogin_Req adminBanLogin_req = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminBanLogin_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbanlogin_req()));
        if (input->ExpectTag(338)) goto parse_adminBanLogin_rsp;
        break;
      }
      
      // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminBanLogin_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbanlogin_rsp()));
        if (input->ExpectTag(346)) goto parse_adminReload_req;
        break;
      }
      
      // optional .Admin_Reload_Req adminReload_req = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminReload_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminreload_req()));
        if (input->ExpectTag(354)) goto parse_adminReload_rsp;
        break;
      }
      
      // optional .Admin_Reload_Rsp adminReload_rsp = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminReload_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminreload_rsp()));
        if (input->ExpectTag(362)) goto parse_inviteFriend;
        break;
      }
      
      // optional .InviteFriend inviteFriend = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_inviteFriend:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_invitefriend()));
        if (input->ExpectTag(370)) goto parse_adminCanAttack_req;
        break;
      }
      
      // optional .Admin_CanAttack_Req adminCanAttack_req = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminCanAttack_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_admincanattack_req()));
        if (input->ExpectTag(378)) goto parse_adminCanAttack_rsp;
        break;
      }
      
      // optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminCanAttack_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_admincanattack_rsp()));
        if (input->ExpectTag(386)) goto parse_sendgift;
        break;
      }
      
      // optional .SendGift sendgift = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sendgift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_sendgift()));
        if (input->ExpectTag(394)) goto parse_sendgiftplatid;
        break;
      }
      
      // optional .SendGiftToPlatid sendgiftplatid = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sendgiftplatid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_sendgiftplatid()));
        if (input->ExpectTag(402)) goto parse_adminbandwguser_req;
        break;
      }
      
      // optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminbandwguser_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbandwguser_req()));
        if (input->ExpectTag(410)) goto parse_adminbandwguser_rsp;
        break;
      }
      
      // optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminbandwguser_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminbandwguser_rsp()));
        if (input->ExpectTag(418)) goto parse_adminOpt_req;
        break;
      }
      
      // optional .Admin_AdminOpt_Req adminOpt_req = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminOpt_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminopt_req()));
        if (input->ExpectTag(426)) goto parse_adminOpt_rsp;
        break;
      }
      
      // optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminOpt_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminopt_rsp()));
        if (input->ExpectTag(434)) goto parse_webphotonum;
        break;
      }
      
      // optional .PhotoNum webphotonum = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_webphotonum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_webphotonum()));
        if (input->ExpectTag(442)) goto parse_callbackfriend;
        break;
      }
      
      // optional .callbackFriend callbackfriend = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_callbackfriend:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_callbackfriend()));
        if (input->ExpectTag(450)) goto parse_callbackfriendtoplatid;
        break;
      }
      
      // optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_callbackfriendtoplatid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_callbackfriendtoplatid()));
        if (input->ExpectTag(458)) goto parse_adminaddhonor_req;
        break;
      }
      
      // optional .Admin_AddHonor_Req adminaddhonor_req = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminaddhonor_req:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddhonor_req()));
        if (input->ExpectTag(466)) goto parse_adminaddhonor_rsp;
        break;
      }
      
      // optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_adminaddhonor_rsp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_adminaddhonor_rsp()));
        if (input->ExpectTag(802)) goto parse_starUser;
        break;
      }
      
      // optional .Msg_StarUser starUser = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_starUser:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_staruser()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Event::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // required int32 state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }
  
  // required int64 time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // optional int64 uid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }
  
  // optional int32 fromworld_fd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fromworld_fd(), output);
  }
  
  // optional .WorkingStatus_Req workingStatus_req = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->workingstatus_req(), output);
  }
  
  // optional .UserLogin_Req userLogin_req = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->userlogin_req(), output);
  }
  
  // optional .UserLogin_Rsp userLogin_rsp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->userlogin_rsp(), output);
  }
  
  // optional .UserAuth_Req userAuth_req = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->userauth_req(), output);
  }
  
  // optional .UserAuth_Rsp userAuth_rsp = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->userauth_rsp(), output);
  }
  
  // optional .SendRemoteUser_Req sendRemoteUser_req = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->sendremoteuser_req(), output);
  }
  
  // optional .WG_UserLeave wg_UserLeave = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->wg_userleave(), output);
  }
  
  // optional .ForwardInfo forwardinfo = 14;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->forwardinfo(), output);
  }
  
  // optional int32 starSrvID = 15;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->starsrvid(), output);
  }
  
  // optional .GWG_CheckAttack checkAttack = 17;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      17, this->checkattack(), output);
  }
  
  // optional int32 transferSrvID = 18;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->transfersrvid(), output);
  }
  
  // optional .Admin_Profile_Req adminProfile_req = 32;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      32, this->adminprofile_req(), output);
  }
  
  // optional .Admin_AddExp_Req adminAddExp_req = 33;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      33, this->adminaddexp_req(), output);
  }
  
  // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      34, this->adminaddexp_rsp(), output);
  }
  
  // optional .Admin_AddCredit_Req adminAddCredit_req = 35;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      35, this->adminaddcredit_req(), output);
  }
  
  // optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      36, this->adminaddcredit_rsp(), output);
  }
  
  // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      37, this->adminsetlevel_req(), output);
  }
  
  // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      38, this->adminsetlevel_rsp(), output);
  }
  
  // optional .Admin_BanChat_Req adminBanChat_req = 39;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      39, this->adminbanchat_req(), output);
  }
  
  // optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      40, this->adminbanchat_rsp(), output);
  }
  
  // optional .Admin_BanLogin_Req adminBanLogin_req = 41;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      41, this->adminbanlogin_req(), output);
  }
  
  // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      42, this->adminbanlogin_rsp(), output);
  }
  
  // optional .Admin_Reload_Req adminReload_req = 43;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      43, this->adminreload_req(), output);
  }
  
  // optional .Admin_Reload_Rsp adminReload_rsp = 44;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      44, this->adminreload_rsp(), output);
  }
  
  // optional .InviteFriend inviteFriend = 45;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      45, this->invitefriend(), output);
  }
  
  // optional .Admin_CanAttack_Req adminCanAttack_req = 46;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      46, this->admincanattack_req(), output);
  }
  
  // optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      47, this->admincanattack_rsp(), output);
  }
  
  // optional .SendGift sendgift = 48;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      48, this->sendgift(), output);
  }
  
  // optional .SendGiftToPlatid sendgiftplatid = 49;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      49, this->sendgiftplatid(), output);
  }
  
  // optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      50, this->adminbandwguser_req(), output);
  }
  
  // optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      51, this->adminbandwguser_rsp(), output);
  }
  
  // optional .Admin_AdminOpt_Req adminOpt_req = 52;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      52, this->adminopt_req(), output);
  }
  
  // optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      53, this->adminopt_rsp(), output);
  }
  
  // optional .PhotoNum webphotonum = 54;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      54, this->webphotonum(), output);
  }
  
  // optional .callbackFriend callbackfriend = 55;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      55, this->callbackfriend(), output);
  }
  
  // optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      56, this->callbackfriendtoplatid(), output);
  }
  
  // optional .Admin_AddHonor_Req adminaddhonor_req = 57;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      57, this->adminaddhonor_req(), output);
  }
  
  // optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      58, this->adminaddhonor_rsp(), output);
  }
  
  // optional .Msg_StarUser starUser = 100;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      100, this->staruser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // required int32 state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }
  
  // required int64 time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // optional int64 uid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }
  
  // optional int32 fromworld_fd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fromworld_fd(), target);
  }
  
  // optional .WorkingStatus_Req workingStatus_req = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->workingstatus_req(), target);
  }
  
  // optional .UserLogin_Req userLogin_req = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->userlogin_req(), target);
  }
  
  // optional .UserLogin_Rsp userLogin_rsp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->userlogin_rsp(), target);
  }
  
  // optional .UserAuth_Req userAuth_req = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->userauth_req(), target);
  }
  
  // optional .UserAuth_Rsp userAuth_rsp = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->userauth_rsp(), target);
  }
  
  // optional .SendRemoteUser_Req sendRemoteUser_req = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sendremoteuser_req(), target);
  }
  
  // optional .WG_UserLeave wg_UserLeave = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->wg_userleave(), target);
  }
  
  // optional .ForwardInfo forwardinfo = 14;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->forwardinfo(), target);
  }
  
  // optional int32 starSrvID = 15;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->starsrvid(), target);
  }
  
  // optional .GWG_CheckAttack checkAttack = 17;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->checkattack(), target);
  }
  
  // optional int32 transferSrvID = 18;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->transfersrvid(), target);
  }
  
  // optional .Admin_Profile_Req adminProfile_req = 32;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->adminprofile_req(), target);
  }
  
  // optional .Admin_AddExp_Req adminAddExp_req = 33;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->adminaddexp_req(), target);
  }
  
  // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->adminaddexp_rsp(), target);
  }
  
  // optional .Admin_AddCredit_Req adminAddCredit_req = 35;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->adminaddcredit_req(), target);
  }
  
  // optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->adminaddcredit_rsp(), target);
  }
  
  // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->adminsetlevel_req(), target);
  }
  
  // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->adminsetlevel_rsp(), target);
  }
  
  // optional .Admin_BanChat_Req adminBanChat_req = 39;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->adminbanchat_req(), target);
  }
  
  // optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->adminbanchat_rsp(), target);
  }
  
  // optional .Admin_BanLogin_Req adminBanLogin_req = 41;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->adminbanlogin_req(), target);
  }
  
  // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->adminbanlogin_rsp(), target);
  }
  
  // optional .Admin_Reload_Req adminReload_req = 43;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->adminreload_req(), target);
  }
  
  // optional .Admin_Reload_Rsp adminReload_rsp = 44;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->adminreload_rsp(), target);
  }
  
  // optional .InviteFriend inviteFriend = 45;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->invitefriend(), target);
  }
  
  // optional .Admin_CanAttack_Req adminCanAttack_req = 46;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->admincanattack_req(), target);
  }
  
  // optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->admincanattack_rsp(), target);
  }
  
  // optional .SendGift sendgift = 48;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->sendgift(), target);
  }
  
  // optional .SendGiftToPlatid sendgiftplatid = 49;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->sendgiftplatid(), target);
  }
  
  // optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->adminbandwguser_req(), target);
  }
  
  // optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->adminbandwguser_rsp(), target);
  }
  
  // optional .Admin_AdminOpt_Req adminOpt_req = 52;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->adminopt_req(), target);
  }
  
  // optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->adminopt_rsp(), target);
  }
  
  // optional .PhotoNum webphotonum = 54;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->webphotonum(), target);
  }
  
  // optional .callbackFriend callbackfriend = 55;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->callbackfriend(), target);
  }
  
  // optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->callbackfriendtoplatid(), target);
  }
  
  // optional .Admin_AddHonor_Req adminaddhonor_req = 57;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->adminaddhonor_req(), target);
  }
  
  // optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->adminaddhonor_rsp(), target);
  }
  
  // optional .Msg_StarUser starUser = 100;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->staruser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 fromworld_fd = 5;
    if (has_fromworld_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromworld_fd());
    }
    
    // optional .WorkingStatus_Req workingStatus_req = 6;
    if (has_workingstatus_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workingstatus_req());
    }
    
    // optional .UserLogin_Req userLogin_req = 7;
    if (has_userlogin_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlogin_req());
    }
    
    // optional .UserLogin_Rsp userLogin_rsp = 8;
    if (has_userlogin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlogin_rsp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .UserAuth_Req userAuth_req = 9;
    if (has_userauth_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userauth_req());
    }
    
    // optional .UserAuth_Rsp userAuth_rsp = 10;
    if (has_userauth_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userauth_rsp());
    }
    
    // optional .SendRemoteUser_Req sendRemoteUser_req = 11;
    if (has_sendremoteuser_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendremoteuser_req());
    }
    
    // optional .WG_UserLeave wg_UserLeave = 12;
    if (has_wg_userleave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wg_userleave());
    }
    
    // optional .ForwardInfo forwardinfo = 14;
    if (has_forwardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardinfo());
    }
    
    // optional int32 starSrvID = 15;
    if (has_starsrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starsrvid());
    }
    
    // optional .GWG_CheckAttack checkAttack = 17;
    if (has_checkattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkattack());
    }
    
    // optional int32 transferSrvID = 18;
    if (has_transfersrvid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfersrvid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Admin_Profile_Req adminProfile_req = 32;
    if (has_adminprofile_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminprofile_req());
    }
    
    // optional .Admin_AddExp_Req adminAddExp_req = 33;
    if (has_adminaddexp_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddexp_req());
    }
    
    // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
    if (has_adminaddexp_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddexp_rsp());
    }
    
    // optional .Admin_AddCredit_Req adminAddCredit_req = 35;
    if (has_adminaddcredit_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddcredit_req());
    }
    
    // optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
    if (has_adminaddcredit_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddcredit_rsp());
    }
    
    // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
    if (has_adminsetlevel_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminsetlevel_req());
    }
    
    // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
    if (has_adminsetlevel_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminsetlevel_rsp());
    }
    
    // optional .Admin_BanChat_Req adminBanChat_req = 39;
    if (has_adminbanchat_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbanchat_req());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
    if (has_adminbanchat_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbanchat_rsp());
    }
    
    // optional .Admin_BanLogin_Req adminBanLogin_req = 41;
    if (has_adminbanlogin_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbanlogin_req());
    }
    
    // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
    if (has_adminbanlogin_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbanlogin_rsp());
    }
    
    // optional .Admin_Reload_Req adminReload_req = 43;
    if (has_adminreload_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminreload_req());
    }
    
    // optional .Admin_Reload_Rsp adminReload_rsp = 44;
    if (has_adminreload_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminreload_rsp());
    }
    
    // optional .InviteFriend inviteFriend = 45;
    if (has_invitefriend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitefriend());
    }
    
    // optional .Admin_CanAttack_Req adminCanAttack_req = 46;
    if (has_admincanattack_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->admincanattack_req());
    }
    
    // optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
    if (has_admincanattack_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->admincanattack_rsp());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .SendGift sendgift = 48;
    if (has_sendgift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendgift());
    }
    
    // optional .SendGiftToPlatid sendgiftplatid = 49;
    if (has_sendgiftplatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendgiftplatid());
    }
    
    // optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
    if (has_adminbandwguser_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbandwguser_req());
    }
    
    // optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
    if (has_adminbandwguser_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminbandwguser_rsp());
    }
    
    // optional .Admin_AdminOpt_Req adminOpt_req = 52;
    if (has_adminopt_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminopt_req());
    }
    
    // optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
    if (has_adminopt_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminopt_rsp());
    }
    
    // optional .PhotoNum webphotonum = 54;
    if (has_webphotonum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->webphotonum());
    }
    
    // optional .callbackFriend callbackfriend = 55;
    if (has_callbackfriend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callbackfriend());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
    if (has_callbackfriendtoplatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callbackfriendtoplatid());
    }
    
    // optional .Admin_AddHonor_Req adminaddhonor_req = 57;
    if (has_adminaddhonor_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddhonor_req());
    }
    
    // optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
    if (has_adminaddhonor_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminaddhonor_rsp());
    }
    
    // optional .Msg_StarUser starUser = 100;
    if (has_staruser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staruser());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
    if (from._has_bit(3)) {
      set_uid(from.uid());
    }
    if (from._has_bit(4)) {
      set_fromworld_fd(from.fromworld_fd());
    }
    if (from._has_bit(5)) {
      mutable_workingstatus_req()->::WorkingStatus_Req::MergeFrom(from.workingstatus_req());
    }
    if (from._has_bit(6)) {
      mutable_userlogin_req()->::UserLogin_Req::MergeFrom(from.userlogin_req());
    }
    if (from._has_bit(7)) {
      mutable_userlogin_rsp()->::UserLogin_Rsp::MergeFrom(from.userlogin_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_userauth_req()->::UserAuth_Req::MergeFrom(from.userauth_req());
    }
    if (from._has_bit(9)) {
      mutable_userauth_rsp()->::UserAuth_Rsp::MergeFrom(from.userauth_rsp());
    }
    if (from._has_bit(10)) {
      mutable_sendremoteuser_req()->::SendRemoteUser_Req::MergeFrom(from.sendremoteuser_req());
    }
    if (from._has_bit(11)) {
      mutable_wg_userleave()->::WG_UserLeave::MergeFrom(from.wg_userleave());
    }
    if (from._has_bit(12)) {
      mutable_forwardinfo()->::ForwardInfo::MergeFrom(from.forwardinfo());
    }
    if (from._has_bit(13)) {
      set_starsrvid(from.starsrvid());
    }
    if (from._has_bit(14)) {
      mutable_checkattack()->::GWG_CheckAttack::MergeFrom(from.checkattack());
    }
    if (from._has_bit(15)) {
      set_transfersrvid(from.transfersrvid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_adminprofile_req()->::Admin_Profile_Req::MergeFrom(from.adminprofile_req());
    }
    if (from._has_bit(17)) {
      mutable_adminaddexp_req()->::Admin_AddExp_Req::MergeFrom(from.adminaddexp_req());
    }
    if (from._has_bit(18)) {
      mutable_adminaddexp_rsp()->::Admin_AddExp_Rsp::MergeFrom(from.adminaddexp_rsp());
    }
    if (from._has_bit(19)) {
      mutable_adminaddcredit_req()->::Admin_AddCredit_Req::MergeFrom(from.adminaddcredit_req());
    }
    if (from._has_bit(20)) {
      mutable_adminaddcredit_rsp()->::Admin_AddCredit_Rsp::MergeFrom(from.adminaddcredit_rsp());
    }
    if (from._has_bit(21)) {
      mutable_adminsetlevel_req()->::Admin_SetLevel_Req::MergeFrom(from.adminsetlevel_req());
    }
    if (from._has_bit(22)) {
      mutable_adminsetlevel_rsp()->::Admin_SetLevel_Rsp::MergeFrom(from.adminsetlevel_rsp());
    }
    if (from._has_bit(23)) {
      mutable_adminbanchat_req()->::Admin_BanChat_Req::MergeFrom(from.adminbanchat_req());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_adminbanchat_rsp()->::Admin_BanChat_Rsp::MergeFrom(from.adminbanchat_rsp());
    }
    if (from._has_bit(25)) {
      mutable_adminbanlogin_req()->::Admin_BanLogin_Req::MergeFrom(from.adminbanlogin_req());
    }
    if (from._has_bit(26)) {
      mutable_adminbanlogin_rsp()->::Admin_BanLogin_Rsp::MergeFrom(from.adminbanlogin_rsp());
    }
    if (from._has_bit(27)) {
      mutable_adminreload_req()->::Admin_Reload_Req::MergeFrom(from.adminreload_req());
    }
    if (from._has_bit(28)) {
      mutable_adminreload_rsp()->::Admin_Reload_Rsp::MergeFrom(from.adminreload_rsp());
    }
    if (from._has_bit(29)) {
      mutable_invitefriend()->::InviteFriend::MergeFrom(from.invitefriend());
    }
    if (from._has_bit(30)) {
      mutable_admincanattack_req()->::Admin_CanAttack_Req::MergeFrom(from.admincanattack_req());
    }
    if (from._has_bit(31)) {
      mutable_admincanattack_rsp()->::Admin_CanAttack_Rsp::MergeFrom(from.admincanattack_rsp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      mutable_sendgift()->::SendGift::MergeFrom(from.sendgift());
    }
    if (from._has_bit(33)) {
      mutable_sendgiftplatid()->::SendGiftToPlatid::MergeFrom(from.sendgiftplatid());
    }
    if (from._has_bit(34)) {
      mutable_adminbandwguser_req()->::Admin_BandWGUser_Req::MergeFrom(from.adminbandwguser_req());
    }
    if (from._has_bit(35)) {
      mutable_adminbandwguser_rsp()->::Admin_BandWGUser_Rsp::MergeFrom(from.adminbandwguser_rsp());
    }
    if (from._has_bit(36)) {
      mutable_adminopt_req()->::Admin_AdminOpt_Req::MergeFrom(from.adminopt_req());
    }
    if (from._has_bit(37)) {
      mutable_adminopt_rsp()->::Admin_AdminOpt_Rsp::MergeFrom(from.adminopt_rsp());
    }
    if (from._has_bit(38)) {
      mutable_webphotonum()->::PhotoNum::MergeFrom(from.webphotonum());
    }
    if (from._has_bit(39)) {
      mutable_callbackfriend()->::callbackFriend::MergeFrom(from.callbackfriend());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      mutable_callbackfriendtoplatid()->::callbackFriendToPlatid::MergeFrom(from.callbackfriendtoplatid());
    }
    if (from._has_bit(41)) {
      mutable_adminaddhonor_req()->::Admin_AddHonor_Req::MergeFrom(from.adminaddhonor_req());
    }
    if (from._has_bit(42)) {
      mutable_adminaddhonor_rsp()->::Admin_AddHonor_Rsp::MergeFrom(from.adminaddhonor_rsp());
    }
    if (from._has_bit(43)) {
      mutable_staruser()->::Msg_StarUser::MergeFrom(from.staruser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_workingstatus_req()) {
    if (!this->workingstatus_req().IsInitialized()) return false;
  }
  if (has_userlogin_req()) {
    if (!this->userlogin_req().IsInitialized()) return false;
  }
  if (has_userlogin_rsp()) {
    if (!this->userlogin_rsp().IsInitialized()) return false;
  }
  if (has_userauth_req()) {
    if (!this->userauth_req().IsInitialized()) return false;
  }
  if (has_userauth_rsp()) {
    if (!this->userauth_rsp().IsInitialized()) return false;
  }
  if (has_sendremoteuser_req()) {
    if (!this->sendremoteuser_req().IsInitialized()) return false;
  }
  if (has_wg_userleave()) {
    if (!this->wg_userleave().IsInitialized()) return false;
  }
  if (has_adminprofile_req()) {
    if (!this->adminprofile_req().IsInitialized()) return false;
  }
  if (has_adminaddexp_req()) {
    if (!this->adminaddexp_req().IsInitialized()) return false;
  }
  if (has_adminaddexp_rsp()) {
    if (!this->adminaddexp_rsp().IsInitialized()) return false;
  }
  if (has_adminaddcredit_req()) {
    if (!this->adminaddcredit_req().IsInitialized()) return false;
  }
  if (has_adminaddcredit_rsp()) {
    if (!this->adminaddcredit_rsp().IsInitialized()) return false;
  }
  if (has_adminsetlevel_req()) {
    if (!this->adminsetlevel_req().IsInitialized()) return false;
  }
  if (has_adminsetlevel_rsp()) {
    if (!this->adminsetlevel_rsp().IsInitialized()) return false;
  }
  if (has_adminbanchat_req()) {
    if (!this->adminbanchat_req().IsInitialized()) return false;
  }
  if (has_adminbanchat_rsp()) {
    if (!this->adminbanchat_rsp().IsInitialized()) return false;
  }
  if (has_adminbanlogin_req()) {
    if (!this->adminbanlogin_req().IsInitialized()) return false;
  }
  if (has_adminbanlogin_rsp()) {
    if (!this->adminbanlogin_rsp().IsInitialized()) return false;
  }
  if (has_adminreload_req()) {
    if (!this->adminreload_req().IsInitialized()) return false;
  }
  if (has_adminreload_rsp()) {
    if (!this->adminreload_rsp().IsInitialized()) return false;
  }
  if (has_admincanattack_req()) {
    if (!this->admincanattack_req().IsInitialized()) return false;
  }
  if (has_admincanattack_rsp()) {
    if (!this->admincanattack_rsp().IsInitialized()) return false;
  }
  if (has_sendgift()) {
    if (!this->sendgift().IsInitialized()) return false;
  }
  if (has_sendgiftplatid()) {
    if (!this->sendgiftplatid().IsInitialized()) return false;
  }
  if (has_adminbandwguser_req()) {
    if (!this->adminbandwguser_req().IsInitialized()) return false;
  }
  if (has_adminbandwguser_rsp()) {
    if (!this->adminbandwguser_rsp().IsInitialized()) return false;
  }
  if (has_adminopt_req()) {
    if (!this->adminopt_req().IsInitialized()) return false;
  }
  if (has_adminopt_rsp()) {
    if (!this->adminopt_rsp().IsInitialized()) return false;
  }
  if (has_webphotonum()) {
    if (!this->webphotonum().IsInitialized()) return false;
  }
  if (has_callbackfriend()) {
    if (!this->callbackfriend().IsInitialized()) return false;
  }
  if (has_callbackfriendtoplatid()) {
    if (!this->callbackfriendtoplatid().IsInitialized()) return false;
  }
  if (has_adminaddhonor_req()) {
    if (!this->adminaddhonor_req().IsInitialized()) return false;
  }
  if (has_adminaddhonor_rsp()) {
    if (!this->adminaddhonor_rsp().IsInitialized()) return false;
  }
  if (has_staruser()) {
    if (!this->staruser().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(uid_, other->uid_);
    std::swap(fromworld_fd_, other->fromworld_fd_);
    std::swap(workingstatus_req_, other->workingstatus_req_);
    std::swap(userlogin_req_, other->userlogin_req_);
    std::swap(userlogin_rsp_, other->userlogin_rsp_);
    std::swap(userauth_req_, other->userauth_req_);
    std::swap(userauth_rsp_, other->userauth_rsp_);
    std::swap(sendremoteuser_req_, other->sendremoteuser_req_);
    std::swap(wg_userleave_, other->wg_userleave_);
    std::swap(forwardinfo_, other->forwardinfo_);
    std::swap(starsrvid_, other->starsrvid_);
    std::swap(checkattack_, other->checkattack_);
    std::swap(transfersrvid_, other->transfersrvid_);
    std::swap(adminprofile_req_, other->adminprofile_req_);
    std::swap(adminaddexp_req_, other->adminaddexp_req_);
    std::swap(adminaddexp_rsp_, other->adminaddexp_rsp_);
    std::swap(adminaddcredit_req_, other->adminaddcredit_req_);
    std::swap(adminaddcredit_rsp_, other->adminaddcredit_rsp_);
    std::swap(adminsetlevel_req_, other->adminsetlevel_req_);
    std::swap(adminsetlevel_rsp_, other->adminsetlevel_rsp_);
    std::swap(adminbanchat_req_, other->adminbanchat_req_);
    std::swap(adminbanchat_rsp_, other->adminbanchat_rsp_);
    std::swap(adminbanlogin_req_, other->adminbanlogin_req_);
    std::swap(adminbanlogin_rsp_, other->adminbanlogin_rsp_);
    std::swap(adminreload_req_, other->adminreload_req_);
    std::swap(adminreload_rsp_, other->adminreload_rsp_);
    std::swap(invitefriend_, other->invitefriend_);
    std::swap(admincanattack_req_, other->admincanattack_req_);
    std::swap(admincanattack_rsp_, other->admincanattack_rsp_);
    std::swap(sendgift_, other->sendgift_);
    std::swap(sendgiftplatid_, other->sendgiftplatid_);
    std::swap(adminbandwguser_req_, other->adminbandwguser_req_);
    std::swap(adminbandwguser_rsp_, other->adminbandwguser_rsp_);
    std::swap(adminopt_req_, other->adminopt_req_);
    std::swap(adminopt_rsp_, other->adminopt_rsp_);
    std::swap(webphotonum_, other->webphotonum_);
    std::swap(callbackfriend_, other->callbackfriend_);
    std::swap(callbackfriendtoplatid_, other->callbackfriendtoplatid_);
    std::swap(adminaddhonor_req_, other->adminaddhonor_req_);
    std::swap(adminaddhonor_rsp_, other->adminaddhonor_rsp_);
    std::swap(staruser_, other->staruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

