// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_event_2eproto__INCLUDED
#define PROTOBUF_event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_event_2eproto();
void protobuf_AssignDesc_event_2eproto();
void protobuf_ShutdownFile_event_2eproto();

class UserLogin_Req;
class UserLogin_Rsp;
class SendGift;
class SendGiftToPlatid;
class WG_UserLeave;
class WorkingStatus_Req;
class UserAuth_Req;
class UserAuth_Rsp;
class SendRemoteUser_Req;
class ForwardInfo;
class GWG_CheckAttack;
class Admin_Profile_Req;
class Admin_AddExp_Req;
class Admin_AddExp_Rsp;
class Admin_CanAttack_Req;
class Admin_CanAttack_Rsp;
class Admin_AddCredit_Req;
class Admin_AddCredit_Rsp;
class Admin_AdminOpt_Req;
class Admin_AdminOpt_Rsp;
class Admin_SetLevel_Req;
class Admin_SetLevel_Rsp;
class Admin_BanChat_Req;
class Admin_BanChat_Rsp;
class Admin_BanLogin_Req;
class Admin_BanLogin_Rsp;
class Admin_Reload_Req;
class Admin_Reload_Rsp;
class Admin_BandWGUser_Req;
class Admin_BandWGUser_Rsp;
class InviteFriend;
class PhotoNum;
class Msg_StarUser;
class callbackFriend;
class callbackFriendToPlatid;
class Admin_AddHonor_Req;
class Admin_AddHonor_Rsp;
class Event;

// ===================================================================

class UserLogin_Req : public ::google::protobuf::Message {
 public:
  UserLogin_Req();
  virtual ~UserLogin_Req();
  
  UserLogin_Req(const UserLogin_Req& from);
  
  inline UserLogin_Req& operator=(const UserLogin_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_Req& default_instance();
  void Swap(UserLogin_Req* other);
  
  // implements Message ----------------------------------------------
  
  UserLogin_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_Req& from);
  void MergeFrom(const UserLogin_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 siteid = 1;
  inline bool has_siteid() const;
  inline void clear_siteid();
  static const int kSiteidFieldNumber = 1;
  inline ::google::protobuf::int32 siteid() const;
  inline void set_siteid(::google::protobuf::int32 value);
  
  // required string platform_id = 2;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 2;
  inline const ::std::string& platform_id() const;
  inline void set_platform_id(const ::std::string& value);
  inline void set_platform_id(const char* value);
  inline void set_platform_id(const char* value, size_t size);
  inline ::std::string* mutable_platform_id();
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string profile_link = 4;
  inline bool has_profile_link() const;
  inline void clear_profile_link();
  static const int kProfileLinkFieldNumber = 4;
  inline const ::std::string& profile_link() const;
  inline void set_profile_link(const ::std::string& value);
  inline void set_profile_link(const char* value);
  inline void set_profile_link(const char* value, size_t size);
  inline ::std::string* mutable_profile_link();
  
  // required int32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);
  
  // required bool is_yellow_dmd = 6;
  inline bool has_is_yellow_dmd() const;
  inline void clear_is_yellow_dmd();
  static const int kIsYellowDmdFieldNumber = 6;
  inline bool is_yellow_dmd() const;
  inline void set_is_yellow_dmd(bool value);
  
  // required bool is_yellow_dmd_year = 7;
  inline bool has_is_yellow_dmd_year() const;
  inline void clear_is_yellow_dmd_year();
  static const int kIsYellowDmdYearFieldNumber = 7;
  inline bool is_yellow_dmd_year() const;
  inline void set_is_yellow_dmd_year(bool value);
  
  // required int32 yellow_dmd_lv = 8;
  inline bool has_yellow_dmd_lv() const;
  inline void clear_yellow_dmd_lv();
  static const int kYellowDmdLvFieldNumber = 8;
  inline ::google::protobuf::int32 yellow_dmd_lv() const;
  inline void set_yellow_dmd_lv(::google::protobuf::int32 value);
  
  // repeated string friends_platid = 9;
  inline int friends_platid_size() const;
  inline void clear_friends_platid();
  static const int kFriendsPlatidFieldNumber = 9;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friends_platid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends_platid();
  inline const ::std::string& friends_platid(int index) const;
  inline ::std::string* mutable_friends_platid(int index);
  inline void set_friends_platid(int index, const ::std::string& value);
  inline void set_friends_platid(int index, const char* value);
  inline void set_friends_platid(int index, const char* value, size_t size);
  inline ::std::string* add_friends_platid();
  inline void add_friends_platid(const ::std::string& value);
  inline void add_friends_platid(const char* value);
  inline void add_friends_platid(const char* value, size_t size);
  
  // required int32 webfd = 10;
  inline bool has_webfd() const;
  inline void clear_webfd();
  static const int kWebfdFieldNumber = 10;
  inline ::google::protobuf::int32 webfd() const;
  inline void set_webfd(::google::protobuf::int32 value);
  
  // required string sid = 11;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 11;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional int32 mydb_ret = 12 [default = 0];
  inline bool has_mydb_ret() const;
  inline void clear_mydb_ret();
  static const int kMydbRetFieldNumber = 12;
  inline ::google::protobuf::int32 mydb_ret() const;
  inline void set_mydb_ret(::google::protobuf::int32 value);
  
  // optional int32 mydb_oldid = 13 [default = 0];
  inline bool has_mydb_oldid() const;
  inline void clear_mydb_oldid();
  static const int kMydbOldidFieldNumber = 13;
  inline ::google::protobuf::int32 mydb_oldid() const;
  inline void set_mydb_oldid(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 siteid_;
  ::std::string* platform_id_;
  static const ::std::string _default_platform_id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* profile_link_;
  static const ::std::string _default_profile_link_;
  ::google::protobuf::int32 gender_;
  bool is_yellow_dmd_;
  bool is_yellow_dmd_year_;
  ::google::protobuf::int32 yellow_dmd_lv_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_platid_;
  ::google::protobuf::int32 webfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 mydb_ret_;
  ::google::protobuf::int32 mydb_oldid_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserLogin_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserLogin_Rsp : public ::google::protobuf::Message {
 public:
  UserLogin_Rsp();
  virtual ~UserLogin_Rsp();
  
  UserLogin_Rsp(const UserLogin_Rsp& from);
  
  inline UserLogin_Rsp& operator=(const UserLogin_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_Rsp& default_instance();
  void Swap(UserLogin_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  UserLogin_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_Rsp& from);
  void MergeFrom(const UserLogin_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required string secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 2;
  inline const ::std::string& secret() const;
  inline void set_secret(const ::std::string& value);
  inline void set_secret(const char* value);
  inline void set_secret(const char* value, size_t size);
  inline ::std::string* mutable_secret();
  
  // required string server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  
  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required int32 port1 = 5;
  inline bool has_port1() const;
  inline void clear_port1();
  static const int kPort1FieldNumber = 5;
  inline ::google::protobuf::int32 port1() const;
  inline void set_port1(::google::protobuf::int32 value);
  
  // required int32 webfd = 6;
  inline bool has_webfd() const;
  inline void clear_webfd();
  static const int kWebfdFieldNumber = 6;
  inline ::google::protobuf::int32 webfd() const;
  inline void set_webfd(::google::protobuf::int32 value);
  
  // required string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* secret_;
  static const ::std::string _default_secret_;
  ::std::string* server_;
  static const ::std::string _default_server_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 port1_;
  ::google::protobuf::int32 webfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserLogin_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class SendGift : public ::google::protobuf::Message {
 public:
  SendGift();
  virtual ~SendGift();
  
  SendGift(const SendGift& from);
  
  inline SendGift& operator=(const SendGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendGift& default_instance();
  void Swap(SendGift* other);
  
  // implements Message ----------------------------------------------
  
  SendGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendGift& from);
  void MergeFrom(const SendGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // repeated string friends_platid = 2;
  inline int friends_platid_size() const;
  inline void clear_friends_platid();
  static const int kFriendsPlatidFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friends_platid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends_platid();
  inline const ::std::string& friends_platid(int index) const;
  inline ::std::string* mutable_friends_platid(int index);
  inline void set_friends_platid(int index, const ::std::string& value);
  inline void set_friends_platid(int index, const char* value);
  inline void set_friends_platid(int index, const char* value, size_t size);
  inline ::std::string* add_friends_platid();
  inline void add_friends_platid(const ::std::string& value);
  inline void add_friends_platid(const char* value);
  inline void add_friends_platid(const char* value, size_t size);
  
  // required string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // required int32 fd = 4;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 4;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
  // optional bool succ = 5;
  inline bool has_succ() const;
  inline void clear_succ();
  static const int kSuccFieldNumber = 5;
  inline bool succ() const;
  inline void set_succ(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_platid_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 fd_;
  bool succ_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendGift* default_instance_;
};
// -------------------------------------------------------------------

class SendGiftToPlatid : public ::google::protobuf::Message {
 public:
  SendGiftToPlatid();
  virtual ~SendGiftToPlatid();
  
  SendGiftToPlatid(const SendGiftToPlatid& from);
  
  inline SendGiftToPlatid& operator=(const SendGiftToPlatid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendGiftToPlatid& default_instance();
  void Swap(SendGiftToPlatid* other);
  
  // implements Message ----------------------------------------------
  
  SendGiftToPlatid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendGiftToPlatid& from);
  void MergeFrom(const SendGiftToPlatid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendGiftToPlatid* default_instance_;
};
// -------------------------------------------------------------------

class WG_UserLeave : public ::google::protobuf::Message {
 public:
  WG_UserLeave();
  virtual ~WG_UserLeave();
  
  WG_UserLeave(const WG_UserLeave& from);
  
  inline WG_UserLeave& operator=(const WG_UserLeave& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WG_UserLeave& default_instance();
  void Swap(WG_UserLeave* other);
  
  // implements Message ----------------------------------------------
  
  WG_UserLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WG_UserLeave& from);
  void MergeFrom(const WG_UserLeave& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 fd = 1;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 1;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 fd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WG_UserLeave* default_instance_;
};
// -------------------------------------------------------------------

class WorkingStatus_Req : public ::google::protobuf::Message {
 public:
  WorkingStatus_Req();
  virtual ~WorkingStatus_Req();
  
  WorkingStatus_Req(const WorkingStatus_Req& from);
  
  inline WorkingStatus_Req& operator=(const WorkingStatus_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkingStatus_Req& default_instance();
  void Swap(WorkingStatus_Req* other);
  
  // implements Message ----------------------------------------------
  
  WorkingStatus_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkingStatus_Req& from);
  void MergeFrom(const WorkingStatus_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required bool finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline bool finish() const;
  inline void set_finish(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  bool finish_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkingStatus_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserAuth_Req : public ::google::protobuf::Message {
 public:
  UserAuth_Req();
  virtual ~UserAuth_Req();
  
  UserAuth_Req(const UserAuth_Req& from);
  
  inline UserAuth_Req& operator=(const UserAuth_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuth_Req& default_instance();
  void Swap(UserAuth_Req* other);
  
  // implements Message ----------------------------------------------
  
  UserAuth_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuth_Req& from);
  void MergeFrom(const UserAuth_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int64 secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  static const int kSecretFieldNumber = 2;
  inline ::google::protobuf::int64 secret() const;
  inline void set_secret(::google::protobuf::int64 value);
  
  // required int32 sockfd = 3;
  inline bool has_sockfd() const;
  inline void clear_sockfd();
  static const int kSockfdFieldNumber = 3;
  inline ::google::protobuf::int32 sockfd() const;
  inline void set_sockfd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 secret_;
  ::google::protobuf::int32 sockfd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserAuth_Req* default_instance_;
};
// -------------------------------------------------------------------

class UserAuth_Rsp : public ::google::protobuf::Message {
 public:
  UserAuth_Rsp();
  virtual ~UserAuth_Rsp();
  
  UserAuth_Rsp(const UserAuth_Rsp& from);
  
  inline UserAuth_Rsp& operator=(const UserAuth_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuth_Rsp& default_instance();
  void Swap(UserAuth_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  UserAuth_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuth_Rsp& from);
  void MergeFrom(const UserAuth_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool pass = 1;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 1;
  inline bool pass() const;
  inline void set_pass(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool pass_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserAuth_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class SendRemoteUser_Req : public ::google::protobuf::Message {
 public:
  SendRemoteUser_Req();
  virtual ~SendRemoteUser_Req();
  
  SendRemoteUser_Req(const SendRemoteUser_Req& from);
  
  inline SendRemoteUser_Req& operator=(const SendRemoteUser_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRemoteUser_Req& default_instance();
  void Swap(SendRemoteUser_Req* other);
  
  // implements Message ----------------------------------------------
  
  SendRemoteUser_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRemoteUser_Req& from);
  void MergeFrom(const SendRemoteUser_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // required string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 cmd_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendRemoteUser_Req* default_instance_;
};
// -------------------------------------------------------------------

class ForwardInfo : public ::google::protobuf::Message {
 public:
  ForwardInfo();
  virtual ~ForwardInfo();
  
  ForwardInfo(const ForwardInfo& from);
  
  inline ForwardInfo& operator=(const ForwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardInfo& default_instance();
  void Swap(ForwardInfo* other);
  
  // implements Message ----------------------------------------------
  
  ForwardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardInfo& from);
  void MergeFrom(const ForwardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2 [default = "0"];
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForwardInfo* default_instance_;
};
// -------------------------------------------------------------------

class GWG_CheckAttack : public ::google::protobuf::Message {
 public:
  GWG_CheckAttack();
  virtual ~GWG_CheckAttack();
  
  GWG_CheckAttack(const GWG_CheckAttack& from);
  
  inline GWG_CheckAttack& operator=(const GWG_CheckAttack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWG_CheckAttack& default_instance();
  void Swap(GWG_CheckAttack* other);
  
  // implements Message ----------------------------------------------
  
  GWG_CheckAttack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWG_CheckAttack& from);
  void MergeFrom(const GWG_CheckAttack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 attackID = 1 [default = -1];
  inline bool has_attackid() const;
  inline void clear_attackid();
  static const int kAttackIDFieldNumber = 1;
  inline ::google::protobuf::int64 attackid() const;
  inline void set_attackid(::google::protobuf::int64 value);
  
  // optional int64 recoveryID = 2 [default = -1];
  inline bool has_recoveryid() const;
  inline void clear_recoveryid();
  static const int kRecoveryIDFieldNumber = 2;
  inline ::google::protobuf::int64 recoveryid() const;
  inline void set_recoveryid(::google::protobuf::int64 value);
  
  // optional bool isattacked = 3 [default = true];
  inline bool has_isattacked() const;
  inline void clear_isattacked();
  static const int kIsattackedFieldNumber = 3;
  inline bool isattacked() const;
  inline void set_isattacked(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 attackid_;
  ::google::protobuf::int64 recoveryid_;
  bool isattacked_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GWG_CheckAttack* default_instance_;
};
// -------------------------------------------------------------------

class Admin_Profile_Req : public ::google::protobuf::Message {
 public:
  Admin_Profile_Req();
  virtual ~Admin_Profile_Req();
  
  Admin_Profile_Req(const Admin_Profile_Req& from);
  
  inline Admin_Profile_Req& operator=(const Admin_Profile_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_Profile_Req& default_instance();
  void Swap(Admin_Profile_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_Profile_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_Profile_Req& from);
  void MergeFrom(const Admin_Profile_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cmd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_Profile_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddExp_Req : public ::google::protobuf::Message {
 public:
  Admin_AddExp_Req();
  virtual ~Admin_AddExp_Req();
  
  Admin_AddExp_Req(const Admin_AddExp_Req& from);
  
  inline Admin_AddExp_Req& operator=(const Admin_AddExp_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddExp_Req& default_instance();
  void Swap(Admin_AddExp_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddExp_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddExp_Req& from);
  void MergeFrom(const Admin_AddExp_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // required int32 gid = 3 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 4;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 4;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 5;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 5;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 6 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 6;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddExp_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddExp_Rsp : public ::google::protobuf::Message {
 public:
  Admin_AddExp_Rsp();
  virtual ~Admin_AddExp_Rsp();
  
  Admin_AddExp_Rsp(const Admin_AddExp_Rsp& from);
  
  inline Admin_AddExp_Rsp& operator=(const Admin_AddExp_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddExp_Rsp& default_instance();
  void Swap(Admin_AddExp_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddExp_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddExp_Rsp& from);
  void MergeFrom(const Admin_AddExp_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 oldlevel = 2;
  inline bool has_oldlevel() const;
  inline void clear_oldlevel();
  static const int kOldlevelFieldNumber = 2;
  inline ::google::protobuf::int32 oldlevel() const;
  inline void set_oldlevel(::google::protobuf::int32 value);
  
  // required int32 oldexp = 3;
  inline bool has_oldexp() const;
  inline void clear_oldexp();
  static const int kOldexpFieldNumber = 3;
  inline ::google::protobuf::int32 oldexp() const;
  inline void set_oldexp(::google::protobuf::int32 value);
  
  // required int32 newlevel = 4;
  inline bool has_newlevel() const;
  inline void clear_newlevel();
  static const int kNewlevelFieldNumber = 4;
  inline ::google::protobuf::int32 newlevel() const;
  inline void set_newlevel(::google::protobuf::int32 value);
  
  // required int32 newexp = 5;
  inline bool has_newexp() const;
  inline void clear_newexp();
  static const int kNewexpFieldNumber = 5;
  inline ::google::protobuf::int32 newexp() const;
  inline void set_newexp(::google::protobuf::int32 value);
  
  // required int32 gid = 6;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 6;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 7;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 7;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 8;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 8;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 9 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 9;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 oldlevel_;
  ::google::protobuf::int32 oldexp_;
  ::google::protobuf::int32 newlevel_;
  ::google::protobuf::int32 newexp_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddExp_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_CanAttack_Req : public ::google::protobuf::Message {
 public:
  Admin_CanAttack_Req();
  virtual ~Admin_CanAttack_Req();
  
  Admin_CanAttack_Req(const Admin_CanAttack_Req& from);
  
  inline Admin_CanAttack_Req& operator=(const Admin_CanAttack_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_CanAttack_Req& default_instance();
  void Swap(Admin_CanAttack_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_CanAttack_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_CanAttack_Req& from);
  void MergeFrom(const Admin_CanAttack_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int32 gid = 4 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_CanAttack_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_CanAttack_Rsp : public ::google::protobuf::Message {
 public:
  Admin_CanAttack_Rsp();
  virtual ~Admin_CanAttack_Rsp();
  
  Admin_CanAttack_Rsp(const Admin_CanAttack_Rsp& from);
  
  inline Admin_CanAttack_Rsp& operator=(const Admin_CanAttack_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_CanAttack_Rsp& default_instance();
  void Swap(Admin_CanAttack_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_CanAttack_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_CanAttack_Rsp& from);
  void MergeFrom(const Admin_CanAttack_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int32 gid = 5;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 5;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 6;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 6;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 8 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 8;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_CanAttack_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddCredit_Req : public ::google::protobuf::Message {
 public:
  Admin_AddCredit_Req();
  virtual ~Admin_AddCredit_Req();
  
  Admin_AddCredit_Req(const Admin_AddCredit_Req& from);
  
  inline Admin_AddCredit_Req& operator=(const Admin_AddCredit_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddCredit_Req& default_instance();
  void Swap(Admin_AddCredit_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddCredit_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddCredit_Req& from);
  void MergeFrom(const Admin_AddCredit_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int32 credit = 3;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 3;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);
  
  // required int32 gid = 4 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // required int32 type = 6 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 9 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 9;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::google::protobuf::int32 type_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddCredit_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddCredit_Rsp : public ::google::protobuf::Message {
 public:
  Admin_AddCredit_Rsp();
  virtual ~Admin_AddCredit_Rsp();
  
  Admin_AddCredit_Rsp(const Admin_AddCredit_Rsp& from);
  
  inline Admin_AddCredit_Rsp& operator=(const Admin_AddCredit_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddCredit_Rsp& default_instance();
  void Swap(Admin_AddCredit_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddCredit_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddCredit_Rsp& from);
  void MergeFrom(const Admin_AddCredit_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
  // required int64 oldcredit = 3;
  inline bool has_oldcredit() const;
  inline void clear_oldcredit();
  static const int kOldcreditFieldNumber = 3;
  inline ::google::protobuf::int64 oldcredit() const;
  inline void set_oldcredit(::google::protobuf::int64 value);
  
  // required int64 newcredit = 4;
  inline bool has_newcredit() const;
  inline void clear_newcredit();
  static const int kNewcreditFieldNumber = 4;
  inline ::google::protobuf::int64 newcredit() const;
  inline void set_newcredit(::google::protobuf::int64 value);
  
  // required int32 gid = 5;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 5;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 6;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 6;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // required int32 type = 7 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sid = 8;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 8;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 9 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 9;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  ::google::protobuf::int64 oldcredit_;
  ::google::protobuf::int64 newcredit_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::google::protobuf::int32 type_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddCredit_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AdminOpt_Req : public ::google::protobuf::Message {
 public:
  Admin_AdminOpt_Req();
  virtual ~Admin_AdminOpt_Req();
  
  Admin_AdminOpt_Req(const Admin_AdminOpt_Req& from);
  
  inline Admin_AdminOpt_Req& operator=(const Admin_AdminOpt_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AdminOpt_Req& default_instance();
  void Swap(Admin_AdminOpt_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AdminOpt_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AdminOpt_Req& from);
  void MergeFrom(const Admin_AdminOpt_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 optType = 2;
  inline bool has_opttype() const;
  inline void clear_opttype();
  static const int kOptTypeFieldNumber = 2;
  inline ::google::protobuf::int32 opttype() const;
  inline void set_opttype(::google::protobuf::int32 value);
  
  // optional string admin = 3;
  inline bool has_admin() const;
  inline void clear_admin();
  static const int kAdminFieldNumber = 3;
  inline const ::std::string& admin() const;
  inline void set_admin(const ::std::string& value);
  inline void set_admin(const char* value);
  inline void set_admin(const char* value, size_t size);
  inline ::std::string* mutable_admin();
  
  // optional int64 res1 = 4;
  inline bool has_res1() const;
  inline void clear_res1();
  static const int kRes1FieldNumber = 4;
  inline ::google::protobuf::int64 res1() const;
  inline void set_res1(::google::protobuf::int64 value);
  
  // optional int64 res2 = 5;
  inline bool has_res2() const;
  inline void clear_res2();
  static const int kRes2FieldNumber = 5;
  inline ::google::protobuf::int64 res2() const;
  inline void set_res2(::google::protobuf::int64 value);
  
  // optional int32 count = 6 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 armytype = 7 [default = 0];
  inline bool has_armytype() const;
  inline void clear_armytype();
  static const int kArmytypeFieldNumber = 7;
  inline ::google::protobuf::int32 armytype() const;
  inline void set_armytype(::google::protobuf::int32 value);
  
  // optional int32 bldtype = 8 [default = 0];
  inline bool has_bldtype() const;
  inline void clear_bldtype();
  static const int kBldtypeFieldNumber = 8;
  inline ::google::protobuf::int32 bldtype() const;
  inline void set_bldtype(::google::protobuf::int32 value);
  
  // optional int32 bldid = 9 [default = 0];
  inline bool has_bldid() const;
  inline void clear_bldid();
  static const int kBldidFieldNumber = 9;
  inline ::google::protobuf::int32 bldid() const;
  inline void set_bldid(::google::protobuf::int32 value);
  
  // optional int32 level = 10 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 npcid = 11;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 11;
  inline ::google::protobuf::int32 npcid() const;
  inline void set_npcid(::google::protobuf::int32 value);
  
  // optional int32 gid = 12 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 12;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // optional int32 adminfd = 13;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 13;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 14;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 14;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 15 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 15;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 opttype_;
  ::std::string* admin_;
  static const ::std::string _default_admin_;
  ::google::protobuf::int64 res1_;
  ::google::protobuf::int64 res2_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 armytype_;
  ::google::protobuf::int32 bldtype_;
  ::google::protobuf::int32 bldid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 npcid_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AdminOpt_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AdminOpt_Rsp : public ::google::protobuf::Message {
 public:
  Admin_AdminOpt_Rsp();
  virtual ~Admin_AdminOpt_Rsp();
  
  Admin_AdminOpt_Rsp(const Admin_AdminOpt_Rsp& from);
  
  inline Admin_AdminOpt_Rsp& operator=(const Admin_AdminOpt_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AdminOpt_Rsp& default_instance();
  void Swap(Admin_AdminOpt_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AdminOpt_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AdminOpt_Rsp& from);
  void MergeFrom(const Admin_AdminOpt_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 optType = 2;
  inline bool has_opttype() const;
  inline void clear_opttype();
  static const int kOptTypeFieldNumber = 2;
  inline ::google::protobuf::int32 opttype() const;
  inline void set_opttype(::google::protobuf::int32 value);
  
  // optional string admin = 3;
  inline bool has_admin() const;
  inline void clear_admin();
  static const int kAdminFieldNumber = 3;
  inline const ::std::string& admin() const;
  inline void set_admin(const ::std::string& value);
  inline void set_admin(const char* value);
  inline void set_admin(const char* value, size_t size);
  inline ::std::string* mutable_admin();
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int64 res1 = 5;
  inline bool has_res1() const;
  inline void clear_res1();
  static const int kRes1FieldNumber = 5;
  inline ::google::protobuf::int64 res1() const;
  inline void set_res1(::google::protobuf::int64 value);
  
  // optional int64 res2 = 6;
  inline bool has_res2() const;
  inline void clear_res2();
  static const int kRes2FieldNumber = 6;
  inline ::google::protobuf::int64 res2() const;
  inline void set_res2(::google::protobuf::int64 value);
  
  // optional int64 credit = 7;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 7;
  inline ::google::protobuf::int64 credit() const;
  inline void set_credit(::google::protobuf::int64 value);
  
  // optional bool succ = 8;
  inline bool has_succ() const;
  inline void clear_succ();
  static const int kSuccFieldNumber = 8;
  inline bool succ() const;
  inline void set_succ(bool value);
  
  // optional int32 gid = 9 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 9;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // optional int32 adminfd = 10;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 10;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 11;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 11;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 12 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 12;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 opttype_;
  ::std::string* admin_;
  static const ::std::string _default_admin_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 res1_;
  ::google::protobuf::int64 res2_;
  ::google::protobuf::int64 credit_;
  bool succ_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AdminOpt_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_SetLevel_Req : public ::google::protobuf::Message {
 public:
  Admin_SetLevel_Req();
  virtual ~Admin_SetLevel_Req();
  
  Admin_SetLevel_Req(const Admin_SetLevel_Req& from);
  
  inline Admin_SetLevel_Req& operator=(const Admin_SetLevel_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_SetLevel_Req& default_instance();
  void Swap(Admin_SetLevel_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_SetLevel_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_SetLevel_Req& from);
  void MergeFrom(const Admin_SetLevel_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required int32 gid = 3 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 4;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 4;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 5;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 5;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 6 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 6;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_SetLevel_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_SetLevel_Rsp : public ::google::protobuf::Message {
 public:
  Admin_SetLevel_Rsp();
  virtual ~Admin_SetLevel_Rsp();
  
  Admin_SetLevel_Rsp(const Admin_SetLevel_Rsp& from);
  
  inline Admin_SetLevel_Rsp& operator=(const Admin_SetLevel_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_SetLevel_Rsp& default_instance();
  void Swap(Admin_SetLevel_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_SetLevel_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_SetLevel_Rsp& from);
  void MergeFrom(const Admin_SetLevel_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 oldlevel = 2;
  inline bool has_oldlevel() const;
  inline void clear_oldlevel();
  static const int kOldlevelFieldNumber = 2;
  inline ::google::protobuf::int32 oldlevel() const;
  inline void set_oldlevel(::google::protobuf::int32 value);
  
  // required int32 newlevel = 3;
  inline bool has_newlevel() const;
  inline void clear_newlevel();
  static const int kNewlevelFieldNumber = 3;
  inline ::google::protobuf::int32 newlevel() const;
  inline void set_newlevel(::google::protobuf::int32 value);
  
  // required int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 oldlevel_;
  ::google::protobuf::int32 newlevel_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_SetLevel_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BanChat_Req : public ::google::protobuf::Message {
 public:
  Admin_BanChat_Req();
  virtual ~Admin_BanChat_Req();
  
  Admin_BanChat_Req(const Admin_BanChat_Req& from);
  
  inline Admin_BanChat_Req& operator=(const Admin_BanChat_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BanChat_Req& default_instance();
  void Swap(Admin_BanChat_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BanChat_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BanChat_Req& from);
  void MergeFrom(const Admin_BanChat_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required bool isban = 2;
  inline bool has_isban() const;
  inline void clear_isban();
  static const int kIsbanFieldNumber = 2;
  inline bool isban() const;
  inline void set_isban(bool value);
  
  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 gid = 4 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  bool isban_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BanChat_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BanChat_Rsp : public ::google::protobuf::Message {
 public:
  Admin_BanChat_Rsp();
  virtual ~Admin_BanChat_Rsp();
  
  Admin_BanChat_Rsp(const Admin_BanChat_Rsp& from);
  
  inline Admin_BanChat_Rsp& operator=(const Admin_BanChat_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BanChat_Rsp& default_instance();
  void Swap(Admin_BanChat_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BanChat_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BanChat_Rsp& from);
  void MergeFrom(const Admin_BanChat_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required bool isban = 2;
  inline bool has_isban() const;
  inline void clear_isban();
  static const int kIsbanFieldNumber = 2;
  inline bool isban() const;
  inline void set_isban(bool value);
  
  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  bool isban_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BanChat_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BanLogin_Req : public ::google::protobuf::Message {
 public:
  Admin_BanLogin_Req();
  virtual ~Admin_BanLogin_Req();
  
  Admin_BanLogin_Req(const Admin_BanLogin_Req& from);
  
  inline Admin_BanLogin_Req& operator=(const Admin_BanLogin_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BanLogin_Req& default_instance();
  void Swap(Admin_BanLogin_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BanLogin_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BanLogin_Req& from);
  void MergeFrom(const Admin_BanLogin_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required bool isban = 2;
  inline bool has_isban() const;
  inline void clear_isban();
  static const int kIsbanFieldNumber = 2;
  inline bool isban() const;
  inline void set_isban(bool value);
  
  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 gid = 4 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  bool isban_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BanLogin_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BanLogin_Rsp : public ::google::protobuf::Message {
 public:
  Admin_BanLogin_Rsp();
  virtual ~Admin_BanLogin_Rsp();
  
  Admin_BanLogin_Rsp(const Admin_BanLogin_Rsp& from);
  
  inline Admin_BanLogin_Rsp& operator=(const Admin_BanLogin_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BanLogin_Rsp& default_instance();
  void Swap(Admin_BanLogin_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BanLogin_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BanLogin_Rsp& from);
  void MergeFrom(const Admin_BanLogin_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required bool isban = 2;
  inline bool has_isban() const;
  inline void clear_isban();
  static const int kIsbanFieldNumber = 2;
  inline bool isban() const;
  inline void set_isban(bool value);
  
  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  bool isban_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BanLogin_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_Reload_Req : public ::google::protobuf::Message {
 public:
  Admin_Reload_Req();
  virtual ~Admin_Reload_Req();
  
  Admin_Reload_Req(const Admin_Reload_Req& from);
  
  inline Admin_Reload_Req& operator=(const Admin_Reload_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_Reload_Req& default_instance();
  void Swap(Admin_Reload_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_Reload_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_Reload_Req& from);
  void MergeFrom(const Admin_Reload_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 2;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 2;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 4 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 4;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_Reload_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_Reload_Rsp : public ::google::protobuf::Message {
 public:
  Admin_Reload_Rsp();
  virtual ~Admin_Reload_Rsp();
  
  Admin_Reload_Rsp(const Admin_Reload_Rsp& from);
  
  inline Admin_Reload_Rsp& operator=(const Admin_Reload_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_Reload_Rsp& default_instance();
  void Swap(Admin_Reload_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_Reload_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_Reload_Rsp& from);
  void MergeFrom(const Admin_Reload_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 2;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 2;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 4 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 4;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_Reload_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BandWGUser_Req : public ::google::protobuf::Message {
 public:
  Admin_BandWGUser_Req();
  virtual ~Admin_BandWGUser_Req();
  
  Admin_BandWGUser_Req(const Admin_BandWGUser_Req& from);
  
  inline Admin_BandWGUser_Req& operator=(const Admin_BandWGUser_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BandWGUser_Req& default_instance();
  void Swap(Admin_BandWGUser_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BandWGUser_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BandWGUser_Req& from);
  void MergeFrom(const Admin_BandWGUser_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 2;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 2;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 4 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 4;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
  // optional int32 banduser = 5 [default = 20];
  inline bool has_banduser() const;
  inline void clear_banduser();
  static const int kBanduserFieldNumber = 5;
  inline ::google::protobuf::int32 banduser() const;
  inline void set_banduser(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  ::google::protobuf::int32 banduser_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BandWGUser_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BandWGUser_Rsp : public ::google::protobuf::Message {
 public:
  Admin_BandWGUser_Rsp();
  virtual ~Admin_BandWGUser_Rsp();
  
  Admin_BandWGUser_Rsp(const Admin_BandWGUser_Rsp& from);
  
  inline Admin_BandWGUser_Rsp& operator=(const Admin_BandWGUser_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BandWGUser_Rsp& default_instance();
  void Swap(Admin_BandWGUser_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_BandWGUser_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BandWGUser_Rsp& from);
  void MergeFrom(const Admin_BandWGUser_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 2;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 2;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 4 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 4;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
  // optional int32 banduser = 5 [default = 20];
  inline bool has_banduser() const;
  inline void clear_banduser();
  static const int kBanduserFieldNumber = 5;
  inline ::google::protobuf::int32 banduser() const;
  inline void set_banduser(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  ::google::protobuf::int32 banduser_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_BandWGUser_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class InviteFriend : public ::google::protobuf::Message {
 public:
  InviteFriend();
  virtual ~InviteFriend();
  
  InviteFriend(const InviteFriend& from);
  
  inline InviteFriend& operator=(const InviteFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteFriend& default_instance();
  void Swap(InviteFriend* other);
  
  // implements Message ----------------------------------------------
  
  InviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteFriend& from);
  void MergeFrom(const InviteFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string invitePlatID = 1;
  inline bool has_inviteplatid() const;
  inline void clear_inviteplatid();
  static const int kInvitePlatIDFieldNumber = 1;
  inline const ::std::string& inviteplatid() const;
  inline void set_inviteplatid(const ::std::string& value);
  inline void set_inviteplatid(const char* value);
  inline void set_inviteplatid(const char* value, size_t size);
  inline ::std::string* mutable_inviteplatid();
  
  // optional string invitedPlatID = 2;
  inline bool has_invitedplatid() const;
  inline void clear_invitedplatid();
  static const int kInvitedPlatIDFieldNumber = 2;
  inline const ::std::string& invitedplatid() const;
  inline void set_invitedplatid(const ::std::string& value);
  inline void set_invitedplatid(const char* value);
  inline void set_invitedplatid(const char* value, size_t size);
  inline ::std::string* mutable_invitedplatid();
  
  // optional int64 invitedUid = 3;
  inline bool has_inviteduid() const;
  inline void clear_inviteduid();
  static const int kInvitedUidFieldNumber = 3;
  inline ::google::protobuf::int64 inviteduid() const;
  inline void set_inviteduid(::google::protobuf::int64 value);
  
  // optional string invitedName = 4;
  inline bool has_invitedname() const;
  inline void clear_invitedname();
  static const int kInvitedNameFieldNumber = 4;
  inline const ::std::string& invitedname() const;
  inline void set_invitedname(const ::std::string& value);
  inline void set_invitedname(const char* value);
  inline void set_invitedname(const char* value, size_t size);
  inline ::std::string* mutable_invitedname();
  
  // optional string sid = 5;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 5;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional int32 fd = 6;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 6;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* inviteplatid_;
  static const ::std::string _default_inviteplatid_;
  ::std::string* invitedplatid_;
  static const ::std::string _default_invitedplatid_;
  ::google::protobuf::int64 inviteduid_;
  ::std::string* invitedname_;
  static const ::std::string _default_invitedname_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 fd_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class PhotoNum : public ::google::protobuf::Message {
 public:
  PhotoNum();
  virtual ~PhotoNum();
  
  PhotoNum(const PhotoNum& from);
  
  inline PhotoNum& operator=(const PhotoNum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoNum& default_instance();
  void Swap(PhotoNum* other);
  
  // implements Message ----------------------------------------------
  
  PhotoNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoNum& from);
  void MergeFrom(const PhotoNum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // required int32 fd = 4;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 4;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
  // optional int32 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 type_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 fd_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PhotoNum* default_instance_;
};
// -------------------------------------------------------------------

class Msg_StarUser : public ::google::protobuf::Message {
 public:
  Msg_StarUser();
  virtual ~Msg_StarUser();
  
  Msg_StarUser(const Msg_StarUser& from);
  
  inline Msg_StarUser& operator=(const Msg_StarUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_StarUser& default_instance();
  void Swap(Msg_StarUser* other);
  
  // implements Message ----------------------------------------------
  
  Msg_StarUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_StarUser& from);
  void MergeFrom(const Msg_StarUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 level = 1 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 type = 2 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Msg_StarUser* default_instance_;
};
// -------------------------------------------------------------------

class callbackFriend : public ::google::protobuf::Message {
 public:
  callbackFriend();
  virtual ~callbackFriend();
  
  callbackFriend(const callbackFriend& from);
  
  inline callbackFriend& operator=(const callbackFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const callbackFriend& default_instance();
  void Swap(callbackFriend* other);
  
  // implements Message ----------------------------------------------
  
  callbackFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const callbackFriend& from);
  void MergeFrom(const callbackFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // repeated string friends_platid = 2;
  inline int friends_platid_size() const;
  inline void clear_friends_platid();
  static const int kFriendsPlatidFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& friends_platid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_friends_platid();
  inline const ::std::string& friends_platid(int index) const;
  inline ::std::string* mutable_friends_platid(int index);
  inline void set_friends_platid(int index, const ::std::string& value);
  inline void set_friends_platid(int index, const char* value);
  inline void set_friends_platid(int index, const char* value, size_t size);
  inline ::std::string* add_friends_platid();
  inline void add_friends_platid(const ::std::string& value);
  inline void add_friends_platid(const char* value);
  inline void add_friends_platid(const char* value, size_t size);
  
  // required string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // required int32 fd = 4;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 4;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
  // optional bool succ = 5;
  inline bool has_succ() const;
  inline void clear_succ();
  static const int kSuccFieldNumber = 5;
  inline bool succ() const;
  inline void set_succ(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> friends_platid_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  ::google::protobuf::int32 fd_;
  bool succ_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static callbackFriend* default_instance_;
};
// -------------------------------------------------------------------

class callbackFriendToPlatid : public ::google::protobuf::Message {
 public:
  callbackFriendToPlatid();
  virtual ~callbackFriendToPlatid();
  
  callbackFriendToPlatid(const callbackFriendToPlatid& from);
  
  inline callbackFriendToPlatid& operator=(const callbackFriendToPlatid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const callbackFriendToPlatid& default_instance();
  void Swap(callbackFriendToPlatid* other);
  
  // implements Message ----------------------------------------------
  
  callbackFriendToPlatid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const callbackFriendToPlatid& from);
  void MergeFrom(const callbackFriendToPlatid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required string platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline const ::std::string& platid() const;
  inline void set_platid(const ::std::string& value);
  inline void set_platid(const char* value);
  inline void set_platid(const char* value, size_t size);
  inline ::std::string* mutable_platid();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::std::string* platid_;
  static const ::std::string _default_platid_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static callbackFriendToPlatid* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddHonor_Req : public ::google::protobuf::Message {
 public:
  Admin_AddHonor_Req();
  virtual ~Admin_AddHonor_Req();
  
  Admin_AddHonor_Req(const Admin_AddHonor_Req& from);
  
  inline Admin_AddHonor_Req& operator=(const Admin_AddHonor_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddHonor_Req& default_instance();
  void Swap(Admin_AddHonor_Req* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddHonor_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddHonor_Req& from);
  void MergeFrom(const Admin_AddHonor_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int64 honor = 2;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 2;
  inline ::google::protobuf::int64 honor() const;
  inline void set_honor(::google::protobuf::int64 value);
  
  // required int32 gid = 3 [default = 0];
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 4;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 4;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 5;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 5;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 6 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 6;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 honor_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddHonor_Req* default_instance_;
};
// -------------------------------------------------------------------

class Admin_AddHonor_Rsp : public ::google::protobuf::Message {
 public:
  Admin_AddHonor_Rsp();
  virtual ~Admin_AddHonor_Rsp();
  
  Admin_AddHonor_Rsp(const Admin_AddHonor_Rsp& from);
  
  inline Admin_AddHonor_Rsp& operator=(const Admin_AddHonor_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_AddHonor_Rsp& default_instance();
  void Swap(Admin_AddHonor_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Admin_AddHonor_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_AddHonor_Rsp& from);
  void MergeFrom(const Admin_AddHonor_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int64 oldhonor = 2;
  inline bool has_oldhonor() const;
  inline void clear_oldhonor();
  static const int kOldhonorFieldNumber = 2;
  inline ::google::protobuf::int64 oldhonor() const;
  inline void set_oldhonor(::google::protobuf::int64 value);
  
  // required int64 newhonor = 3;
  inline bool has_newhonor() const;
  inline void clear_newhonor();
  static const int kNewhonorFieldNumber = 3;
  inline ::google::protobuf::int64 newhonor() const;
  inline void set_newhonor(::google::protobuf::int64 value);
  
  // required int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int32 adminfd = 5;
  inline bool has_adminfd() const;
  inline void clear_adminfd();
  static const int kAdminfdFieldNumber = 5;
  inline ::google::protobuf::int32 adminfd() const;
  inline void set_adminfd(::google::protobuf::int32 value);
  
  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  
  // optional bool fromweb = 7 [default = false];
  inline bool has_fromweb() const;
  inline void clear_fromweb();
  static const int kFromwebFieldNumber = 7;
  inline bool fromweb() const;
  inline void set_fromweb(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 oldhonor_;
  ::google::protobuf::int64 newhonor_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 adminfd_;
  ::std::string* sid_;
  static const ::std::string _default_sid_;
  bool fromweb_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Admin_AddHonor_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // required int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int64 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 fromworld_fd = 5;
  inline bool has_fromworld_fd() const;
  inline void clear_fromworld_fd();
  static const int kFromworldFdFieldNumber = 5;
  inline ::google::protobuf::int32 fromworld_fd() const;
  inline void set_fromworld_fd(::google::protobuf::int32 value);
  
  // optional .WorkingStatus_Req workingStatus_req = 6;
  inline bool has_workingstatus_req() const;
  inline void clear_workingstatus_req();
  static const int kWorkingStatusReqFieldNumber = 6;
  inline const ::WorkingStatus_Req& workingstatus_req() const;
  inline ::WorkingStatus_Req* mutable_workingstatus_req();
  
  // optional .UserLogin_Req userLogin_req = 7;
  inline bool has_userlogin_req() const;
  inline void clear_userlogin_req();
  static const int kUserLoginReqFieldNumber = 7;
  inline const ::UserLogin_Req& userlogin_req() const;
  inline ::UserLogin_Req* mutable_userlogin_req();
  
  // optional .UserLogin_Rsp userLogin_rsp = 8;
  inline bool has_userlogin_rsp() const;
  inline void clear_userlogin_rsp();
  static const int kUserLoginRspFieldNumber = 8;
  inline const ::UserLogin_Rsp& userlogin_rsp() const;
  inline ::UserLogin_Rsp* mutable_userlogin_rsp();
  
  // optional .UserAuth_Req userAuth_req = 9;
  inline bool has_userauth_req() const;
  inline void clear_userauth_req();
  static const int kUserAuthReqFieldNumber = 9;
  inline const ::UserAuth_Req& userauth_req() const;
  inline ::UserAuth_Req* mutable_userauth_req();
  
  // optional .UserAuth_Rsp userAuth_rsp = 10;
  inline bool has_userauth_rsp() const;
  inline void clear_userauth_rsp();
  static const int kUserAuthRspFieldNumber = 10;
  inline const ::UserAuth_Rsp& userauth_rsp() const;
  inline ::UserAuth_Rsp* mutable_userauth_rsp();
  
  // optional .SendRemoteUser_Req sendRemoteUser_req = 11;
  inline bool has_sendremoteuser_req() const;
  inline void clear_sendremoteuser_req();
  static const int kSendRemoteUserReqFieldNumber = 11;
  inline const ::SendRemoteUser_Req& sendremoteuser_req() const;
  inline ::SendRemoteUser_Req* mutable_sendremoteuser_req();
  
  // optional .WG_UserLeave wg_UserLeave = 12;
  inline bool has_wg_userleave() const;
  inline void clear_wg_userleave();
  static const int kWgUserLeaveFieldNumber = 12;
  inline const ::WG_UserLeave& wg_userleave() const;
  inline ::WG_UserLeave* mutable_wg_userleave();
  
  // optional .ForwardInfo forwardinfo = 14;
  inline bool has_forwardinfo() const;
  inline void clear_forwardinfo();
  static const int kForwardinfoFieldNumber = 14;
  inline const ::ForwardInfo& forwardinfo() const;
  inline ::ForwardInfo* mutable_forwardinfo();
  
  // optional int32 starSrvID = 15;
  inline bool has_starsrvid() const;
  inline void clear_starsrvid();
  static const int kStarSrvIDFieldNumber = 15;
  inline ::google::protobuf::int32 starsrvid() const;
  inline void set_starsrvid(::google::protobuf::int32 value);
  
  // optional .GWG_CheckAttack checkAttack = 17;
  inline bool has_checkattack() const;
  inline void clear_checkattack();
  static const int kCheckAttackFieldNumber = 17;
  inline const ::GWG_CheckAttack& checkattack() const;
  inline ::GWG_CheckAttack* mutable_checkattack();
  
  // optional int32 transferSrvID = 18;
  inline bool has_transfersrvid() const;
  inline void clear_transfersrvid();
  static const int kTransferSrvIDFieldNumber = 18;
  inline ::google::protobuf::int32 transfersrvid() const;
  inline void set_transfersrvid(::google::protobuf::int32 value);
  
  // optional .Admin_Profile_Req adminProfile_req = 32;
  inline bool has_adminprofile_req() const;
  inline void clear_adminprofile_req();
  static const int kAdminProfileReqFieldNumber = 32;
  inline const ::Admin_Profile_Req& adminprofile_req() const;
  inline ::Admin_Profile_Req* mutable_adminprofile_req();
  
  // optional .Admin_AddExp_Req adminAddExp_req = 33;
  inline bool has_adminaddexp_req() const;
  inline void clear_adminaddexp_req();
  static const int kAdminAddExpReqFieldNumber = 33;
  inline const ::Admin_AddExp_Req& adminaddexp_req() const;
  inline ::Admin_AddExp_Req* mutable_adminaddexp_req();
  
  // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
  inline bool has_adminaddexp_rsp() const;
  inline void clear_adminaddexp_rsp();
  static const int kAdminAddExpRspFieldNumber = 34;
  inline const ::Admin_AddExp_Rsp& adminaddexp_rsp() const;
  inline ::Admin_AddExp_Rsp* mutable_adminaddexp_rsp();
  
  // optional .Admin_AddCredit_Req adminAddCredit_req = 35;
  inline bool has_adminaddcredit_req() const;
  inline void clear_adminaddcredit_req();
  static const int kAdminAddCreditReqFieldNumber = 35;
  inline const ::Admin_AddCredit_Req& adminaddcredit_req() const;
  inline ::Admin_AddCredit_Req* mutable_adminaddcredit_req();
  
  // optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
  inline bool has_adminaddcredit_rsp() const;
  inline void clear_adminaddcredit_rsp();
  static const int kAdminAddCreditRspFieldNumber = 36;
  inline const ::Admin_AddCredit_Rsp& adminaddcredit_rsp() const;
  inline ::Admin_AddCredit_Rsp* mutable_adminaddcredit_rsp();
  
  // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
  inline bool has_adminsetlevel_req() const;
  inline void clear_adminsetlevel_req();
  static const int kAdminSetLevelReqFieldNumber = 37;
  inline const ::Admin_SetLevel_Req& adminsetlevel_req() const;
  inline ::Admin_SetLevel_Req* mutable_adminsetlevel_req();
  
  // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
  inline bool has_adminsetlevel_rsp() const;
  inline void clear_adminsetlevel_rsp();
  static const int kAdminSetLevelRspFieldNumber = 38;
  inline const ::Admin_SetLevel_Rsp& adminsetlevel_rsp() const;
  inline ::Admin_SetLevel_Rsp* mutable_adminsetlevel_rsp();
  
  // optional .Admin_BanChat_Req adminBanChat_req = 39;
  inline bool has_adminbanchat_req() const;
  inline void clear_adminbanchat_req();
  static const int kAdminBanChatReqFieldNumber = 39;
  inline const ::Admin_BanChat_Req& adminbanchat_req() const;
  inline ::Admin_BanChat_Req* mutable_adminbanchat_req();
  
  // optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
  inline bool has_adminbanchat_rsp() const;
  inline void clear_adminbanchat_rsp();
  static const int kAdminBanChatRspFieldNumber = 40;
  inline const ::Admin_BanChat_Rsp& adminbanchat_rsp() const;
  inline ::Admin_BanChat_Rsp* mutable_adminbanchat_rsp();
  
  // optional .Admin_BanLogin_Req adminBanLogin_req = 41;
  inline bool has_adminbanlogin_req() const;
  inline void clear_adminbanlogin_req();
  static const int kAdminBanLoginReqFieldNumber = 41;
  inline const ::Admin_BanLogin_Req& adminbanlogin_req() const;
  inline ::Admin_BanLogin_Req* mutable_adminbanlogin_req();
  
  // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
  inline bool has_adminbanlogin_rsp() const;
  inline void clear_adminbanlogin_rsp();
  static const int kAdminBanLoginRspFieldNumber = 42;
  inline const ::Admin_BanLogin_Rsp& adminbanlogin_rsp() const;
  inline ::Admin_BanLogin_Rsp* mutable_adminbanlogin_rsp();
  
  // optional .Admin_Reload_Req adminReload_req = 43;
  inline bool has_adminreload_req() const;
  inline void clear_adminreload_req();
  static const int kAdminReloadReqFieldNumber = 43;
  inline const ::Admin_Reload_Req& adminreload_req() const;
  inline ::Admin_Reload_Req* mutable_adminreload_req();
  
  // optional .Admin_Reload_Rsp adminReload_rsp = 44;
  inline bool has_adminreload_rsp() const;
  inline void clear_adminreload_rsp();
  static const int kAdminReloadRspFieldNumber = 44;
  inline const ::Admin_Reload_Rsp& adminreload_rsp() const;
  inline ::Admin_Reload_Rsp* mutable_adminreload_rsp();
  
  // optional .InviteFriend inviteFriend = 45;
  inline bool has_invitefriend() const;
  inline void clear_invitefriend();
  static const int kInviteFriendFieldNumber = 45;
  inline const ::InviteFriend& invitefriend() const;
  inline ::InviteFriend* mutable_invitefriend();
  
  // optional .Admin_CanAttack_Req adminCanAttack_req = 46;
  inline bool has_admincanattack_req() const;
  inline void clear_admincanattack_req();
  static const int kAdminCanAttackReqFieldNumber = 46;
  inline const ::Admin_CanAttack_Req& admincanattack_req() const;
  inline ::Admin_CanAttack_Req* mutable_admincanattack_req();
  
  // optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
  inline bool has_admincanattack_rsp() const;
  inline void clear_admincanattack_rsp();
  static const int kAdminCanAttackRspFieldNumber = 47;
  inline const ::Admin_CanAttack_Rsp& admincanattack_rsp() const;
  inline ::Admin_CanAttack_Rsp* mutable_admincanattack_rsp();
  
  // optional .SendGift sendgift = 48;
  inline bool has_sendgift() const;
  inline void clear_sendgift();
  static const int kSendgiftFieldNumber = 48;
  inline const ::SendGift& sendgift() const;
  inline ::SendGift* mutable_sendgift();
  
  // optional .SendGiftToPlatid sendgiftplatid = 49;
  inline bool has_sendgiftplatid() const;
  inline void clear_sendgiftplatid();
  static const int kSendgiftplatidFieldNumber = 49;
  inline const ::SendGiftToPlatid& sendgiftplatid() const;
  inline ::SendGiftToPlatid* mutable_sendgiftplatid();
  
  // optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
  inline bool has_adminbandwguser_req() const;
  inline void clear_adminbandwguser_req();
  static const int kAdminbandwguserReqFieldNumber = 50;
  inline const ::Admin_BandWGUser_Req& adminbandwguser_req() const;
  inline ::Admin_BandWGUser_Req* mutable_adminbandwguser_req();
  
  // optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
  inline bool has_adminbandwguser_rsp() const;
  inline void clear_adminbandwguser_rsp();
  static const int kAdminbandwguserRspFieldNumber = 51;
  inline const ::Admin_BandWGUser_Rsp& adminbandwguser_rsp() const;
  inline ::Admin_BandWGUser_Rsp* mutable_adminbandwguser_rsp();
  
  // optional .Admin_AdminOpt_Req adminOpt_req = 52;
  inline bool has_adminopt_req() const;
  inline void clear_adminopt_req();
  static const int kAdminOptReqFieldNumber = 52;
  inline const ::Admin_AdminOpt_Req& adminopt_req() const;
  inline ::Admin_AdminOpt_Req* mutable_adminopt_req();
  
  // optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
  inline bool has_adminopt_rsp() const;
  inline void clear_adminopt_rsp();
  static const int kAdminOptRspFieldNumber = 53;
  inline const ::Admin_AdminOpt_Rsp& adminopt_rsp() const;
  inline ::Admin_AdminOpt_Rsp* mutable_adminopt_rsp();
  
  // optional .PhotoNum webphotonum = 54;
  inline bool has_webphotonum() const;
  inline void clear_webphotonum();
  static const int kWebphotonumFieldNumber = 54;
  inline const ::PhotoNum& webphotonum() const;
  inline ::PhotoNum* mutable_webphotonum();
  
  // optional .callbackFriend callbackfriend = 55;
  inline bool has_callbackfriend() const;
  inline void clear_callbackfriend();
  static const int kCallbackfriendFieldNumber = 55;
  inline const ::callbackFriend& callbackfriend() const;
  inline ::callbackFriend* mutable_callbackfriend();
  
  // optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
  inline bool has_callbackfriendtoplatid() const;
  inline void clear_callbackfriendtoplatid();
  static const int kCallbackfriendtoplatidFieldNumber = 56;
  inline const ::callbackFriendToPlatid& callbackfriendtoplatid() const;
  inline ::callbackFriendToPlatid* mutable_callbackfriendtoplatid();
  
  // optional .Admin_AddHonor_Req adminaddhonor_req = 57;
  inline bool has_adminaddhonor_req() const;
  inline void clear_adminaddhonor_req();
  static const int kAdminaddhonorReqFieldNumber = 57;
  inline const ::Admin_AddHonor_Req& adminaddhonor_req() const;
  inline ::Admin_AddHonor_Req* mutable_adminaddhonor_req();
  
  // optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
  inline bool has_adminaddhonor_rsp() const;
  inline void clear_adminaddhonor_rsp();
  static const int kAdminaddhonorRspFieldNumber = 58;
  inline const ::Admin_AddHonor_Rsp& adminaddhonor_rsp() const;
  inline ::Admin_AddHonor_Rsp* mutable_adminaddhonor_rsp();
  
  // optional .Msg_StarUser starUser = 100;
  inline bool has_staruser() const;
  inline void clear_staruser();
  static const int kStarUserFieldNumber = 100;
  inline const ::Msg_StarUser& staruser() const;
  inline ::Msg_StarUser* mutable_staruser();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 fromworld_fd_;
  ::WorkingStatus_Req* workingstatus_req_;
  ::UserLogin_Req* userlogin_req_;
  ::UserLogin_Rsp* userlogin_rsp_;
  ::UserAuth_Req* userauth_req_;
  ::UserAuth_Rsp* userauth_rsp_;
  ::SendRemoteUser_Req* sendremoteuser_req_;
  ::WG_UserLeave* wg_userleave_;
  ::ForwardInfo* forwardinfo_;
  ::google::protobuf::int32 starsrvid_;
  ::GWG_CheckAttack* checkattack_;
  ::google::protobuf::int32 transfersrvid_;
  ::Admin_Profile_Req* adminprofile_req_;
  ::Admin_AddExp_Req* adminaddexp_req_;
  ::Admin_AddExp_Rsp* adminaddexp_rsp_;
  ::Admin_AddCredit_Req* adminaddcredit_req_;
  ::Admin_AddCredit_Rsp* adminaddcredit_rsp_;
  ::Admin_SetLevel_Req* adminsetlevel_req_;
  ::Admin_SetLevel_Rsp* adminsetlevel_rsp_;
  ::Admin_BanChat_Req* adminbanchat_req_;
  ::Admin_BanChat_Rsp* adminbanchat_rsp_;
  ::Admin_BanLogin_Req* adminbanlogin_req_;
  ::Admin_BanLogin_Rsp* adminbanlogin_rsp_;
  ::Admin_Reload_Req* adminreload_req_;
  ::Admin_Reload_Rsp* adminreload_rsp_;
  ::InviteFriend* invitefriend_;
  ::Admin_CanAttack_Req* admincanattack_req_;
  ::Admin_CanAttack_Rsp* admincanattack_rsp_;
  ::SendGift* sendgift_;
  ::SendGiftToPlatid* sendgiftplatid_;
  ::Admin_BandWGUser_Req* adminbandwguser_req_;
  ::Admin_BandWGUser_Rsp* adminbandwguser_rsp_;
  ::Admin_AdminOpt_Req* adminopt_req_;
  ::Admin_AdminOpt_Rsp* adminopt_rsp_;
  ::PhotoNum* webphotonum_;
  ::callbackFriend* callbackfriend_;
  ::callbackFriendToPlatid* callbackfriendtoplatid_;
  ::Admin_AddHonor_Req* adminaddhonor_req_;
  ::Admin_AddHonor_Rsp* adminaddhonor_rsp_;
  ::Msg_StarUser* staruser_;
  friend void  protobuf_AddDesc_event_2eproto();
  friend void protobuf_AssignDesc_event_2eproto();
  friend void protobuf_ShutdownFile_event_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(44 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// UserLogin_Req

// required int32 siteid = 1;
inline bool UserLogin_Req::has_siteid() const {
  return _has_bit(0);
}
inline void UserLogin_Req::clear_siteid() {
  siteid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 UserLogin_Req::siteid() const {
  return siteid_;
}
inline void UserLogin_Req::set_siteid(::google::protobuf::int32 value) {
  _set_bit(0);
  siteid_ = value;
}

// required string platform_id = 2;
inline bool UserLogin_Req::has_platform_id() const {
  return _has_bit(1);
}
inline void UserLogin_Req::clear_platform_id() {
  if (platform_id_ != &_default_platform_id_) {
    platform_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserLogin_Req::platform_id() const {
  return *platform_id_;
}
inline void UserLogin_Req::set_platform_id(const ::std::string& value) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Req::set_platform_id(const char* value) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(value);
}
inline void UserLogin_Req::set_platform_id(const char* value, size_t size) {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  platform_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_platform_id() {
  _set_bit(1);
  if (platform_id_ == &_default_platform_id_) {
    platform_id_ = new ::std::string;
  }
  return platform_id_;
}

// required string name = 3;
inline bool UserLogin_Req::has_name() const {
  return _has_bit(2);
}
inline void UserLogin_Req::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UserLogin_Req::name() const {
  return *name_;
}
inline void UserLogin_Req::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserLogin_Req::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserLogin_Req::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string profile_link = 4;
inline bool UserLogin_Req::has_profile_link() const {
  return _has_bit(3);
}
inline void UserLogin_Req::clear_profile_link() {
  if (profile_link_ != &_default_profile_link_) {
    profile_link_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& UserLogin_Req::profile_link() const {
  return *profile_link_;
}
inline void UserLogin_Req::set_profile_link(const ::std::string& value) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void UserLogin_Req::set_profile_link(const char* value) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(value);
}
inline void UserLogin_Req::set_profile_link(const char* value, size_t size) {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  profile_link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_profile_link() {
  _set_bit(3);
  if (profile_link_ == &_default_profile_link_) {
    profile_link_ = new ::std::string;
  }
  return profile_link_;
}

// required int32 gender = 5;
inline bool UserLogin_Req::has_gender() const {
  return _has_bit(4);
}
inline void UserLogin_Req::clear_gender() {
  gender_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 UserLogin_Req::gender() const {
  return gender_;
}
inline void UserLogin_Req::set_gender(::google::protobuf::int32 value) {
  _set_bit(4);
  gender_ = value;
}

// required bool is_yellow_dmd = 6;
inline bool UserLogin_Req::has_is_yellow_dmd() const {
  return _has_bit(5);
}
inline void UserLogin_Req::clear_is_yellow_dmd() {
  is_yellow_dmd_ = false;
  _clear_bit(5);
}
inline bool UserLogin_Req::is_yellow_dmd() const {
  return is_yellow_dmd_;
}
inline void UserLogin_Req::set_is_yellow_dmd(bool value) {
  _set_bit(5);
  is_yellow_dmd_ = value;
}

// required bool is_yellow_dmd_year = 7;
inline bool UserLogin_Req::has_is_yellow_dmd_year() const {
  return _has_bit(6);
}
inline void UserLogin_Req::clear_is_yellow_dmd_year() {
  is_yellow_dmd_year_ = false;
  _clear_bit(6);
}
inline bool UserLogin_Req::is_yellow_dmd_year() const {
  return is_yellow_dmd_year_;
}
inline void UserLogin_Req::set_is_yellow_dmd_year(bool value) {
  _set_bit(6);
  is_yellow_dmd_year_ = value;
}

// required int32 yellow_dmd_lv = 8;
inline bool UserLogin_Req::has_yellow_dmd_lv() const {
  return _has_bit(7);
}
inline void UserLogin_Req::clear_yellow_dmd_lv() {
  yellow_dmd_lv_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 UserLogin_Req::yellow_dmd_lv() const {
  return yellow_dmd_lv_;
}
inline void UserLogin_Req::set_yellow_dmd_lv(::google::protobuf::int32 value) {
  _set_bit(7);
  yellow_dmd_lv_ = value;
}

// repeated string friends_platid = 9;
inline int UserLogin_Req::friends_platid_size() const {
  return friends_platid_.size();
}
inline void UserLogin_Req::clear_friends_platid() {
  friends_platid_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserLogin_Req::friends_platid() const {
  return friends_platid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserLogin_Req::mutable_friends_platid() {
  return &friends_platid_;
}
inline const ::std::string& UserLogin_Req::friends_platid(int index) const {
  return friends_platid_.Get(index);
}
inline ::std::string* UserLogin_Req::mutable_friends_platid(int index) {
  return friends_platid_.Mutable(index);
}
inline void UserLogin_Req::set_friends_platid(int index, const ::std::string& value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void UserLogin_Req::set_friends_platid(int index, const char* value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void UserLogin_Req::set_friends_platid(int index, const char* value, size_t size) {
  friends_platid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::add_friends_platid() {
  return friends_platid_.Add();
}
inline void UserLogin_Req::add_friends_platid(const ::std::string& value) {
  friends_platid_.Add()->assign(value);
}
inline void UserLogin_Req::add_friends_platid(const char* value) {
  friends_platid_.Add()->assign(value);
}
inline void UserLogin_Req::add_friends_platid(const char* value, size_t size) {
  friends_platid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// required int32 webfd = 10;
inline bool UserLogin_Req::has_webfd() const {
  return _has_bit(9);
}
inline void UserLogin_Req::clear_webfd() {
  webfd_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 UserLogin_Req::webfd() const {
  return webfd_;
}
inline void UserLogin_Req::set_webfd(::google::protobuf::int32 value) {
  _set_bit(9);
  webfd_ = value;
}

// required string sid = 11;
inline bool UserLogin_Req::has_sid() const {
  return _has_bit(10);
}
inline void UserLogin_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& UserLogin_Req::sid() const {
  return *sid_;
}
inline void UserLogin_Req::set_sid(const ::std::string& value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Req::set_sid(const char* value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Req::set_sid(const char* value, size_t size) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Req::mutable_sid() {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional int32 mydb_ret = 12 [default = 0];
inline bool UserLogin_Req::has_mydb_ret() const {
  return _has_bit(11);
}
inline void UserLogin_Req::clear_mydb_ret() {
  mydb_ret_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 UserLogin_Req::mydb_ret() const {
  return mydb_ret_;
}
inline void UserLogin_Req::set_mydb_ret(::google::protobuf::int32 value) {
  _set_bit(11);
  mydb_ret_ = value;
}

// optional int32 mydb_oldid = 13 [default = 0];
inline bool UserLogin_Req::has_mydb_oldid() const {
  return _has_bit(12);
}
inline void UserLogin_Req::clear_mydb_oldid() {
  mydb_oldid_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 UserLogin_Req::mydb_oldid() const {
  return mydb_oldid_;
}
inline void UserLogin_Req::set_mydb_oldid(::google::protobuf::int32 value) {
  _set_bit(12);
  mydb_oldid_ = value;
}

// -------------------------------------------------------------------

// UserLogin_Rsp

// required int64 uid = 1;
inline bool UserLogin_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void UserLogin_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserLogin_Rsp::uid() const {
  return uid_;
}
inline void UserLogin_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required string secret = 2;
inline bool UserLogin_Rsp::has_secret() const {
  return _has_bit(1);
}
inline void UserLogin_Rsp::clear_secret() {
  if (secret_ != &_default_secret_) {
    secret_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserLogin_Rsp::secret() const {
  return *secret_;
}
inline void UserLogin_Rsp::set_secret(const ::std::string& value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void UserLogin_Rsp::set_secret(const char* value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void UserLogin_Rsp::set_secret(const char* value, size_t size) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_secret() {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  return secret_;
}

// required string server = 3;
inline bool UserLogin_Rsp::has_server() const {
  return _has_bit(2);
}
inline void UserLogin_Rsp::clear_server() {
  if (server_ != &_default_server_) {
    server_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UserLogin_Rsp::server() const {
  return *server_;
}
inline void UserLogin_Rsp::set_server(const ::std::string& value) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void UserLogin_Rsp::set_server(const char* value) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void UserLogin_Rsp::set_server(const char* value, size_t size) {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_server() {
  _set_bit(2);
  if (server_ == &_default_server_) {
    server_ = new ::std::string;
  }
  return server_;
}

// required int32 port = 4;
inline bool UserLogin_Rsp::has_port() const {
  return _has_bit(3);
}
inline void UserLogin_Rsp::clear_port() {
  port_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 UserLogin_Rsp::port() const {
  return port_;
}
inline void UserLogin_Rsp::set_port(::google::protobuf::int32 value) {
  _set_bit(3);
  port_ = value;
}

// required int32 port1 = 5;
inline bool UserLogin_Rsp::has_port1() const {
  return _has_bit(4);
}
inline void UserLogin_Rsp::clear_port1() {
  port1_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 UserLogin_Rsp::port1() const {
  return port1_;
}
inline void UserLogin_Rsp::set_port1(::google::protobuf::int32 value) {
  _set_bit(4);
  port1_ = value;
}

// required int32 webfd = 6;
inline bool UserLogin_Rsp::has_webfd() const {
  return _has_bit(5);
}
inline void UserLogin_Rsp::clear_webfd() {
  webfd_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 UserLogin_Rsp::webfd() const {
  return webfd_;
}
inline void UserLogin_Rsp::set_webfd(::google::protobuf::int32 value) {
  _set_bit(5);
  webfd_ = value;
}

// required string sid = 7;
inline bool UserLogin_Rsp::has_sid() const {
  return _has_bit(6);
}
inline void UserLogin_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& UserLogin_Rsp::sid() const {
  return *sid_;
}
inline void UserLogin_Rsp::set_sid(const ::std::string& value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Rsp::set_sid(const char* value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void UserLogin_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Rsp::mutable_sid() {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// -------------------------------------------------------------------

// SendGift

// required int64 uid = 1;
inline bool SendGift::has_uid() const {
  return _has_bit(0);
}
inline void SendGift::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SendGift::uid() const {
  return uid_;
}
inline void SendGift::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// repeated string friends_platid = 2;
inline int SendGift::friends_platid_size() const {
  return friends_platid_.size();
}
inline void SendGift::clear_friends_platid() {
  friends_platid_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendGift::friends_platid() const {
  return friends_platid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendGift::mutable_friends_platid() {
  return &friends_platid_;
}
inline const ::std::string& SendGift::friends_platid(int index) const {
  return friends_platid_.Get(index);
}
inline ::std::string* SendGift::mutable_friends_platid(int index) {
  return friends_platid_.Mutable(index);
}
inline void SendGift::set_friends_platid(int index, const ::std::string& value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void SendGift::set_friends_platid(int index, const char* value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void SendGift::set_friends_platid(int index, const char* value, size_t size) {
  friends_platid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendGift::add_friends_platid() {
  return friends_platid_.Add();
}
inline void SendGift::add_friends_platid(const ::std::string& value) {
  friends_platid_.Add()->assign(value);
}
inline void SendGift::add_friends_platid(const char* value) {
  friends_platid_.Add()->assign(value);
}
inline void SendGift::add_friends_platid(const char* value, size_t size) {
  friends_platid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// required string sid = 3;
inline bool SendGift::has_sid() const {
  return _has_bit(2);
}
inline void SendGift::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SendGift::sid() const {
  return *sid_;
}
inline void SendGift::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void SendGift::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void SendGift::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendGift::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// required int32 fd = 4;
inline bool SendGift::has_fd() const {
  return _has_bit(3);
}
inline void SendGift::clear_fd() {
  fd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SendGift::fd() const {
  return fd_;
}
inline void SendGift::set_fd(::google::protobuf::int32 value) {
  _set_bit(3);
  fd_ = value;
}

// optional bool succ = 5;
inline bool SendGift::has_succ() const {
  return _has_bit(4);
}
inline void SendGift::clear_succ() {
  succ_ = false;
  _clear_bit(4);
}
inline bool SendGift::succ() const {
  return succ_;
}
inline void SendGift::set_succ(bool value) {
  _set_bit(4);
  succ_ = value;
}

// -------------------------------------------------------------------

// SendGiftToPlatid

// required int64 uid = 1;
inline bool SendGiftToPlatid::has_uid() const {
  return _has_bit(0);
}
inline void SendGiftToPlatid::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SendGiftToPlatid::uid() const {
  return uid_;
}
inline void SendGiftToPlatid::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required string platid = 2;
inline bool SendGiftToPlatid::has_platid() const {
  return _has_bit(1);
}
inline void SendGiftToPlatid::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SendGiftToPlatid::platid() const {
  return *platid_;
}
inline void SendGiftToPlatid::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void SendGiftToPlatid::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void SendGiftToPlatid::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendGiftToPlatid::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// -------------------------------------------------------------------

// WG_UserLeave

// required int32 fd = 1;
inline bool WG_UserLeave::has_fd() const {
  return _has_bit(0);
}
inline void WG_UserLeave::clear_fd() {
  fd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 WG_UserLeave::fd() const {
  return fd_;
}
inline void WG_UserLeave::set_fd(::google::protobuf::int32 value) {
  _set_bit(0);
  fd_ = value;
}

// -------------------------------------------------------------------

// WorkingStatus_Req

// required int32 gid = 1;
inline bool WorkingStatus_Req::has_gid() const {
  return _has_bit(0);
}
inline void WorkingStatus_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 WorkingStatus_Req::gid() const {
  return gid_;
}
inline void WorkingStatus_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required bool finish = 2;
inline bool WorkingStatus_Req::has_finish() const {
  return _has_bit(1);
}
inline void WorkingStatus_Req::clear_finish() {
  finish_ = false;
  _clear_bit(1);
}
inline bool WorkingStatus_Req::finish() const {
  return finish_;
}
inline void WorkingStatus_Req::set_finish(bool value) {
  _set_bit(1);
  finish_ = value;
}

// -------------------------------------------------------------------

// UserAuth_Req

// required int64 uid = 1;
inline bool UserAuth_Req::has_uid() const {
  return _has_bit(0);
}
inline void UserAuth_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserAuth_Req::uid() const {
  return uid_;
}
inline void UserAuth_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int64 secret = 2;
inline bool UserAuth_Req::has_secret() const {
  return _has_bit(1);
}
inline void UserAuth_Req::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 UserAuth_Req::secret() const {
  return secret_;
}
inline void UserAuth_Req::set_secret(::google::protobuf::int64 value) {
  _set_bit(1);
  secret_ = value;
}

// required int32 sockfd = 3;
inline bool UserAuth_Req::has_sockfd() const {
  return _has_bit(2);
}
inline void UserAuth_Req::clear_sockfd() {
  sockfd_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 UserAuth_Req::sockfd() const {
  return sockfd_;
}
inline void UserAuth_Req::set_sockfd(::google::protobuf::int32 value) {
  _set_bit(2);
  sockfd_ = value;
}

// -------------------------------------------------------------------

// UserAuth_Rsp

// required bool pass = 1;
inline bool UserAuth_Rsp::has_pass() const {
  return _has_bit(0);
}
inline void UserAuth_Rsp::clear_pass() {
  pass_ = false;
  _clear_bit(0);
}
inline bool UserAuth_Rsp::pass() const {
  return pass_;
}
inline void UserAuth_Rsp::set_pass(bool value) {
  _set_bit(0);
  pass_ = value;
}

// -------------------------------------------------------------------

// SendRemoteUser_Req

// required int64 uid = 1;
inline bool SendRemoteUser_Req::has_uid() const {
  return _has_bit(0);
}
inline void SendRemoteUser_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SendRemoteUser_Req::uid() const {
  return uid_;
}
inline void SendRemoteUser_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 cmd = 2;
inline bool SendRemoteUser_Req::has_cmd() const {
  return _has_bit(1);
}
inline void SendRemoteUser_Req::clear_cmd() {
  cmd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SendRemoteUser_Req::cmd() const {
  return cmd_;
}
inline void SendRemoteUser_Req::set_cmd(::google::protobuf::int32 value) {
  _set_bit(1);
  cmd_ = value;
}

// required string text = 3;
inline bool SendRemoteUser_Req::has_text() const {
  return _has_bit(2);
}
inline void SendRemoteUser_Req::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SendRemoteUser_Req::text() const {
  return *text_;
}
inline void SendRemoteUser_Req::set_text(const ::std::string& value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendRemoteUser_Req::set_text(const char* value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendRemoteUser_Req::set_text(const char* value, size_t size) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendRemoteUser_Req::mutable_text() {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// ForwardInfo

// optional int64 uid = 1 [default = -1];
inline bool ForwardInfo::has_uid() const {
  return _has_bit(0);
}
inline void ForwardInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  _clear_bit(0);
}
inline ::google::protobuf::int64 ForwardInfo::uid() const {
  return uid_;
}
inline void ForwardInfo::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2 [default = "0"];
inline bool ForwardInfo::has_platid() const {
  return _has_bit(1);
}
inline void ForwardInfo::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->assign(_default_platid_);
  }
  _clear_bit(1);
}
inline const ::std::string& ForwardInfo::platid() const {
  return *platid_;
}
inline void ForwardInfo::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void ForwardInfo::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void ForwardInfo::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardInfo::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string(_default_platid_);
  }
  return platid_;
}

// -------------------------------------------------------------------

// GWG_CheckAttack

// optional int64 attackID = 1 [default = -1];
inline bool GWG_CheckAttack::has_attackid() const {
  return _has_bit(0);
}
inline void GWG_CheckAttack::clear_attackid() {
  attackid_ = GOOGLE_LONGLONG(-1);
  _clear_bit(0);
}
inline ::google::protobuf::int64 GWG_CheckAttack::attackid() const {
  return attackid_;
}
inline void GWG_CheckAttack::set_attackid(::google::protobuf::int64 value) {
  _set_bit(0);
  attackid_ = value;
}

// optional int64 recoveryID = 2 [default = -1];
inline bool GWG_CheckAttack::has_recoveryid() const {
  return _has_bit(1);
}
inline void GWG_CheckAttack::clear_recoveryid() {
  recoveryid_ = GOOGLE_LONGLONG(-1);
  _clear_bit(1);
}
inline ::google::protobuf::int64 GWG_CheckAttack::recoveryid() const {
  return recoveryid_;
}
inline void GWG_CheckAttack::set_recoveryid(::google::protobuf::int64 value) {
  _set_bit(1);
  recoveryid_ = value;
}

// optional bool isattacked = 3 [default = true];
inline bool GWG_CheckAttack::has_isattacked() const {
  return _has_bit(2);
}
inline void GWG_CheckAttack::clear_isattacked() {
  isattacked_ = true;
  _clear_bit(2);
}
inline bool GWG_CheckAttack::isattacked() const {
  return isattacked_;
}
inline void GWG_CheckAttack::set_isattacked(bool value) {
  _set_bit(2);
  isattacked_ = value;
}

// -------------------------------------------------------------------

// Admin_Profile_Req

// required int32 cmd = 1;
inline bool Admin_Profile_Req::has_cmd() const {
  return _has_bit(0);
}
inline void Admin_Profile_Req::clear_cmd() {
  cmd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Admin_Profile_Req::cmd() const {
  return cmd_;
}
inline void Admin_Profile_Req::set_cmd(::google::protobuf::int32 value) {
  _set_bit(0);
  cmd_ = value;
}

// -------------------------------------------------------------------

// Admin_AddExp_Req

// required int64 uid = 1;
inline bool Admin_AddExp_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddExp_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddExp_Req::uid() const {
  return uid_;
}
inline void Admin_AddExp_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 exp = 2;
inline bool Admin_AddExp_Req::has_exp() const {
  return _has_bit(1);
}
inline void Admin_AddExp_Req::clear_exp() {
  exp_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_AddExp_Req::exp() const {
  return exp_;
}
inline void Admin_AddExp_Req::set_exp(::google::protobuf::int32 value) {
  _set_bit(1);
  exp_ = value;
}

// required int32 gid = 3 [default = 0];
inline bool Admin_AddExp_Req::has_gid() const {
  return _has_bit(2);
}
inline void Admin_AddExp_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_AddExp_Req::gid() const {
  return gid_;
}
inline void Admin_AddExp_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(2);
  gid_ = value;
}

// required int32 adminfd = 4;
inline bool Admin_AddExp_Req::has_adminfd() const {
  return _has_bit(3);
}
inline void Admin_AddExp_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddExp_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_AddExp_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(3);
  adminfd_ = value;
}

// optional string sid = 5;
inline bool Admin_AddExp_Req::has_sid() const {
  return _has_bit(4);
}
inline void Admin_AddExp_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Admin_AddExp_Req::sid() const {
  return *sid_;
}
inline void Admin_AddExp_Req::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddExp_Req::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddExp_Req::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddExp_Req::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 6 [default = false];
inline bool Admin_AddExp_Req::has_fromweb() const {
  return _has_bit(5);
}
inline void Admin_AddExp_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(5);
}
inline bool Admin_AddExp_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_AddExp_Req::set_fromweb(bool value) {
  _set_bit(5);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AddExp_Rsp

// required int64 uid = 1;
inline bool Admin_AddExp_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddExp_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddExp_Rsp::uid() const {
  return uid_;
}
inline void Admin_AddExp_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 oldlevel = 2;
inline bool Admin_AddExp_Rsp::has_oldlevel() const {
  return _has_bit(1);
}
inline void Admin_AddExp_Rsp::clear_oldlevel() {
  oldlevel_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::oldlevel() const {
  return oldlevel_;
}
inline void Admin_AddExp_Rsp::set_oldlevel(::google::protobuf::int32 value) {
  _set_bit(1);
  oldlevel_ = value;
}

// required int32 oldexp = 3;
inline bool Admin_AddExp_Rsp::has_oldexp() const {
  return _has_bit(2);
}
inline void Admin_AddExp_Rsp::clear_oldexp() {
  oldexp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::oldexp() const {
  return oldexp_;
}
inline void Admin_AddExp_Rsp::set_oldexp(::google::protobuf::int32 value) {
  _set_bit(2);
  oldexp_ = value;
}

// required int32 newlevel = 4;
inline bool Admin_AddExp_Rsp::has_newlevel() const {
  return _has_bit(3);
}
inline void Admin_AddExp_Rsp::clear_newlevel() {
  newlevel_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::newlevel() const {
  return newlevel_;
}
inline void Admin_AddExp_Rsp::set_newlevel(::google::protobuf::int32 value) {
  _set_bit(3);
  newlevel_ = value;
}

// required int32 newexp = 5;
inline bool Admin_AddExp_Rsp::has_newexp() const {
  return _has_bit(4);
}
inline void Admin_AddExp_Rsp::clear_newexp() {
  newexp_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::newexp() const {
  return newexp_;
}
inline void Admin_AddExp_Rsp::set_newexp(::google::protobuf::int32 value) {
  _set_bit(4);
  newexp_ = value;
}

// required int32 gid = 6;
inline bool Admin_AddExp_Rsp::has_gid() const {
  return _has_bit(5);
}
inline void Admin_AddExp_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::gid() const {
  return gid_;
}
inline void Admin_AddExp_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(5);
  gid_ = value;
}

// required int32 adminfd = 7;
inline bool Admin_AddExp_Rsp::has_adminfd() const {
  return _has_bit(6);
}
inline void Admin_AddExp_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Admin_AddExp_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_AddExp_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(6);
  adminfd_ = value;
}

// optional string sid = 8;
inline bool Admin_AddExp_Rsp::has_sid() const {
  return _has_bit(7);
}
inline void Admin_AddExp_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Admin_AddExp_Rsp::sid() const {
  return *sid_;
}
inline void Admin_AddExp_Rsp::set_sid(const ::std::string& value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddExp_Rsp::set_sid(const char* value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddExp_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddExp_Rsp::mutable_sid() {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 9 [default = false];
inline bool Admin_AddExp_Rsp::has_fromweb() const {
  return _has_bit(8);
}
inline void Admin_AddExp_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(8);
}
inline bool Admin_AddExp_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_AddExp_Rsp::set_fromweb(bool value) {
  _set_bit(8);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_CanAttack_Req

// required int64 uid = 1;
inline bool Admin_CanAttack_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_CanAttack_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_CanAttack_Req::uid() const {
  return uid_;
}
inline void Admin_CanAttack_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_CanAttack_Req::has_platid() const {
  return _has_bit(1);
}
inline void Admin_CanAttack_Req::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_CanAttack_Req::platid() const {
  return *platid_;
}
inline void Admin_CanAttack_Req::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_CanAttack_Req::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_CanAttack_Req::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_CanAttack_Req::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int32 gid = 4 [default = 0];
inline bool Admin_CanAttack_Req::has_gid() const {
  return _has_bit(2);
}
inline void Admin_CanAttack_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_CanAttack_Req::gid() const {
  return gid_;
}
inline void Admin_CanAttack_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(2);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_CanAttack_Req::has_adminfd() const {
  return _has_bit(3);
}
inline void Admin_CanAttack_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_CanAttack_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_CanAttack_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(3);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_CanAttack_Req::has_sid() const {
  return _has_bit(4);
}
inline void Admin_CanAttack_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Admin_CanAttack_Req::sid() const {
  return *sid_;
}
inline void Admin_CanAttack_Req::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_CanAttack_Req::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_CanAttack_Req::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_CanAttack_Req::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_CanAttack_Req::has_fromweb() const {
  return _has_bit(5);
}
inline void Admin_CanAttack_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(5);
}
inline bool Admin_CanAttack_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_CanAttack_Req::set_fromweb(bool value) {
  _set_bit(5);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_CanAttack_Rsp

// required int64 uid = 1;
inline bool Admin_CanAttack_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_CanAttack_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_CanAttack_Rsp::uid() const {
  return uid_;
}
inline void Admin_CanAttack_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_CanAttack_Rsp::has_platid() const {
  return _has_bit(1);
}
inline void Admin_CanAttack_Rsp::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_CanAttack_Rsp::platid() const {
  return *platid_;
}
inline void Admin_CanAttack_Rsp::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_CanAttack_Rsp::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_CanAttack_Rsp::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_CanAttack_Rsp::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int32 gid = 5;
inline bool Admin_CanAttack_Rsp::has_gid() const {
  return _has_bit(2);
}
inline void Admin_CanAttack_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_CanAttack_Rsp::gid() const {
  return gid_;
}
inline void Admin_CanAttack_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(2);
  gid_ = value;
}

// required int32 adminfd = 6;
inline bool Admin_CanAttack_Rsp::has_adminfd() const {
  return _has_bit(3);
}
inline void Admin_CanAttack_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_CanAttack_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_CanAttack_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(3);
  adminfd_ = value;
}

// optional string sid = 7;
inline bool Admin_CanAttack_Rsp::has_sid() const {
  return _has_bit(4);
}
inline void Admin_CanAttack_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Admin_CanAttack_Rsp::sid() const {
  return *sid_;
}
inline void Admin_CanAttack_Rsp::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_CanAttack_Rsp::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_CanAttack_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_CanAttack_Rsp::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 8 [default = false];
inline bool Admin_CanAttack_Rsp::has_fromweb() const {
  return _has_bit(5);
}
inline void Admin_CanAttack_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(5);
}
inline bool Admin_CanAttack_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_CanAttack_Rsp::set_fromweb(bool value) {
  _set_bit(5);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AddCredit_Req

// required int64 uid = 1;
inline bool Admin_AddCredit_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddCredit_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddCredit_Req::uid() const {
  return uid_;
}
inline void Admin_AddCredit_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_AddCredit_Req::has_platid() const {
  return _has_bit(1);
}
inline void Admin_AddCredit_Req::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_AddCredit_Req::platid() const {
  return *platid_;
}
inline void Admin_AddCredit_Req::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCredit_Req::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCredit_Req::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCredit_Req::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int32 credit = 3;
inline bool Admin_AddCredit_Req::has_credit() const {
  return _has_bit(2);
}
inline void Admin_AddCredit_Req::clear_credit() {
  credit_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_AddCredit_Req::credit() const {
  return credit_;
}
inline void Admin_AddCredit_Req::set_credit(::google::protobuf::int32 value) {
  _set_bit(2);
  credit_ = value;
}

// required int32 gid = 4 [default = 0];
inline bool Admin_AddCredit_Req::has_gid() const {
  return _has_bit(3);
}
inline void Admin_AddCredit_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddCredit_Req::gid() const {
  return gid_;
}
inline void Admin_AddCredit_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_AddCredit_Req::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_AddCredit_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddCredit_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_AddCredit_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// required int32 type = 6 [default = 0];
inline bool Admin_AddCredit_Req::has_type() const {
  return _has_bit(5);
}
inline void Admin_AddCredit_Req::clear_type() {
  type_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AddCredit_Req::type() const {
  return type_;
}
inline void Admin_AddCredit_Req::set_type(::google::protobuf::int32 value) {
  _set_bit(5);
  type_ = value;
}

// optional string sid = 7;
inline bool Admin_AddCredit_Req::has_sid() const {
  return _has_bit(6);
}
inline void Admin_AddCredit_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Admin_AddCredit_Req::sid() const {
  return *sid_;
}
inline void Admin_AddCredit_Req::set_sid(const ::std::string& value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCredit_Req::set_sid(const char* value) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCredit_Req::set_sid(const char* value, size_t size) {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCredit_Req::mutable_sid() {
  _set_bit(6);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 9 [default = false];
inline bool Admin_AddCredit_Req::has_fromweb() const {
  return _has_bit(7);
}
inline void Admin_AddCredit_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(7);
}
inline bool Admin_AddCredit_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_AddCredit_Req::set_fromweb(bool value) {
  _set_bit(7);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AddCredit_Rsp

// required int64 uid = 1;
inline bool Admin_AddCredit_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddCredit_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddCredit_Rsp::uid() const {
  return uid_;
}
inline void Admin_AddCredit_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional string platid = 2;
inline bool Admin_AddCredit_Rsp::has_platid() const {
  return _has_bit(1);
}
inline void Admin_AddCredit_Rsp::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Admin_AddCredit_Rsp::platid() const {
  return *platid_;
}
inline void Admin_AddCredit_Rsp::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCredit_Rsp::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void Admin_AddCredit_Rsp::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCredit_Rsp::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// required int64 oldcredit = 3;
inline bool Admin_AddCredit_Rsp::has_oldcredit() const {
  return _has_bit(2);
}
inline void Admin_AddCredit_Rsp::clear_oldcredit() {
  oldcredit_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Admin_AddCredit_Rsp::oldcredit() const {
  return oldcredit_;
}
inline void Admin_AddCredit_Rsp::set_oldcredit(::google::protobuf::int64 value) {
  _set_bit(2);
  oldcredit_ = value;
}

// required int64 newcredit = 4;
inline bool Admin_AddCredit_Rsp::has_newcredit() const {
  return _has_bit(3);
}
inline void Admin_AddCredit_Rsp::clear_newcredit() {
  newcredit_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Admin_AddCredit_Rsp::newcredit() const {
  return newcredit_;
}
inline void Admin_AddCredit_Rsp::set_newcredit(::google::protobuf::int64 value) {
  _set_bit(3);
  newcredit_ = value;
}

// required int32 gid = 5;
inline bool Admin_AddCredit_Rsp::has_gid() const {
  return _has_bit(4);
}
inline void Admin_AddCredit_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddCredit_Rsp::gid() const {
  return gid_;
}
inline void Admin_AddCredit_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(4);
  gid_ = value;
}

// required int32 adminfd = 6;
inline bool Admin_AddCredit_Rsp::has_adminfd() const {
  return _has_bit(5);
}
inline void Admin_AddCredit_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AddCredit_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_AddCredit_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(5);
  adminfd_ = value;
}

// required int32 type = 7 [default = 0];
inline bool Admin_AddCredit_Rsp::has_type() const {
  return _has_bit(6);
}
inline void Admin_AddCredit_Rsp::clear_type() {
  type_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Admin_AddCredit_Rsp::type() const {
  return type_;
}
inline void Admin_AddCredit_Rsp::set_type(::google::protobuf::int32 value) {
  _set_bit(6);
  type_ = value;
}

// optional string sid = 8;
inline bool Admin_AddCredit_Rsp::has_sid() const {
  return _has_bit(7);
}
inline void Admin_AddCredit_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Admin_AddCredit_Rsp::sid() const {
  return *sid_;
}
inline void Admin_AddCredit_Rsp::set_sid(const ::std::string& value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCredit_Rsp::set_sid(const char* value) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddCredit_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddCredit_Rsp::mutable_sid() {
  _set_bit(7);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 9 [default = false];
inline bool Admin_AddCredit_Rsp::has_fromweb() const {
  return _has_bit(8);
}
inline void Admin_AddCredit_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(8);
}
inline bool Admin_AddCredit_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_AddCredit_Rsp::set_fromweb(bool value) {
  _set_bit(8);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AdminOpt_Req

// required int64 uid = 1;
inline bool Admin_AdminOpt_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AdminOpt_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Req::uid() const {
  return uid_;
}
inline void Admin_AdminOpt_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional int32 optType = 2;
inline bool Admin_AdminOpt_Req::has_opttype() const {
  return _has_bit(1);
}
inline void Admin_AdminOpt_Req::clear_opttype() {
  opttype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::opttype() const {
  return opttype_;
}
inline void Admin_AdminOpt_Req::set_opttype(::google::protobuf::int32 value) {
  _set_bit(1);
  opttype_ = value;
}

// optional string admin = 3;
inline bool Admin_AdminOpt_Req::has_admin() const {
  return _has_bit(2);
}
inline void Admin_AdminOpt_Req::clear_admin() {
  if (admin_ != &_default_admin_) {
    admin_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_AdminOpt_Req::admin() const {
  return *admin_;
}
inline void Admin_AdminOpt_Req::set_admin(const ::std::string& value) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(value);
}
inline void Admin_AdminOpt_Req::set_admin(const char* value) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(value);
}
inline void Admin_AdminOpt_Req::set_admin(const char* value, size_t size) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AdminOpt_Req::mutable_admin() {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  return admin_;
}

// optional int64 res1 = 4;
inline bool Admin_AdminOpt_Req::has_res1() const {
  return _has_bit(3);
}
inline void Admin_AdminOpt_Req::clear_res1() {
  res1_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Req::res1() const {
  return res1_;
}
inline void Admin_AdminOpt_Req::set_res1(::google::protobuf::int64 value) {
  _set_bit(3);
  res1_ = value;
}

// optional int64 res2 = 5;
inline bool Admin_AdminOpt_Req::has_res2() const {
  return _has_bit(4);
}
inline void Admin_AdminOpt_Req::clear_res2() {
  res2_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Req::res2() const {
  return res2_;
}
inline void Admin_AdminOpt_Req::set_res2(::google::protobuf::int64 value) {
  _set_bit(4);
  res2_ = value;
}

// optional int32 count = 6 [default = 0];
inline bool Admin_AdminOpt_Req::has_count() const {
  return _has_bit(5);
}
inline void Admin_AdminOpt_Req::clear_count() {
  count_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::count() const {
  return count_;
}
inline void Admin_AdminOpt_Req::set_count(::google::protobuf::int32 value) {
  _set_bit(5);
  count_ = value;
}

// optional int32 armytype = 7 [default = 0];
inline bool Admin_AdminOpt_Req::has_armytype() const {
  return _has_bit(6);
}
inline void Admin_AdminOpt_Req::clear_armytype() {
  armytype_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::armytype() const {
  return armytype_;
}
inline void Admin_AdminOpt_Req::set_armytype(::google::protobuf::int32 value) {
  _set_bit(6);
  armytype_ = value;
}

// optional int32 bldtype = 8 [default = 0];
inline bool Admin_AdminOpt_Req::has_bldtype() const {
  return _has_bit(7);
}
inline void Admin_AdminOpt_Req::clear_bldtype() {
  bldtype_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::bldtype() const {
  return bldtype_;
}
inline void Admin_AdminOpt_Req::set_bldtype(::google::protobuf::int32 value) {
  _set_bit(7);
  bldtype_ = value;
}

// optional int32 bldid = 9 [default = 0];
inline bool Admin_AdminOpt_Req::has_bldid() const {
  return _has_bit(8);
}
inline void Admin_AdminOpt_Req::clear_bldid() {
  bldid_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::bldid() const {
  return bldid_;
}
inline void Admin_AdminOpt_Req::set_bldid(::google::protobuf::int32 value) {
  _set_bit(8);
  bldid_ = value;
}

// optional int32 level = 10 [default = 0];
inline bool Admin_AdminOpt_Req::has_level() const {
  return _has_bit(9);
}
inline void Admin_AdminOpt_Req::clear_level() {
  level_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::level() const {
  return level_;
}
inline void Admin_AdminOpt_Req::set_level(::google::protobuf::int32 value) {
  _set_bit(9);
  level_ = value;
}

// optional int32 npcid = 11;
inline bool Admin_AdminOpt_Req::has_npcid() const {
  return _has_bit(10);
}
inline void Admin_AdminOpt_Req::clear_npcid() {
  npcid_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::npcid() const {
  return npcid_;
}
inline void Admin_AdminOpt_Req::set_npcid(::google::protobuf::int32 value) {
  _set_bit(10);
  npcid_ = value;
}

// optional int32 gid = 12 [default = 0];
inline bool Admin_AdminOpt_Req::has_gid() const {
  return _has_bit(11);
}
inline void Admin_AdminOpt_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::gid() const {
  return gid_;
}
inline void Admin_AdminOpt_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(11);
  gid_ = value;
}

// optional int32 adminfd = 13;
inline bool Admin_AdminOpt_Req::has_adminfd() const {
  return _has_bit(12);
}
inline void Admin_AdminOpt_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_AdminOpt_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(12);
  adminfd_ = value;
}

// optional string sid = 14;
inline bool Admin_AdminOpt_Req::has_sid() const {
  return _has_bit(13);
}
inline void Admin_AdminOpt_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& Admin_AdminOpt_Req::sid() const {
  return *sid_;
}
inline void Admin_AdminOpt_Req::set_sid(const ::std::string& value) {
  _set_bit(13);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AdminOpt_Req::set_sid(const char* value) {
  _set_bit(13);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AdminOpt_Req::set_sid(const char* value, size_t size) {
  _set_bit(13);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AdminOpt_Req::mutable_sid() {
  _set_bit(13);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 15 [default = false];
inline bool Admin_AdminOpt_Req::has_fromweb() const {
  return _has_bit(14);
}
inline void Admin_AdminOpt_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(14);
}
inline bool Admin_AdminOpt_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_AdminOpt_Req::set_fromweb(bool value) {
  _set_bit(14);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AdminOpt_Rsp

// required int64 uid = 1;
inline bool Admin_AdminOpt_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AdminOpt_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Rsp::uid() const {
  return uid_;
}
inline void Admin_AdminOpt_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// optional int32 optType = 2;
inline bool Admin_AdminOpt_Rsp::has_opttype() const {
  return _has_bit(1);
}
inline void Admin_AdminOpt_Rsp::clear_opttype() {
  opttype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Rsp::opttype() const {
  return opttype_;
}
inline void Admin_AdminOpt_Rsp::set_opttype(::google::protobuf::int32 value) {
  _set_bit(1);
  opttype_ = value;
}

// optional string admin = 3;
inline bool Admin_AdminOpt_Rsp::has_admin() const {
  return _has_bit(2);
}
inline void Admin_AdminOpt_Rsp::clear_admin() {
  if (admin_ != &_default_admin_) {
    admin_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_AdminOpt_Rsp::admin() const {
  return *admin_;
}
inline void Admin_AdminOpt_Rsp::set_admin(const ::std::string& value) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(value);
}
inline void Admin_AdminOpt_Rsp::set_admin(const char* value) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(value);
}
inline void Admin_AdminOpt_Rsp::set_admin(const char* value, size_t size) {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  admin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AdminOpt_Rsp::mutable_admin() {
  _set_bit(2);
  if (admin_ == &_default_admin_) {
    admin_ = new ::std::string;
  }
  return admin_;
}

// optional int32 level = 4;
inline bool Admin_AdminOpt_Rsp::has_level() const {
  return _has_bit(3);
}
inline void Admin_AdminOpt_Rsp::clear_level() {
  level_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Rsp::level() const {
  return level_;
}
inline void Admin_AdminOpt_Rsp::set_level(::google::protobuf::int32 value) {
  _set_bit(3);
  level_ = value;
}

// optional int64 res1 = 5;
inline bool Admin_AdminOpt_Rsp::has_res1() const {
  return _has_bit(4);
}
inline void Admin_AdminOpt_Rsp::clear_res1() {
  res1_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Rsp::res1() const {
  return res1_;
}
inline void Admin_AdminOpt_Rsp::set_res1(::google::protobuf::int64 value) {
  _set_bit(4);
  res1_ = value;
}

// optional int64 res2 = 6;
inline bool Admin_AdminOpt_Rsp::has_res2() const {
  return _has_bit(5);
}
inline void Admin_AdminOpt_Rsp::clear_res2() {
  res2_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Rsp::res2() const {
  return res2_;
}
inline void Admin_AdminOpt_Rsp::set_res2(::google::protobuf::int64 value) {
  _set_bit(5);
  res2_ = value;
}

// optional int64 credit = 7;
inline bool Admin_AdminOpt_Rsp::has_credit() const {
  return _has_bit(6);
}
inline void Admin_AdminOpt_Rsp::clear_credit() {
  credit_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 Admin_AdminOpt_Rsp::credit() const {
  return credit_;
}
inline void Admin_AdminOpt_Rsp::set_credit(::google::protobuf::int64 value) {
  _set_bit(6);
  credit_ = value;
}

// optional bool succ = 8;
inline bool Admin_AdminOpt_Rsp::has_succ() const {
  return _has_bit(7);
}
inline void Admin_AdminOpt_Rsp::clear_succ() {
  succ_ = false;
  _clear_bit(7);
}
inline bool Admin_AdminOpt_Rsp::succ() const {
  return succ_;
}
inline void Admin_AdminOpt_Rsp::set_succ(bool value) {
  _set_bit(7);
  succ_ = value;
}

// optional int32 gid = 9 [default = 0];
inline bool Admin_AdminOpt_Rsp::has_gid() const {
  return _has_bit(8);
}
inline void Admin_AdminOpt_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Rsp::gid() const {
  return gid_;
}
inline void Admin_AdminOpt_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(8);
  gid_ = value;
}

// optional int32 adminfd = 10;
inline bool Admin_AdminOpt_Rsp::has_adminfd() const {
  return _has_bit(9);
}
inline void Admin_AdminOpt_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 Admin_AdminOpt_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_AdminOpt_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(9);
  adminfd_ = value;
}

// optional string sid = 11;
inline bool Admin_AdminOpt_Rsp::has_sid() const {
  return _has_bit(10);
}
inline void Admin_AdminOpt_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& Admin_AdminOpt_Rsp::sid() const {
  return *sid_;
}
inline void Admin_AdminOpt_Rsp::set_sid(const ::std::string& value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AdminOpt_Rsp::set_sid(const char* value) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AdminOpt_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AdminOpt_Rsp::mutable_sid() {
  _set_bit(10);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 12 [default = false];
inline bool Admin_AdminOpt_Rsp::has_fromweb() const {
  return _has_bit(11);
}
inline void Admin_AdminOpt_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(11);
}
inline bool Admin_AdminOpt_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_AdminOpt_Rsp::set_fromweb(bool value) {
  _set_bit(11);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_SetLevel_Req

// required int64 uid = 1;
inline bool Admin_SetLevel_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_SetLevel_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_SetLevel_Req::uid() const {
  return uid_;
}
inline void Admin_SetLevel_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 level = 2;
inline bool Admin_SetLevel_Req::has_level() const {
  return _has_bit(1);
}
inline void Admin_SetLevel_Req::clear_level() {
  level_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_SetLevel_Req::level() const {
  return level_;
}
inline void Admin_SetLevel_Req::set_level(::google::protobuf::int32 value) {
  _set_bit(1);
  level_ = value;
}

// required int32 gid = 3 [default = 0];
inline bool Admin_SetLevel_Req::has_gid() const {
  return _has_bit(2);
}
inline void Admin_SetLevel_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_SetLevel_Req::gid() const {
  return gid_;
}
inline void Admin_SetLevel_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(2);
  gid_ = value;
}

// required int32 adminfd = 4;
inline bool Admin_SetLevel_Req::has_adminfd() const {
  return _has_bit(3);
}
inline void Admin_SetLevel_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_SetLevel_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_SetLevel_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(3);
  adminfd_ = value;
}

// optional string sid = 5;
inline bool Admin_SetLevel_Req::has_sid() const {
  return _has_bit(4);
}
inline void Admin_SetLevel_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Admin_SetLevel_Req::sid() const {
  return *sid_;
}
inline void Admin_SetLevel_Req::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_SetLevel_Req::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_SetLevel_Req::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_SetLevel_Req::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 6 [default = false];
inline bool Admin_SetLevel_Req::has_fromweb() const {
  return _has_bit(5);
}
inline void Admin_SetLevel_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(5);
}
inline bool Admin_SetLevel_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_SetLevel_Req::set_fromweb(bool value) {
  _set_bit(5);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_SetLevel_Rsp

// required int64 uid = 1;
inline bool Admin_SetLevel_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_SetLevel_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_SetLevel_Rsp::uid() const {
  return uid_;
}
inline void Admin_SetLevel_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 oldlevel = 2;
inline bool Admin_SetLevel_Rsp::has_oldlevel() const {
  return _has_bit(1);
}
inline void Admin_SetLevel_Rsp::clear_oldlevel() {
  oldlevel_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_SetLevel_Rsp::oldlevel() const {
  return oldlevel_;
}
inline void Admin_SetLevel_Rsp::set_oldlevel(::google::protobuf::int32 value) {
  _set_bit(1);
  oldlevel_ = value;
}

// required int32 newlevel = 3;
inline bool Admin_SetLevel_Rsp::has_newlevel() const {
  return _has_bit(2);
}
inline void Admin_SetLevel_Rsp::clear_newlevel() {
  newlevel_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_SetLevel_Rsp::newlevel() const {
  return newlevel_;
}
inline void Admin_SetLevel_Rsp::set_newlevel(::google::protobuf::int32 value) {
  _set_bit(2);
  newlevel_ = value;
}

// required int32 gid = 4;
inline bool Admin_SetLevel_Rsp::has_gid() const {
  return _has_bit(3);
}
inline void Admin_SetLevel_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_SetLevel_Rsp::gid() const {
  return gid_;
}
inline void Admin_SetLevel_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_SetLevel_Rsp::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_SetLevel_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_SetLevel_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_SetLevel_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_SetLevel_Rsp::has_sid() const {
  return _has_bit(5);
}
inline void Admin_SetLevel_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_SetLevel_Rsp::sid() const {
  return *sid_;
}
inline void Admin_SetLevel_Rsp::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_SetLevel_Rsp::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_SetLevel_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_SetLevel_Rsp::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_SetLevel_Rsp::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_SetLevel_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_SetLevel_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_SetLevel_Rsp::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_BanChat_Req

// required int64 uid = 1;
inline bool Admin_BanChat_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_BanChat_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_BanChat_Req::uid() const {
  return uid_;
}
inline void Admin_BanChat_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required bool isban = 2;
inline bool Admin_BanChat_Req::has_isban() const {
  return _has_bit(1);
}
inline void Admin_BanChat_Req::clear_isban() {
  isban_ = false;
  _clear_bit(1);
}
inline bool Admin_BanChat_Req::isban() const {
  return isban_;
}
inline void Admin_BanChat_Req::set_isban(bool value) {
  _set_bit(1);
  isban_ = value;
}

// required int32 time = 3;
inline bool Admin_BanChat_Req::has_time() const {
  return _has_bit(2);
}
inline void Admin_BanChat_Req::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_BanChat_Req::time() const {
  return time_;
}
inline void Admin_BanChat_Req::set_time(::google::protobuf::int32 value) {
  _set_bit(2);
  time_ = value;
}

// required int32 gid = 4 [default = 0];
inline bool Admin_BanChat_Req::has_gid() const {
  return _has_bit(3);
}
inline void Admin_BanChat_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_BanChat_Req::gid() const {
  return gid_;
}
inline void Admin_BanChat_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_BanChat_Req::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_BanChat_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BanChat_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_BanChat_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_BanChat_Req::has_sid() const {
  return _has_bit(5);
}
inline void Admin_BanChat_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_BanChat_Req::sid() const {
  return *sid_;
}
inline void Admin_BanChat_Req::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanChat_Req::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanChat_Req::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BanChat_Req::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_BanChat_Req::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_BanChat_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_BanChat_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_BanChat_Req::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_BanChat_Rsp

// required int64 uid = 1;
inline bool Admin_BanChat_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_BanChat_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_BanChat_Rsp::uid() const {
  return uid_;
}
inline void Admin_BanChat_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required bool isban = 2;
inline bool Admin_BanChat_Rsp::has_isban() const {
  return _has_bit(1);
}
inline void Admin_BanChat_Rsp::clear_isban() {
  isban_ = false;
  _clear_bit(1);
}
inline bool Admin_BanChat_Rsp::isban() const {
  return isban_;
}
inline void Admin_BanChat_Rsp::set_isban(bool value) {
  _set_bit(1);
  isban_ = value;
}

// required int32 time = 3;
inline bool Admin_BanChat_Rsp::has_time() const {
  return _has_bit(2);
}
inline void Admin_BanChat_Rsp::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_BanChat_Rsp::time() const {
  return time_;
}
inline void Admin_BanChat_Rsp::set_time(::google::protobuf::int32 value) {
  _set_bit(2);
  time_ = value;
}

// required int32 gid = 4;
inline bool Admin_BanChat_Rsp::has_gid() const {
  return _has_bit(3);
}
inline void Admin_BanChat_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_BanChat_Rsp::gid() const {
  return gid_;
}
inline void Admin_BanChat_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_BanChat_Rsp::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_BanChat_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BanChat_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_BanChat_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_BanChat_Rsp::has_sid() const {
  return _has_bit(5);
}
inline void Admin_BanChat_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_BanChat_Rsp::sid() const {
  return *sid_;
}
inline void Admin_BanChat_Rsp::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanChat_Rsp::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanChat_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BanChat_Rsp::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_BanChat_Rsp::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_BanChat_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_BanChat_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_BanChat_Rsp::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_BanLogin_Req

// required int64 uid = 1;
inline bool Admin_BanLogin_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_BanLogin_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_BanLogin_Req::uid() const {
  return uid_;
}
inline void Admin_BanLogin_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required bool isban = 2;
inline bool Admin_BanLogin_Req::has_isban() const {
  return _has_bit(1);
}
inline void Admin_BanLogin_Req::clear_isban() {
  isban_ = false;
  _clear_bit(1);
}
inline bool Admin_BanLogin_Req::isban() const {
  return isban_;
}
inline void Admin_BanLogin_Req::set_isban(bool value) {
  _set_bit(1);
  isban_ = value;
}

// required int32 time = 3;
inline bool Admin_BanLogin_Req::has_time() const {
  return _has_bit(2);
}
inline void Admin_BanLogin_Req::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_BanLogin_Req::time() const {
  return time_;
}
inline void Admin_BanLogin_Req::set_time(::google::protobuf::int32 value) {
  _set_bit(2);
  time_ = value;
}

// required int32 gid = 4 [default = 0];
inline bool Admin_BanLogin_Req::has_gid() const {
  return _has_bit(3);
}
inline void Admin_BanLogin_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_BanLogin_Req::gid() const {
  return gid_;
}
inline void Admin_BanLogin_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_BanLogin_Req::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_BanLogin_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BanLogin_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_BanLogin_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_BanLogin_Req::has_sid() const {
  return _has_bit(5);
}
inline void Admin_BanLogin_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_BanLogin_Req::sid() const {
  return *sid_;
}
inline void Admin_BanLogin_Req::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanLogin_Req::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanLogin_Req::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BanLogin_Req::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_BanLogin_Req::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_BanLogin_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_BanLogin_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_BanLogin_Req::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_BanLogin_Rsp

// required int64 uid = 1;
inline bool Admin_BanLogin_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_BanLogin_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_BanLogin_Rsp::uid() const {
  return uid_;
}
inline void Admin_BanLogin_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required bool isban = 2;
inline bool Admin_BanLogin_Rsp::has_isban() const {
  return _has_bit(1);
}
inline void Admin_BanLogin_Rsp::clear_isban() {
  isban_ = false;
  _clear_bit(1);
}
inline bool Admin_BanLogin_Rsp::isban() const {
  return isban_;
}
inline void Admin_BanLogin_Rsp::set_isban(bool value) {
  _set_bit(1);
  isban_ = value;
}

// required int32 time = 3;
inline bool Admin_BanLogin_Rsp::has_time() const {
  return _has_bit(2);
}
inline void Admin_BanLogin_Rsp::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_BanLogin_Rsp::time() const {
  return time_;
}
inline void Admin_BanLogin_Rsp::set_time(::google::protobuf::int32 value) {
  _set_bit(2);
  time_ = value;
}

// required int32 gid = 4;
inline bool Admin_BanLogin_Rsp::has_gid() const {
  return _has_bit(3);
}
inline void Admin_BanLogin_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_BanLogin_Rsp::gid() const {
  return gid_;
}
inline void Admin_BanLogin_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_BanLogin_Rsp::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_BanLogin_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BanLogin_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_BanLogin_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_BanLogin_Rsp::has_sid() const {
  return _has_bit(5);
}
inline void Admin_BanLogin_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_BanLogin_Rsp::sid() const {
  return *sid_;
}
inline void Admin_BanLogin_Rsp::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanLogin_Rsp::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BanLogin_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BanLogin_Rsp::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_BanLogin_Rsp::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_BanLogin_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_BanLogin_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_BanLogin_Rsp::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_Reload_Req

// required int32 gid = 1 [default = 0];
inline bool Admin_Reload_Req::has_gid() const {
  return _has_bit(0);
}
inline void Admin_Reload_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Admin_Reload_Req::gid() const {
  return gid_;
}
inline void Admin_Reload_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required int32 adminfd = 2;
inline bool Admin_Reload_Req::has_adminfd() const {
  return _has_bit(1);
}
inline void Admin_Reload_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_Reload_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_Reload_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(1);
  adminfd_ = value;
}

// optional string sid = 3;
inline bool Admin_Reload_Req::has_sid() const {
  return _has_bit(2);
}
inline void Admin_Reload_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_Reload_Req::sid() const {
  return *sid_;
}
inline void Admin_Reload_Req::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_Reload_Req::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_Reload_Req::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_Reload_Req::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 4 [default = false];
inline bool Admin_Reload_Req::has_fromweb() const {
  return _has_bit(3);
}
inline void Admin_Reload_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(3);
}
inline bool Admin_Reload_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_Reload_Req::set_fromweb(bool value) {
  _set_bit(3);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_Reload_Rsp

// required int32 gid = 1;
inline bool Admin_Reload_Rsp::has_gid() const {
  return _has_bit(0);
}
inline void Admin_Reload_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Admin_Reload_Rsp::gid() const {
  return gid_;
}
inline void Admin_Reload_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required int32 adminfd = 2;
inline bool Admin_Reload_Rsp::has_adminfd() const {
  return _has_bit(1);
}
inline void Admin_Reload_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_Reload_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_Reload_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(1);
  adminfd_ = value;
}

// optional string sid = 3;
inline bool Admin_Reload_Rsp::has_sid() const {
  return _has_bit(2);
}
inline void Admin_Reload_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_Reload_Rsp::sid() const {
  return *sid_;
}
inline void Admin_Reload_Rsp::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_Reload_Rsp::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_Reload_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_Reload_Rsp::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 4 [default = false];
inline bool Admin_Reload_Rsp::has_fromweb() const {
  return _has_bit(3);
}
inline void Admin_Reload_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(3);
}
inline bool Admin_Reload_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_Reload_Rsp::set_fromweb(bool value) {
  _set_bit(3);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_BandWGUser_Req

// required int32 gid = 1 [default = 0];
inline bool Admin_BandWGUser_Req::has_gid() const {
  return _has_bit(0);
}
inline void Admin_BandWGUser_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Req::gid() const {
  return gid_;
}
inline void Admin_BandWGUser_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required int32 adminfd = 2;
inline bool Admin_BandWGUser_Req::has_adminfd() const {
  return _has_bit(1);
}
inline void Admin_BandWGUser_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_BandWGUser_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(1);
  adminfd_ = value;
}

// optional string sid = 3;
inline bool Admin_BandWGUser_Req::has_sid() const {
  return _has_bit(2);
}
inline void Admin_BandWGUser_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_BandWGUser_Req::sid() const {
  return *sid_;
}
inline void Admin_BandWGUser_Req::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BandWGUser_Req::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BandWGUser_Req::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BandWGUser_Req::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 4 [default = false];
inline bool Admin_BandWGUser_Req::has_fromweb() const {
  return _has_bit(3);
}
inline void Admin_BandWGUser_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(3);
}
inline bool Admin_BandWGUser_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_BandWGUser_Req::set_fromweb(bool value) {
  _set_bit(3);
  fromweb_ = value;
}

// optional int32 banduser = 5 [default = 20];
inline bool Admin_BandWGUser_Req::has_banduser() const {
  return _has_bit(4);
}
inline void Admin_BandWGUser_Req::clear_banduser() {
  banduser_ = 20;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Req::banduser() const {
  return banduser_;
}
inline void Admin_BandWGUser_Req::set_banduser(::google::protobuf::int32 value) {
  _set_bit(4);
  banduser_ = value;
}

// -------------------------------------------------------------------

// Admin_BandWGUser_Rsp

// required int32 gid = 1;
inline bool Admin_BandWGUser_Rsp::has_gid() const {
  return _has_bit(0);
}
inline void Admin_BandWGUser_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Rsp::gid() const {
  return gid_;
}
inline void Admin_BandWGUser_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(0);
  gid_ = value;
}

// required int32 adminfd = 2;
inline bool Admin_BandWGUser_Rsp::has_adminfd() const {
  return _has_bit(1);
}
inline void Admin_BandWGUser_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_BandWGUser_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(1);
  adminfd_ = value;
}

// optional string sid = 3;
inline bool Admin_BandWGUser_Rsp::has_sid() const {
  return _has_bit(2);
}
inline void Admin_BandWGUser_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Admin_BandWGUser_Rsp::sid() const {
  return *sid_;
}
inline void Admin_BandWGUser_Rsp::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BandWGUser_Rsp::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_BandWGUser_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BandWGUser_Rsp::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 4 [default = false];
inline bool Admin_BandWGUser_Rsp::has_fromweb() const {
  return _has_bit(3);
}
inline void Admin_BandWGUser_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(3);
}
inline bool Admin_BandWGUser_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_BandWGUser_Rsp::set_fromweb(bool value) {
  _set_bit(3);
  fromweb_ = value;
}

// optional int32 banduser = 5 [default = 20];
inline bool Admin_BandWGUser_Rsp::has_banduser() const {
  return _has_bit(4);
}
inline void Admin_BandWGUser_Rsp::clear_banduser() {
  banduser_ = 20;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_BandWGUser_Rsp::banduser() const {
  return banduser_;
}
inline void Admin_BandWGUser_Rsp::set_banduser(::google::protobuf::int32 value) {
  _set_bit(4);
  banduser_ = value;
}

// -------------------------------------------------------------------

// InviteFriend

// optional string invitePlatID = 1;
inline bool InviteFriend::has_inviteplatid() const {
  return _has_bit(0);
}
inline void InviteFriend::clear_inviteplatid() {
  if (inviteplatid_ != &_default_inviteplatid_) {
    inviteplatid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& InviteFriend::inviteplatid() const {
  return *inviteplatid_;
}
inline void InviteFriend::set_inviteplatid(const ::std::string& value) {
  _set_bit(0);
  if (inviteplatid_ == &_default_inviteplatid_) {
    inviteplatid_ = new ::std::string;
  }
  inviteplatid_->assign(value);
}
inline void InviteFriend::set_inviteplatid(const char* value) {
  _set_bit(0);
  if (inviteplatid_ == &_default_inviteplatid_) {
    inviteplatid_ = new ::std::string;
  }
  inviteplatid_->assign(value);
}
inline void InviteFriend::set_inviteplatid(const char* value, size_t size) {
  _set_bit(0);
  if (inviteplatid_ == &_default_inviteplatid_) {
    inviteplatid_ = new ::std::string;
  }
  inviteplatid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteFriend::mutable_inviteplatid() {
  _set_bit(0);
  if (inviteplatid_ == &_default_inviteplatid_) {
    inviteplatid_ = new ::std::string;
  }
  return inviteplatid_;
}

// optional string invitedPlatID = 2;
inline bool InviteFriend::has_invitedplatid() const {
  return _has_bit(1);
}
inline void InviteFriend::clear_invitedplatid() {
  if (invitedplatid_ != &_default_invitedplatid_) {
    invitedplatid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& InviteFriend::invitedplatid() const {
  return *invitedplatid_;
}
inline void InviteFriend::set_invitedplatid(const ::std::string& value) {
  _set_bit(1);
  if (invitedplatid_ == &_default_invitedplatid_) {
    invitedplatid_ = new ::std::string;
  }
  invitedplatid_->assign(value);
}
inline void InviteFriend::set_invitedplatid(const char* value) {
  _set_bit(1);
  if (invitedplatid_ == &_default_invitedplatid_) {
    invitedplatid_ = new ::std::string;
  }
  invitedplatid_->assign(value);
}
inline void InviteFriend::set_invitedplatid(const char* value, size_t size) {
  _set_bit(1);
  if (invitedplatid_ == &_default_invitedplatid_) {
    invitedplatid_ = new ::std::string;
  }
  invitedplatid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteFriend::mutable_invitedplatid() {
  _set_bit(1);
  if (invitedplatid_ == &_default_invitedplatid_) {
    invitedplatid_ = new ::std::string;
  }
  return invitedplatid_;
}

// optional int64 invitedUid = 3;
inline bool InviteFriend::has_inviteduid() const {
  return _has_bit(2);
}
inline void InviteFriend::clear_inviteduid() {
  inviteduid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 InviteFriend::inviteduid() const {
  return inviteduid_;
}
inline void InviteFriend::set_inviteduid(::google::protobuf::int64 value) {
  _set_bit(2);
  inviteduid_ = value;
}

// optional string invitedName = 4;
inline bool InviteFriend::has_invitedname() const {
  return _has_bit(3);
}
inline void InviteFriend::clear_invitedname() {
  if (invitedname_ != &_default_invitedname_) {
    invitedname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& InviteFriend::invitedname() const {
  return *invitedname_;
}
inline void InviteFriend::set_invitedname(const ::std::string& value) {
  _set_bit(3);
  if (invitedname_ == &_default_invitedname_) {
    invitedname_ = new ::std::string;
  }
  invitedname_->assign(value);
}
inline void InviteFriend::set_invitedname(const char* value) {
  _set_bit(3);
  if (invitedname_ == &_default_invitedname_) {
    invitedname_ = new ::std::string;
  }
  invitedname_->assign(value);
}
inline void InviteFriend::set_invitedname(const char* value, size_t size) {
  _set_bit(3);
  if (invitedname_ == &_default_invitedname_) {
    invitedname_ = new ::std::string;
  }
  invitedname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteFriend::mutable_invitedname() {
  _set_bit(3);
  if (invitedname_ == &_default_invitedname_) {
    invitedname_ = new ::std::string;
  }
  return invitedname_;
}

// optional string sid = 5;
inline bool InviteFriend::has_sid() const {
  return _has_bit(4);
}
inline void InviteFriend::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& InviteFriend::sid() const {
  return *sid_;
}
inline void InviteFriend::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void InviteFriend::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void InviteFriend::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteFriend::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional int32 fd = 6;
inline bool InviteFriend::has_fd() const {
  return _has_bit(5);
}
inline void InviteFriend::clear_fd() {
  fd_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 InviteFriend::fd() const {
  return fd_;
}
inline void InviteFriend::set_fd(::google::protobuf::int32 value) {
  _set_bit(5);
  fd_ = value;
}

// -------------------------------------------------------------------

// PhotoNum

// required int64 uid = 1;
inline bool PhotoNum::has_uid() const {
  return _has_bit(0);
}
inline void PhotoNum::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PhotoNum::uid() const {
  return uid_;
}
inline void PhotoNum::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int32 type = 2;
inline bool PhotoNum::has_type() const {
  return _has_bit(1);
}
inline void PhotoNum::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 PhotoNum::type() const {
  return type_;
}
inline void PhotoNum::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// required string sid = 3;
inline bool PhotoNum::has_sid() const {
  return _has_bit(2);
}
inline void PhotoNum::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& PhotoNum::sid() const {
  return *sid_;
}
inline void PhotoNum::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void PhotoNum::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void PhotoNum::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhotoNum::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// required int32 fd = 4;
inline bool PhotoNum::has_fd() const {
  return _has_bit(3);
}
inline void PhotoNum::clear_fd() {
  fd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PhotoNum::fd() const {
  return fd_;
}
inline void PhotoNum::set_fd(::google::protobuf::int32 value) {
  _set_bit(3);
  fd_ = value;
}

// optional int32 value = 5;
inline bool PhotoNum::has_value() const {
  return _has_bit(4);
}
inline void PhotoNum::clear_value() {
  value_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 PhotoNum::value() const {
  return value_;
}
inline void PhotoNum::set_value(::google::protobuf::int32 value) {
  _set_bit(4);
  value_ = value;
}

// -------------------------------------------------------------------

// Msg_StarUser

// required int32 level = 1 [default = 0];
inline bool Msg_StarUser::has_level() const {
  return _has_bit(0);
}
inline void Msg_StarUser::clear_level() {
  level_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Msg_StarUser::level() const {
  return level_;
}
inline void Msg_StarUser::set_level(::google::protobuf::int32 value) {
  _set_bit(0);
  level_ = value;
}

// optional int32 type = 2 [default = 0];
inline bool Msg_StarUser::has_type() const {
  return _has_bit(1);
}
inline void Msg_StarUser::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Msg_StarUser::type() const {
  return type_;
}
inline void Msg_StarUser::set_type(::google::protobuf::int32 value) {
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// callbackFriend

// required int64 uid = 1;
inline bool callbackFriend::has_uid() const {
  return _has_bit(0);
}
inline void callbackFriend::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 callbackFriend::uid() const {
  return uid_;
}
inline void callbackFriend::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// repeated string friends_platid = 2;
inline int callbackFriend::friends_platid_size() const {
  return friends_platid_.size();
}
inline void callbackFriend::clear_friends_platid() {
  friends_platid_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
callbackFriend::friends_platid() const {
  return friends_platid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
callbackFriend::mutable_friends_platid() {
  return &friends_platid_;
}
inline const ::std::string& callbackFriend::friends_platid(int index) const {
  return friends_platid_.Get(index);
}
inline ::std::string* callbackFriend::mutable_friends_platid(int index) {
  return friends_platid_.Mutable(index);
}
inline void callbackFriend::set_friends_platid(int index, const ::std::string& value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void callbackFriend::set_friends_platid(int index, const char* value) {
  friends_platid_.Mutable(index)->assign(value);
}
inline void callbackFriend::set_friends_platid(int index, const char* value, size_t size) {
  friends_platid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* callbackFriend::add_friends_platid() {
  return friends_platid_.Add();
}
inline void callbackFriend::add_friends_platid(const ::std::string& value) {
  friends_platid_.Add()->assign(value);
}
inline void callbackFriend::add_friends_platid(const char* value) {
  friends_platid_.Add()->assign(value);
}
inline void callbackFriend::add_friends_platid(const char* value, size_t size) {
  friends_platid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// required string sid = 3;
inline bool callbackFriend::has_sid() const {
  return _has_bit(2);
}
inline void callbackFriend::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& callbackFriend::sid() const {
  return *sid_;
}
inline void callbackFriend::set_sid(const ::std::string& value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void callbackFriend::set_sid(const char* value) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void callbackFriend::set_sid(const char* value, size_t size) {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* callbackFriend::mutable_sid() {
  _set_bit(2);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// required int32 fd = 4;
inline bool callbackFriend::has_fd() const {
  return _has_bit(3);
}
inline void callbackFriend::clear_fd() {
  fd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 callbackFriend::fd() const {
  return fd_;
}
inline void callbackFriend::set_fd(::google::protobuf::int32 value) {
  _set_bit(3);
  fd_ = value;
}

// optional bool succ = 5;
inline bool callbackFriend::has_succ() const {
  return _has_bit(4);
}
inline void callbackFriend::clear_succ() {
  succ_ = false;
  _clear_bit(4);
}
inline bool callbackFriend::succ() const {
  return succ_;
}
inline void callbackFriend::set_succ(bool value) {
  _set_bit(4);
  succ_ = value;
}

// -------------------------------------------------------------------

// callbackFriendToPlatid

// required int64 uid = 1;
inline bool callbackFriendToPlatid::has_uid() const {
  return _has_bit(0);
}
inline void callbackFriendToPlatid::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 callbackFriendToPlatid::uid() const {
  return uid_;
}
inline void callbackFriendToPlatid::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required string platid = 2;
inline bool callbackFriendToPlatid::has_platid() const {
  return _has_bit(1);
}
inline void callbackFriendToPlatid::clear_platid() {
  if (platid_ != &_default_platid_) {
    platid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& callbackFriendToPlatid::platid() const {
  return *platid_;
}
inline void callbackFriendToPlatid::set_platid(const ::std::string& value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void callbackFriendToPlatid::set_platid(const char* value) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(value);
}
inline void callbackFriendToPlatid::set_platid(const char* value, size_t size) {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  platid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* callbackFriendToPlatid::mutable_platid() {
  _set_bit(1);
  if (platid_ == &_default_platid_) {
    platid_ = new ::std::string;
  }
  return platid_;
}

// -------------------------------------------------------------------

// Admin_AddHonor_Req

// required int64 uid = 1;
inline bool Admin_AddHonor_Req::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddHonor_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddHonor_Req::uid() const {
  return uid_;
}
inline void Admin_AddHonor_Req::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int64 honor = 2;
inline bool Admin_AddHonor_Req::has_honor() const {
  return _has_bit(1);
}
inline void Admin_AddHonor_Req::clear_honor() {
  honor_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 Admin_AddHonor_Req::honor() const {
  return honor_;
}
inline void Admin_AddHonor_Req::set_honor(::google::protobuf::int64 value) {
  _set_bit(1);
  honor_ = value;
}

// required int32 gid = 3 [default = 0];
inline bool Admin_AddHonor_Req::has_gid() const {
  return _has_bit(2);
}
inline void Admin_AddHonor_Req::clear_gid() {
  gid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Admin_AddHonor_Req::gid() const {
  return gid_;
}
inline void Admin_AddHonor_Req::set_gid(::google::protobuf::int32 value) {
  _set_bit(2);
  gid_ = value;
}

// required int32 adminfd = 4;
inline bool Admin_AddHonor_Req::has_adminfd() const {
  return _has_bit(3);
}
inline void Admin_AddHonor_Req::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddHonor_Req::adminfd() const {
  return adminfd_;
}
inline void Admin_AddHonor_Req::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(3);
  adminfd_ = value;
}

// optional string sid = 5;
inline bool Admin_AddHonor_Req::has_sid() const {
  return _has_bit(4);
}
inline void Admin_AddHonor_Req::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Admin_AddHonor_Req::sid() const {
  return *sid_;
}
inline void Admin_AddHonor_Req::set_sid(const ::std::string& value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddHonor_Req::set_sid(const char* value) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddHonor_Req::set_sid(const char* value, size_t size) {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddHonor_Req::mutable_sid() {
  _set_bit(4);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 6 [default = false];
inline bool Admin_AddHonor_Req::has_fromweb() const {
  return _has_bit(5);
}
inline void Admin_AddHonor_Req::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(5);
}
inline bool Admin_AddHonor_Req::fromweb() const {
  return fromweb_;
}
inline void Admin_AddHonor_Req::set_fromweb(bool value) {
  _set_bit(5);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Admin_AddHonor_Rsp

// required int64 uid = 1;
inline bool Admin_AddHonor_Rsp::has_uid() const {
  return _has_bit(0);
}
inline void Admin_AddHonor_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Admin_AddHonor_Rsp::uid() const {
  return uid_;
}
inline void Admin_AddHonor_Rsp::set_uid(::google::protobuf::int64 value) {
  _set_bit(0);
  uid_ = value;
}

// required int64 oldhonor = 2;
inline bool Admin_AddHonor_Rsp::has_oldhonor() const {
  return _has_bit(1);
}
inline void Admin_AddHonor_Rsp::clear_oldhonor() {
  oldhonor_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 Admin_AddHonor_Rsp::oldhonor() const {
  return oldhonor_;
}
inline void Admin_AddHonor_Rsp::set_oldhonor(::google::protobuf::int64 value) {
  _set_bit(1);
  oldhonor_ = value;
}

// required int64 newhonor = 3;
inline bool Admin_AddHonor_Rsp::has_newhonor() const {
  return _has_bit(2);
}
inline void Admin_AddHonor_Rsp::clear_newhonor() {
  newhonor_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Admin_AddHonor_Rsp::newhonor() const {
  return newhonor_;
}
inline void Admin_AddHonor_Rsp::set_newhonor(::google::protobuf::int64 value) {
  _set_bit(2);
  newhonor_ = value;
}

// required int32 gid = 4;
inline bool Admin_AddHonor_Rsp::has_gid() const {
  return _has_bit(3);
}
inline void Admin_AddHonor_Rsp::clear_gid() {
  gid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Admin_AddHonor_Rsp::gid() const {
  return gid_;
}
inline void Admin_AddHonor_Rsp::set_gid(::google::protobuf::int32 value) {
  _set_bit(3);
  gid_ = value;
}

// required int32 adminfd = 5;
inline bool Admin_AddHonor_Rsp::has_adminfd() const {
  return _has_bit(4);
}
inline void Admin_AddHonor_Rsp::clear_adminfd() {
  adminfd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Admin_AddHonor_Rsp::adminfd() const {
  return adminfd_;
}
inline void Admin_AddHonor_Rsp::set_adminfd(::google::protobuf::int32 value) {
  _set_bit(4);
  adminfd_ = value;
}

// optional string sid = 6;
inline bool Admin_AddHonor_Rsp::has_sid() const {
  return _has_bit(5);
}
inline void Admin_AddHonor_Rsp::clear_sid() {
  if (sid_ != &_default_sid_) {
    sid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Admin_AddHonor_Rsp::sid() const {
  return *sid_;
}
inline void Admin_AddHonor_Rsp::set_sid(const ::std::string& value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddHonor_Rsp::set_sid(const char* value) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void Admin_AddHonor_Rsp::set_sid(const char* value, size_t size) {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_AddHonor_Rsp::mutable_sid() {
  _set_bit(5);
  if (sid_ == &_default_sid_) {
    sid_ = new ::std::string;
  }
  return sid_;
}

// optional bool fromweb = 7 [default = false];
inline bool Admin_AddHonor_Rsp::has_fromweb() const {
  return _has_bit(6);
}
inline void Admin_AddHonor_Rsp::clear_fromweb() {
  fromweb_ = false;
  _clear_bit(6);
}
inline bool Admin_AddHonor_Rsp::fromweb() const {
  return fromweb_;
}
inline void Admin_AddHonor_Rsp::set_fromweb(bool value) {
  _set_bit(6);
  fromweb_ = value;
}

// -------------------------------------------------------------------

// Event

// required int32 cmd = 1;
inline bool Event::has_cmd() const {
  return _has_bit(0);
}
inline void Event::clear_cmd() {
  cmd_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Event::cmd() const {
  return cmd_;
}
inline void Event::set_cmd(::google::protobuf::int32 value) {
  _set_bit(0);
  cmd_ = value;
}

// required int32 state = 2;
inline bool Event::has_state() const {
  return _has_bit(1);
}
inline void Event::clear_state() {
  state_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Event::state() const {
  return state_;
}
inline void Event::set_state(::google::protobuf::int32 value) {
  _set_bit(1);
  state_ = value;
}

// required int64 time = 3;
inline bool Event::has_time() const {
  return _has_bit(2);
}
inline void Event::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Event::time() const {
  return time_;
}
inline void Event::set_time(::google::protobuf::int64 value) {
  _set_bit(2);
  time_ = value;
}

// optional int64 uid = 4;
inline bool Event::has_uid() const {
  return _has_bit(3);
}
inline void Event::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 Event::uid() const {
  return uid_;
}
inline void Event::set_uid(::google::protobuf::int64 value) {
  _set_bit(3);
  uid_ = value;
}

// optional int32 fromworld_fd = 5;
inline bool Event::has_fromworld_fd() const {
  return _has_bit(4);
}
inline void Event::clear_fromworld_fd() {
  fromworld_fd_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Event::fromworld_fd() const {
  return fromworld_fd_;
}
inline void Event::set_fromworld_fd(::google::protobuf::int32 value) {
  _set_bit(4);
  fromworld_fd_ = value;
}

// optional .WorkingStatus_Req workingStatus_req = 6;
inline bool Event::has_workingstatus_req() const {
  return _has_bit(5);
}
inline void Event::clear_workingstatus_req() {
  if (workingstatus_req_ != NULL) workingstatus_req_->::WorkingStatus_Req::Clear();
  _clear_bit(5);
}
inline const ::WorkingStatus_Req& Event::workingstatus_req() const {
  return workingstatus_req_ != NULL ? *workingstatus_req_ : *default_instance_->workingstatus_req_;
}
inline ::WorkingStatus_Req* Event::mutable_workingstatus_req() {
  _set_bit(5);
  if (workingstatus_req_ == NULL) workingstatus_req_ = new ::WorkingStatus_Req;
  return workingstatus_req_;
}

// optional .UserLogin_Req userLogin_req = 7;
inline bool Event::has_userlogin_req() const {
  return _has_bit(6);
}
inline void Event::clear_userlogin_req() {
  if (userlogin_req_ != NULL) userlogin_req_->::UserLogin_Req::Clear();
  _clear_bit(6);
}
inline const ::UserLogin_Req& Event::userlogin_req() const {
  return userlogin_req_ != NULL ? *userlogin_req_ : *default_instance_->userlogin_req_;
}
inline ::UserLogin_Req* Event::mutable_userlogin_req() {
  _set_bit(6);
  if (userlogin_req_ == NULL) userlogin_req_ = new ::UserLogin_Req;
  return userlogin_req_;
}

// optional .UserLogin_Rsp userLogin_rsp = 8;
inline bool Event::has_userlogin_rsp() const {
  return _has_bit(7);
}
inline void Event::clear_userlogin_rsp() {
  if (userlogin_rsp_ != NULL) userlogin_rsp_->::UserLogin_Rsp::Clear();
  _clear_bit(7);
}
inline const ::UserLogin_Rsp& Event::userlogin_rsp() const {
  return userlogin_rsp_ != NULL ? *userlogin_rsp_ : *default_instance_->userlogin_rsp_;
}
inline ::UserLogin_Rsp* Event::mutable_userlogin_rsp() {
  _set_bit(7);
  if (userlogin_rsp_ == NULL) userlogin_rsp_ = new ::UserLogin_Rsp;
  return userlogin_rsp_;
}

// optional .UserAuth_Req userAuth_req = 9;
inline bool Event::has_userauth_req() const {
  return _has_bit(8);
}
inline void Event::clear_userauth_req() {
  if (userauth_req_ != NULL) userauth_req_->::UserAuth_Req::Clear();
  _clear_bit(8);
}
inline const ::UserAuth_Req& Event::userauth_req() const {
  return userauth_req_ != NULL ? *userauth_req_ : *default_instance_->userauth_req_;
}
inline ::UserAuth_Req* Event::mutable_userauth_req() {
  _set_bit(8);
  if (userauth_req_ == NULL) userauth_req_ = new ::UserAuth_Req;
  return userauth_req_;
}

// optional .UserAuth_Rsp userAuth_rsp = 10;
inline bool Event::has_userauth_rsp() const {
  return _has_bit(9);
}
inline void Event::clear_userauth_rsp() {
  if (userauth_rsp_ != NULL) userauth_rsp_->::UserAuth_Rsp::Clear();
  _clear_bit(9);
}
inline const ::UserAuth_Rsp& Event::userauth_rsp() const {
  return userauth_rsp_ != NULL ? *userauth_rsp_ : *default_instance_->userauth_rsp_;
}
inline ::UserAuth_Rsp* Event::mutable_userauth_rsp() {
  _set_bit(9);
  if (userauth_rsp_ == NULL) userauth_rsp_ = new ::UserAuth_Rsp;
  return userauth_rsp_;
}

// optional .SendRemoteUser_Req sendRemoteUser_req = 11;
inline bool Event::has_sendremoteuser_req() const {
  return _has_bit(10);
}
inline void Event::clear_sendremoteuser_req() {
  if (sendremoteuser_req_ != NULL) sendremoteuser_req_->::SendRemoteUser_Req::Clear();
  _clear_bit(10);
}
inline const ::SendRemoteUser_Req& Event::sendremoteuser_req() const {
  return sendremoteuser_req_ != NULL ? *sendremoteuser_req_ : *default_instance_->sendremoteuser_req_;
}
inline ::SendRemoteUser_Req* Event::mutable_sendremoteuser_req() {
  _set_bit(10);
  if (sendremoteuser_req_ == NULL) sendremoteuser_req_ = new ::SendRemoteUser_Req;
  return sendremoteuser_req_;
}

// optional .WG_UserLeave wg_UserLeave = 12;
inline bool Event::has_wg_userleave() const {
  return _has_bit(11);
}
inline void Event::clear_wg_userleave() {
  if (wg_userleave_ != NULL) wg_userleave_->::WG_UserLeave::Clear();
  _clear_bit(11);
}
inline const ::WG_UserLeave& Event::wg_userleave() const {
  return wg_userleave_ != NULL ? *wg_userleave_ : *default_instance_->wg_userleave_;
}
inline ::WG_UserLeave* Event::mutable_wg_userleave() {
  _set_bit(11);
  if (wg_userleave_ == NULL) wg_userleave_ = new ::WG_UserLeave;
  return wg_userleave_;
}

// optional .ForwardInfo forwardinfo = 14;
inline bool Event::has_forwardinfo() const {
  return _has_bit(12);
}
inline void Event::clear_forwardinfo() {
  if (forwardinfo_ != NULL) forwardinfo_->::ForwardInfo::Clear();
  _clear_bit(12);
}
inline const ::ForwardInfo& Event::forwardinfo() const {
  return forwardinfo_ != NULL ? *forwardinfo_ : *default_instance_->forwardinfo_;
}
inline ::ForwardInfo* Event::mutable_forwardinfo() {
  _set_bit(12);
  if (forwardinfo_ == NULL) forwardinfo_ = new ::ForwardInfo;
  return forwardinfo_;
}

// optional int32 starSrvID = 15;
inline bool Event::has_starsrvid() const {
  return _has_bit(13);
}
inline void Event::clear_starsrvid() {
  starsrvid_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 Event::starsrvid() const {
  return starsrvid_;
}
inline void Event::set_starsrvid(::google::protobuf::int32 value) {
  _set_bit(13);
  starsrvid_ = value;
}

// optional .GWG_CheckAttack checkAttack = 17;
inline bool Event::has_checkattack() const {
  return _has_bit(14);
}
inline void Event::clear_checkattack() {
  if (checkattack_ != NULL) checkattack_->::GWG_CheckAttack::Clear();
  _clear_bit(14);
}
inline const ::GWG_CheckAttack& Event::checkattack() const {
  return checkattack_ != NULL ? *checkattack_ : *default_instance_->checkattack_;
}
inline ::GWG_CheckAttack* Event::mutable_checkattack() {
  _set_bit(14);
  if (checkattack_ == NULL) checkattack_ = new ::GWG_CheckAttack;
  return checkattack_;
}

// optional int32 transferSrvID = 18;
inline bool Event::has_transfersrvid() const {
  return _has_bit(15);
}
inline void Event::clear_transfersrvid() {
  transfersrvid_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 Event::transfersrvid() const {
  return transfersrvid_;
}
inline void Event::set_transfersrvid(::google::protobuf::int32 value) {
  _set_bit(15);
  transfersrvid_ = value;
}

// optional .Admin_Profile_Req adminProfile_req = 32;
inline bool Event::has_adminprofile_req() const {
  return _has_bit(16);
}
inline void Event::clear_adminprofile_req() {
  if (adminprofile_req_ != NULL) adminprofile_req_->::Admin_Profile_Req::Clear();
  _clear_bit(16);
}
inline const ::Admin_Profile_Req& Event::adminprofile_req() const {
  return adminprofile_req_ != NULL ? *adminprofile_req_ : *default_instance_->adminprofile_req_;
}
inline ::Admin_Profile_Req* Event::mutable_adminprofile_req() {
  _set_bit(16);
  if (adminprofile_req_ == NULL) adminprofile_req_ = new ::Admin_Profile_Req;
  return adminprofile_req_;
}

// optional .Admin_AddExp_Req adminAddExp_req = 33;
inline bool Event::has_adminaddexp_req() const {
  return _has_bit(17);
}
inline void Event::clear_adminaddexp_req() {
  if (adminaddexp_req_ != NULL) adminaddexp_req_->::Admin_AddExp_Req::Clear();
  _clear_bit(17);
}
inline const ::Admin_AddExp_Req& Event::adminaddexp_req() const {
  return adminaddexp_req_ != NULL ? *adminaddexp_req_ : *default_instance_->adminaddexp_req_;
}
inline ::Admin_AddExp_Req* Event::mutable_adminaddexp_req() {
  _set_bit(17);
  if (adminaddexp_req_ == NULL) adminaddexp_req_ = new ::Admin_AddExp_Req;
  return adminaddexp_req_;
}

// optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
inline bool Event::has_adminaddexp_rsp() const {
  return _has_bit(18);
}
inline void Event::clear_adminaddexp_rsp() {
  if (adminaddexp_rsp_ != NULL) adminaddexp_rsp_->::Admin_AddExp_Rsp::Clear();
  _clear_bit(18);
}
inline const ::Admin_AddExp_Rsp& Event::adminaddexp_rsp() const {
  return adminaddexp_rsp_ != NULL ? *adminaddexp_rsp_ : *default_instance_->adminaddexp_rsp_;
}
inline ::Admin_AddExp_Rsp* Event::mutable_adminaddexp_rsp() {
  _set_bit(18);
  if (adminaddexp_rsp_ == NULL) adminaddexp_rsp_ = new ::Admin_AddExp_Rsp;
  return adminaddexp_rsp_;
}

// optional .Admin_AddCredit_Req adminAddCredit_req = 35;
inline bool Event::has_adminaddcredit_req() const {
  return _has_bit(19);
}
inline void Event::clear_adminaddcredit_req() {
  if (adminaddcredit_req_ != NULL) adminaddcredit_req_->::Admin_AddCredit_Req::Clear();
  _clear_bit(19);
}
inline const ::Admin_AddCredit_Req& Event::adminaddcredit_req() const {
  return adminaddcredit_req_ != NULL ? *adminaddcredit_req_ : *default_instance_->adminaddcredit_req_;
}
inline ::Admin_AddCredit_Req* Event::mutable_adminaddcredit_req() {
  _set_bit(19);
  if (adminaddcredit_req_ == NULL) adminaddcredit_req_ = new ::Admin_AddCredit_Req;
  return adminaddcredit_req_;
}

// optional .Admin_AddCredit_Rsp adminAddCredit_rsp = 36;
inline bool Event::has_adminaddcredit_rsp() const {
  return _has_bit(20);
}
inline void Event::clear_adminaddcredit_rsp() {
  if (adminaddcredit_rsp_ != NULL) adminaddcredit_rsp_->::Admin_AddCredit_Rsp::Clear();
  _clear_bit(20);
}
inline const ::Admin_AddCredit_Rsp& Event::adminaddcredit_rsp() const {
  return adminaddcredit_rsp_ != NULL ? *adminaddcredit_rsp_ : *default_instance_->adminaddcredit_rsp_;
}
inline ::Admin_AddCredit_Rsp* Event::mutable_adminaddcredit_rsp() {
  _set_bit(20);
  if (adminaddcredit_rsp_ == NULL) adminaddcredit_rsp_ = new ::Admin_AddCredit_Rsp;
  return adminaddcredit_rsp_;
}

// optional .Admin_SetLevel_Req adminSetLevel_req = 37;
inline bool Event::has_adminsetlevel_req() const {
  return _has_bit(21);
}
inline void Event::clear_adminsetlevel_req() {
  if (adminsetlevel_req_ != NULL) adminsetlevel_req_->::Admin_SetLevel_Req::Clear();
  _clear_bit(21);
}
inline const ::Admin_SetLevel_Req& Event::adminsetlevel_req() const {
  return adminsetlevel_req_ != NULL ? *adminsetlevel_req_ : *default_instance_->adminsetlevel_req_;
}
inline ::Admin_SetLevel_Req* Event::mutable_adminsetlevel_req() {
  _set_bit(21);
  if (adminsetlevel_req_ == NULL) adminsetlevel_req_ = new ::Admin_SetLevel_Req;
  return adminsetlevel_req_;
}

// optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
inline bool Event::has_adminsetlevel_rsp() const {
  return _has_bit(22);
}
inline void Event::clear_adminsetlevel_rsp() {
  if (adminsetlevel_rsp_ != NULL) adminsetlevel_rsp_->::Admin_SetLevel_Rsp::Clear();
  _clear_bit(22);
}
inline const ::Admin_SetLevel_Rsp& Event::adminsetlevel_rsp() const {
  return adminsetlevel_rsp_ != NULL ? *adminsetlevel_rsp_ : *default_instance_->adminsetlevel_rsp_;
}
inline ::Admin_SetLevel_Rsp* Event::mutable_adminsetlevel_rsp() {
  _set_bit(22);
  if (adminsetlevel_rsp_ == NULL) adminsetlevel_rsp_ = new ::Admin_SetLevel_Rsp;
  return adminsetlevel_rsp_;
}

// optional .Admin_BanChat_Req adminBanChat_req = 39;
inline bool Event::has_adminbanchat_req() const {
  return _has_bit(23);
}
inline void Event::clear_adminbanchat_req() {
  if (adminbanchat_req_ != NULL) adminbanchat_req_->::Admin_BanChat_Req::Clear();
  _clear_bit(23);
}
inline const ::Admin_BanChat_Req& Event::adminbanchat_req() const {
  return adminbanchat_req_ != NULL ? *adminbanchat_req_ : *default_instance_->adminbanchat_req_;
}
inline ::Admin_BanChat_Req* Event::mutable_adminbanchat_req() {
  _set_bit(23);
  if (adminbanchat_req_ == NULL) adminbanchat_req_ = new ::Admin_BanChat_Req;
  return adminbanchat_req_;
}

// optional .Admin_BanChat_Rsp adminBanChat_rsp = 40;
inline bool Event::has_adminbanchat_rsp() const {
  return _has_bit(24);
}
inline void Event::clear_adminbanchat_rsp() {
  if (adminbanchat_rsp_ != NULL) adminbanchat_rsp_->::Admin_BanChat_Rsp::Clear();
  _clear_bit(24);
}
inline const ::Admin_BanChat_Rsp& Event::adminbanchat_rsp() const {
  return adminbanchat_rsp_ != NULL ? *adminbanchat_rsp_ : *default_instance_->adminbanchat_rsp_;
}
inline ::Admin_BanChat_Rsp* Event::mutable_adminbanchat_rsp() {
  _set_bit(24);
  if (adminbanchat_rsp_ == NULL) adminbanchat_rsp_ = new ::Admin_BanChat_Rsp;
  return adminbanchat_rsp_;
}

// optional .Admin_BanLogin_Req adminBanLogin_req = 41;
inline bool Event::has_adminbanlogin_req() const {
  return _has_bit(25);
}
inline void Event::clear_adminbanlogin_req() {
  if (adminbanlogin_req_ != NULL) adminbanlogin_req_->::Admin_BanLogin_Req::Clear();
  _clear_bit(25);
}
inline const ::Admin_BanLogin_Req& Event::adminbanlogin_req() const {
  return adminbanlogin_req_ != NULL ? *adminbanlogin_req_ : *default_instance_->adminbanlogin_req_;
}
inline ::Admin_BanLogin_Req* Event::mutable_adminbanlogin_req() {
  _set_bit(25);
  if (adminbanlogin_req_ == NULL) adminbanlogin_req_ = new ::Admin_BanLogin_Req;
  return adminbanlogin_req_;
}

// optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 42;
inline bool Event::has_adminbanlogin_rsp() const {
  return _has_bit(26);
}
inline void Event::clear_adminbanlogin_rsp() {
  if (adminbanlogin_rsp_ != NULL) adminbanlogin_rsp_->::Admin_BanLogin_Rsp::Clear();
  _clear_bit(26);
}
inline const ::Admin_BanLogin_Rsp& Event::adminbanlogin_rsp() const {
  return adminbanlogin_rsp_ != NULL ? *adminbanlogin_rsp_ : *default_instance_->adminbanlogin_rsp_;
}
inline ::Admin_BanLogin_Rsp* Event::mutable_adminbanlogin_rsp() {
  _set_bit(26);
  if (adminbanlogin_rsp_ == NULL) adminbanlogin_rsp_ = new ::Admin_BanLogin_Rsp;
  return adminbanlogin_rsp_;
}

// optional .Admin_Reload_Req adminReload_req = 43;
inline bool Event::has_adminreload_req() const {
  return _has_bit(27);
}
inline void Event::clear_adminreload_req() {
  if (adminreload_req_ != NULL) adminreload_req_->::Admin_Reload_Req::Clear();
  _clear_bit(27);
}
inline const ::Admin_Reload_Req& Event::adminreload_req() const {
  return adminreload_req_ != NULL ? *adminreload_req_ : *default_instance_->adminreload_req_;
}
inline ::Admin_Reload_Req* Event::mutable_adminreload_req() {
  _set_bit(27);
  if (adminreload_req_ == NULL) adminreload_req_ = new ::Admin_Reload_Req;
  return adminreload_req_;
}

// optional .Admin_Reload_Rsp adminReload_rsp = 44;
inline bool Event::has_adminreload_rsp() const {
  return _has_bit(28);
}
inline void Event::clear_adminreload_rsp() {
  if (adminreload_rsp_ != NULL) adminreload_rsp_->::Admin_Reload_Rsp::Clear();
  _clear_bit(28);
}
inline const ::Admin_Reload_Rsp& Event::adminreload_rsp() const {
  return adminreload_rsp_ != NULL ? *adminreload_rsp_ : *default_instance_->adminreload_rsp_;
}
inline ::Admin_Reload_Rsp* Event::mutable_adminreload_rsp() {
  _set_bit(28);
  if (adminreload_rsp_ == NULL) adminreload_rsp_ = new ::Admin_Reload_Rsp;
  return adminreload_rsp_;
}

// optional .InviteFriend inviteFriend = 45;
inline bool Event::has_invitefriend() const {
  return _has_bit(29);
}
inline void Event::clear_invitefriend() {
  if (invitefriend_ != NULL) invitefriend_->::InviteFriend::Clear();
  _clear_bit(29);
}
inline const ::InviteFriend& Event::invitefriend() const {
  return invitefriend_ != NULL ? *invitefriend_ : *default_instance_->invitefriend_;
}
inline ::InviteFriend* Event::mutable_invitefriend() {
  _set_bit(29);
  if (invitefriend_ == NULL) invitefriend_ = new ::InviteFriend;
  return invitefriend_;
}

// optional .Admin_CanAttack_Req adminCanAttack_req = 46;
inline bool Event::has_admincanattack_req() const {
  return _has_bit(30);
}
inline void Event::clear_admincanattack_req() {
  if (admincanattack_req_ != NULL) admincanattack_req_->::Admin_CanAttack_Req::Clear();
  _clear_bit(30);
}
inline const ::Admin_CanAttack_Req& Event::admincanattack_req() const {
  return admincanattack_req_ != NULL ? *admincanattack_req_ : *default_instance_->admincanattack_req_;
}
inline ::Admin_CanAttack_Req* Event::mutable_admincanattack_req() {
  _set_bit(30);
  if (admincanattack_req_ == NULL) admincanattack_req_ = new ::Admin_CanAttack_Req;
  return admincanattack_req_;
}

// optional .Admin_CanAttack_Rsp adminCanAttack_rsp = 47;
inline bool Event::has_admincanattack_rsp() const {
  return _has_bit(31);
}
inline void Event::clear_admincanattack_rsp() {
  if (admincanattack_rsp_ != NULL) admincanattack_rsp_->::Admin_CanAttack_Rsp::Clear();
  _clear_bit(31);
}
inline const ::Admin_CanAttack_Rsp& Event::admincanattack_rsp() const {
  return admincanattack_rsp_ != NULL ? *admincanattack_rsp_ : *default_instance_->admincanattack_rsp_;
}
inline ::Admin_CanAttack_Rsp* Event::mutable_admincanattack_rsp() {
  _set_bit(31);
  if (admincanattack_rsp_ == NULL) admincanattack_rsp_ = new ::Admin_CanAttack_Rsp;
  return admincanattack_rsp_;
}

// optional .SendGift sendgift = 48;
inline bool Event::has_sendgift() const {
  return _has_bit(32);
}
inline void Event::clear_sendgift() {
  if (sendgift_ != NULL) sendgift_->::SendGift::Clear();
  _clear_bit(32);
}
inline const ::SendGift& Event::sendgift() const {
  return sendgift_ != NULL ? *sendgift_ : *default_instance_->sendgift_;
}
inline ::SendGift* Event::mutable_sendgift() {
  _set_bit(32);
  if (sendgift_ == NULL) sendgift_ = new ::SendGift;
  return sendgift_;
}

// optional .SendGiftToPlatid sendgiftplatid = 49;
inline bool Event::has_sendgiftplatid() const {
  return _has_bit(33);
}
inline void Event::clear_sendgiftplatid() {
  if (sendgiftplatid_ != NULL) sendgiftplatid_->::SendGiftToPlatid::Clear();
  _clear_bit(33);
}
inline const ::SendGiftToPlatid& Event::sendgiftplatid() const {
  return sendgiftplatid_ != NULL ? *sendgiftplatid_ : *default_instance_->sendgiftplatid_;
}
inline ::SendGiftToPlatid* Event::mutable_sendgiftplatid() {
  _set_bit(33);
  if (sendgiftplatid_ == NULL) sendgiftplatid_ = new ::SendGiftToPlatid;
  return sendgiftplatid_;
}

// optional .Admin_BandWGUser_Req adminbandwguser_req = 50;
inline bool Event::has_adminbandwguser_req() const {
  return _has_bit(34);
}
inline void Event::clear_adminbandwguser_req() {
  if (adminbandwguser_req_ != NULL) adminbandwguser_req_->::Admin_BandWGUser_Req::Clear();
  _clear_bit(34);
}
inline const ::Admin_BandWGUser_Req& Event::adminbandwguser_req() const {
  return adminbandwguser_req_ != NULL ? *adminbandwguser_req_ : *default_instance_->adminbandwguser_req_;
}
inline ::Admin_BandWGUser_Req* Event::mutable_adminbandwguser_req() {
  _set_bit(34);
  if (adminbandwguser_req_ == NULL) adminbandwguser_req_ = new ::Admin_BandWGUser_Req;
  return adminbandwguser_req_;
}

// optional .Admin_BandWGUser_Rsp adminbandwguser_rsp = 51;
inline bool Event::has_adminbandwguser_rsp() const {
  return _has_bit(35);
}
inline void Event::clear_adminbandwguser_rsp() {
  if (adminbandwguser_rsp_ != NULL) adminbandwguser_rsp_->::Admin_BandWGUser_Rsp::Clear();
  _clear_bit(35);
}
inline const ::Admin_BandWGUser_Rsp& Event::adminbandwguser_rsp() const {
  return adminbandwguser_rsp_ != NULL ? *adminbandwguser_rsp_ : *default_instance_->adminbandwguser_rsp_;
}
inline ::Admin_BandWGUser_Rsp* Event::mutable_adminbandwguser_rsp() {
  _set_bit(35);
  if (adminbandwguser_rsp_ == NULL) adminbandwguser_rsp_ = new ::Admin_BandWGUser_Rsp;
  return adminbandwguser_rsp_;
}

// optional .Admin_AdminOpt_Req adminOpt_req = 52;
inline bool Event::has_adminopt_req() const {
  return _has_bit(36);
}
inline void Event::clear_adminopt_req() {
  if (adminopt_req_ != NULL) adminopt_req_->::Admin_AdminOpt_Req::Clear();
  _clear_bit(36);
}
inline const ::Admin_AdminOpt_Req& Event::adminopt_req() const {
  return adminopt_req_ != NULL ? *adminopt_req_ : *default_instance_->adminopt_req_;
}
inline ::Admin_AdminOpt_Req* Event::mutable_adminopt_req() {
  _set_bit(36);
  if (adminopt_req_ == NULL) adminopt_req_ = new ::Admin_AdminOpt_Req;
  return adminopt_req_;
}

// optional .Admin_AdminOpt_Rsp adminOpt_rsp = 53;
inline bool Event::has_adminopt_rsp() const {
  return _has_bit(37);
}
inline void Event::clear_adminopt_rsp() {
  if (adminopt_rsp_ != NULL) adminopt_rsp_->::Admin_AdminOpt_Rsp::Clear();
  _clear_bit(37);
}
inline const ::Admin_AdminOpt_Rsp& Event::adminopt_rsp() const {
  return adminopt_rsp_ != NULL ? *adminopt_rsp_ : *default_instance_->adminopt_rsp_;
}
inline ::Admin_AdminOpt_Rsp* Event::mutable_adminopt_rsp() {
  _set_bit(37);
  if (adminopt_rsp_ == NULL) adminopt_rsp_ = new ::Admin_AdminOpt_Rsp;
  return adminopt_rsp_;
}

// optional .PhotoNum webphotonum = 54;
inline bool Event::has_webphotonum() const {
  return _has_bit(38);
}
inline void Event::clear_webphotonum() {
  if (webphotonum_ != NULL) webphotonum_->::PhotoNum::Clear();
  _clear_bit(38);
}
inline const ::PhotoNum& Event::webphotonum() const {
  return webphotonum_ != NULL ? *webphotonum_ : *default_instance_->webphotonum_;
}
inline ::PhotoNum* Event::mutable_webphotonum() {
  _set_bit(38);
  if (webphotonum_ == NULL) webphotonum_ = new ::PhotoNum;
  return webphotonum_;
}

// optional .callbackFriend callbackfriend = 55;
inline bool Event::has_callbackfriend() const {
  return _has_bit(39);
}
inline void Event::clear_callbackfriend() {
  if (callbackfriend_ != NULL) callbackfriend_->::callbackFriend::Clear();
  _clear_bit(39);
}
inline const ::callbackFriend& Event::callbackfriend() const {
  return callbackfriend_ != NULL ? *callbackfriend_ : *default_instance_->callbackfriend_;
}
inline ::callbackFriend* Event::mutable_callbackfriend() {
  _set_bit(39);
  if (callbackfriend_ == NULL) callbackfriend_ = new ::callbackFriend;
  return callbackfriend_;
}

// optional .callbackFriendToPlatid callbackfriendtoplatid = 56;
inline bool Event::has_callbackfriendtoplatid() const {
  return _has_bit(40);
}
inline void Event::clear_callbackfriendtoplatid() {
  if (callbackfriendtoplatid_ != NULL) callbackfriendtoplatid_->::callbackFriendToPlatid::Clear();
  _clear_bit(40);
}
inline const ::callbackFriendToPlatid& Event::callbackfriendtoplatid() const {
  return callbackfriendtoplatid_ != NULL ? *callbackfriendtoplatid_ : *default_instance_->callbackfriendtoplatid_;
}
inline ::callbackFriendToPlatid* Event::mutable_callbackfriendtoplatid() {
  _set_bit(40);
  if (callbackfriendtoplatid_ == NULL) callbackfriendtoplatid_ = new ::callbackFriendToPlatid;
  return callbackfriendtoplatid_;
}

// optional .Admin_AddHonor_Req adminaddhonor_req = 57;
inline bool Event::has_adminaddhonor_req() const {
  return _has_bit(41);
}
inline void Event::clear_adminaddhonor_req() {
  if (adminaddhonor_req_ != NULL) adminaddhonor_req_->::Admin_AddHonor_Req::Clear();
  _clear_bit(41);
}
inline const ::Admin_AddHonor_Req& Event::adminaddhonor_req() const {
  return adminaddhonor_req_ != NULL ? *adminaddhonor_req_ : *default_instance_->adminaddhonor_req_;
}
inline ::Admin_AddHonor_Req* Event::mutable_adminaddhonor_req() {
  _set_bit(41);
  if (adminaddhonor_req_ == NULL) adminaddhonor_req_ = new ::Admin_AddHonor_Req;
  return adminaddhonor_req_;
}

// optional .Admin_AddHonor_Rsp adminaddhonor_rsp = 58;
inline bool Event::has_adminaddhonor_rsp() const {
  return _has_bit(42);
}
inline void Event::clear_adminaddhonor_rsp() {
  if (adminaddhonor_rsp_ != NULL) adminaddhonor_rsp_->::Admin_AddHonor_Rsp::Clear();
  _clear_bit(42);
}
inline const ::Admin_AddHonor_Rsp& Event::adminaddhonor_rsp() const {
  return adminaddhonor_rsp_ != NULL ? *adminaddhonor_rsp_ : *default_instance_->adminaddhonor_rsp_;
}
inline ::Admin_AddHonor_Rsp* Event::mutable_adminaddhonor_rsp() {
  _set_bit(42);
  if (adminaddhonor_rsp_ == NULL) adminaddhonor_rsp_ = new ::Admin_AddHonor_Rsp;
  return adminaddhonor_rsp_;
}

// optional .Msg_StarUser starUser = 100;
inline bool Event::has_staruser() const {
  return _has_bit(43);
}
inline void Event::clear_staruser() {
  if (staruser_ != NULL) staruser_->::Msg_StarUser::Clear();
  _clear_bit(43);
}
inline const ::Msg_StarUser& Event::staruser() const {
  return staruser_ != NULL ? *staruser_ : *default_instance_->staruser_;
}
inline ::Msg_StarUser* Event::mutable_staruser() {
  _set_bit(43);
  if (staruser_ == NULL) staruser_ = new ::Msg_StarUser;
  return staruser_;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_event_2eproto__INCLUDED
